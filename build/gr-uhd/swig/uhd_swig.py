# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_uhd_swig', [dirname(__file__)])
        except ImportError:
            import _uhd_swig
            return _uhd_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_uhd_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _uhd_swig = swig_import_helper()
    del swig_import_helper
else:
    import _uhd_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _uhd_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _uhd_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _uhd_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _uhd_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _uhd_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _uhd_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _uhd_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _uhd_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _uhd_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _uhd_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _uhd_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _uhd_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class string_vector_t(object):
    """Proxy of C++ std::vector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _uhd_swig.string_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _uhd_swig.string_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _uhd_swig.string_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _uhd_swig.string_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _uhd_swig.string_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> string_vector_t"""
        return _uhd_swig.string_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, string_vector_t v = std::vector< std::string,std::allocator< std::string > >())"""
        return _uhd_swig.string_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _uhd_swig.string_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _uhd_swig.string_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> string_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _uhd_swig.string_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, string_vector_t v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _uhd_swig.string_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _uhd_swig.string_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _uhd_swig.string_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _uhd_swig.string_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _uhd_swig.string_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, string_vector_t v)"""
        return _uhd_swig.string_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _uhd_swig.string_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _uhd_swig.string_vector_t_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _uhd_swig.string_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _uhd_swig.string_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _uhd_swig.string_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _uhd_swig.string_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _uhd_swig.string_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> string_vector_t
        __init__(self, string_vector_t arg0) -> string_vector_t
        __init__(self, size_type size) -> string_vector_t
        __init__(self, size_type size, value_type value) -> string_vector_t
        """
        this = _uhd_swig.new_string_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _uhd_swig.string_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _uhd_swig.string_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _uhd_swig.string_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _uhd_swig.string_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _uhd_swig.string_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _uhd_swig.string_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _uhd_swig.string_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _uhd_swig.string_vector_t_capacity(self)

    __swig_destroy__ = _uhd_swig.delete_string_vector_t
    __del__ = lambda self : None;
string_vector_t_swigregister = _uhd_swig.string_vector_t_swigregister
string_vector_t_swigregister(string_vector_t)

class size_vector_t(object):
    """Proxy of C++ std::vector<(size_t)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _uhd_swig.size_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _uhd_swig.size_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _uhd_swig.size_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _uhd_swig.size_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _uhd_swig.size_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> size_vector_t"""
        return _uhd_swig.size_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, size_vector_t v = std::vector< size_t,std::allocator< size_t > >())"""
        return _uhd_swig.size_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _uhd_swig.size_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _uhd_swig.size_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> size_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _uhd_swig.size_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, size_vector_t v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _uhd_swig.size_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _uhd_swig.size_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _uhd_swig.size_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _uhd_swig.size_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _uhd_swig.size_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, size_vector_t v)"""
        return _uhd_swig.size_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _uhd_swig.size_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _uhd_swig.size_vector_t_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _uhd_swig.size_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _uhd_swig.size_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _uhd_swig.size_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _uhd_swig.size_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _uhd_swig.size_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> size_vector_t
        __init__(self, size_vector_t arg0) -> size_vector_t
        __init__(self, size_type size) -> size_vector_t
        __init__(self, size_type size, value_type value) -> size_vector_t
        """
        this = _uhd_swig.new_size_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _uhd_swig.size_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _uhd_swig.size_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _uhd_swig.size_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _uhd_swig.size_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _uhd_swig.size_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _uhd_swig.size_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _uhd_swig.size_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _uhd_swig.size_vector_t_capacity(self)

    __swig_destroy__ = _uhd_swig.delete_size_vector_t
    __del__ = lambda self : None;
size_vector_t_swigregister = _uhd_swig.size_vector_t_swigregister
size_vector_t_swigregister(size_vector_t)

class string_string_dict_t(object):
    """Proxy of C++ uhd::dict<(std::string,std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> string_string_dict_t"""
        this = _uhd_swig.new_string_string_dict_t()
        try: self.this.append(this)
        except: self.this = this
    def size(self):
        """size(self) -> std::size_t"""
        return _uhd_swig.string_string_dict_t_size(self)

    def keys(self):
        """keys(self) -> string_vector_t"""
        return _uhd_swig.string_string_dict_t_keys(self)

    def vals(self):
        """vals(self) -> string_vector_t"""
        return _uhd_swig.string_string_dict_t_vals(self)

    def has_key(self, *args, **kwargs):
        """has_key(self, string key) -> bool"""
        return _uhd_swig.string_string_dict_t_has_key(self, *args, **kwargs)

    def get(self, *args):
        """
        get(self, string key, string other) -> string
        get(self, string key) -> string
        """
        return _uhd_swig.string_string_dict_t_get(self, *args)

    def set(self, *args, **kwargs):
        """set(self, string key, string val)"""
        return _uhd_swig.string_string_dict_t_set(self, *args, **kwargs)

    def pop(self, *args, **kwargs):
        """pop(self, string key) -> string"""
        return _uhd_swig.string_string_dict_t_pop(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_string_string_dict_t
    __del__ = lambda self : None;
string_string_dict_t_swigregister = _uhd_swig.string_string_dict_t_swigregister
string_string_dict_t_swigregister(string_string_dict_t)

class device_addr_t(string_string_dict_t):
    """Proxy of C++ uhd::device_addr_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, args = ""): 
        """__init__(self, string args = "") -> device_addr_t"""
        this = _uhd_swig.new_device_addr_t(args)
        try: self.this.append(this)
        except: self.this = this
    def to_pp_string(self):
        """to_pp_string(self) -> string"""
        return _uhd_swig.device_addr_t_to_pp_string(self)

    def to_string(self):
        """to_string(self) -> string"""
        return _uhd_swig.device_addr_t_to_string(self)

    __swig_destroy__ = _uhd_swig.delete_device_addr_t
    __del__ = lambda self : None;
device_addr_t_swigregister = _uhd_swig.device_addr_t_swigregister
device_addr_t_swigregister(device_addr_t)


def separate_device_addr(*args, **kwargs):
  """separate_device_addr(device_addr_t dev_addr) -> device_addrs_t"""
  return _uhd_swig.separate_device_addr(*args, **kwargs)

def combine_device_addrs(*args, **kwargs):
  """combine_device_addrs(device_addrs_t dev_addrs) -> device_addr_t"""
  return _uhd_swig.combine_device_addrs(*args, **kwargs)
class io_type_t(object):
    """Proxy of C++ uhd::io_type_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CUSTOM_TYPE = _uhd_swig.io_type_t_CUSTOM_TYPE
    COMPLEX_FLOAT64 = _uhd_swig.io_type_t_COMPLEX_FLOAT64
    COMPLEX_FLOAT32 = _uhd_swig.io_type_t_COMPLEX_FLOAT32
    COMPLEX_INT16 = _uhd_swig.io_type_t_COMPLEX_INT16
    COMPLEX_INT8 = _uhd_swig.io_type_t_COMPLEX_INT8
    size = _swig_property(_uhd_swig.io_type_t_size_get)
    tid = _swig_property(_uhd_swig.io_type_t_tid_get)
    def __init__(self, *args): 
        """
        __init__(self, tid_t tid) -> io_type_t
        __init__(self, size_t size) -> io_type_t
        """
        this = _uhd_swig.new_io_type_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_io_type_t
    __del__ = lambda self : None;
io_type_t_swigregister = _uhd_swig.io_type_t_swigregister
io_type_t_swigregister(io_type_t)

class range_vector_t(object):
    """Proxy of C++ std::vector<(uhd::range_t)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _uhd_swig.range_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _uhd_swig.range_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _uhd_swig.range_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _uhd_swig.range_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _uhd_swig.range_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> range_vector_t"""
        return _uhd_swig.range_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, range_vector_t v = std::vector< uhd::range_t,std::allocator< uhd::range_t > >())"""
        return _uhd_swig.range_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _uhd_swig.range_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _uhd_swig.range_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> range_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _uhd_swig.range_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, range_vector_t v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _uhd_swig.range_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _uhd_swig.range_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _uhd_swig.range_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _uhd_swig.range_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _uhd_swig.range_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, range_vector_t v)"""
        return _uhd_swig.range_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _uhd_swig.range_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _uhd_swig.range_vector_t_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _uhd_swig.range_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _uhd_swig.range_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _uhd_swig.range_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _uhd_swig.range_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _uhd_swig.range_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> range_vector_t
        __init__(self, range_vector_t arg0) -> range_vector_t
        __init__(self, size_type size) -> range_vector_t
        __init__(self, size_type size, value_type value) -> range_vector_t
        """
        this = _uhd_swig.new_range_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _uhd_swig.range_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _uhd_swig.range_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _uhd_swig.range_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _uhd_swig.range_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _uhd_swig.range_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _uhd_swig.range_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _uhd_swig.range_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _uhd_swig.range_vector_t_capacity(self)

    __swig_destroy__ = _uhd_swig.delete_range_vector_t
    __del__ = lambda self : None;
range_vector_t_swigregister = _uhd_swig.range_vector_t_swigregister
range_vector_t_swigregister(range_vector_t)

class range_t(object):
    """Proxy of C++ uhd::range_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double value = 0) -> range_t
        __init__(self, double start, double stop, double step = 0) -> range_t
        """
        this = _uhd_swig.new_range_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self):
        """start(self) -> double"""
        return _uhd_swig.range_t_start(self)

    def stop(self):
        """stop(self) -> double"""
        return _uhd_swig.range_t_stop(self)

    def step(self):
        """step(self) -> double"""
        return _uhd_swig.range_t_step(self)

    def to_pp_string(self):
        """to_pp_string(self) -> string"""
        return _uhd_swig.range_t_to_pp_string(self)

    __swig_destroy__ = _uhd_swig.delete_range_t
    __del__ = lambda self : None;
range_t_swigregister = _uhd_swig.range_t_swigregister
range_t_swigregister(range_t)

class meta_range_t(range_vector_t):
    """Proxy of C++ uhd::meta_range_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> meta_range_t
        __init__(self, double start, double stop, double step = 0) -> meta_range_t
        """
        this = _uhd_swig.new_meta_range_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self):
        """start(self) -> double"""
        return _uhd_swig.meta_range_t_start(self)

    def stop(self):
        """stop(self) -> double"""
        return _uhd_swig.meta_range_t_stop(self)

    def step(self):
        """step(self) -> double"""
        return _uhd_swig.meta_range_t_step(self)

    def clip(self, *args, **kwargs):
        """clip(self, double value, bool clip_step = False) -> double"""
        return _uhd_swig.meta_range_t_clip(self, *args, **kwargs)

    def to_pp_string(self):
        """to_pp_string(self) -> string"""
        return _uhd_swig.meta_range_t_to_pp_string(self)

    __swig_destroy__ = _uhd_swig.delete_meta_range_t
    __del__ = lambda self : None;
meta_range_t_swigregister = _uhd_swig.meta_range_t_swigregister
meta_range_t_swigregister(meta_range_t)

class tune_request_t(object):
    """Proxy of C++ uhd::tune_request_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double target_freq = 0) -> tune_request_t
        __init__(self, double target_freq, double lo_off) -> tune_request_t
        """
        this = _uhd_swig.new_tune_request_t(*args)
        try: self.this.append(this)
        except: self.this = this
    POLICY_NONE = _uhd_swig.tune_request_t_POLICY_NONE
    POLICY_AUTO = _uhd_swig.tune_request_t_POLICY_AUTO
    POLICY_MANUAL = _uhd_swig.tune_request_t_POLICY_MANUAL
    target_freq = _swig_property(_uhd_swig.tune_request_t_target_freq_get, _uhd_swig.tune_request_t_target_freq_set)
    rf_freq_policy = _swig_property(_uhd_swig.tune_request_t_rf_freq_policy_get, _uhd_swig.tune_request_t_rf_freq_policy_set)
    rf_freq = _swig_property(_uhd_swig.tune_request_t_rf_freq_get, _uhd_swig.tune_request_t_rf_freq_set)
    dsp_freq_policy = _swig_property(_uhd_swig.tune_request_t_dsp_freq_policy_get, _uhd_swig.tune_request_t_dsp_freq_policy_set)
    dsp_freq = _swig_property(_uhd_swig.tune_request_t_dsp_freq_get, _uhd_swig.tune_request_t_dsp_freq_set)
    __swig_destroy__ = _uhd_swig.delete_tune_request_t
    __del__ = lambda self : None;
tune_request_t_swigregister = _uhd_swig.tune_request_t_swigregister
tune_request_t_swigregister(tune_request_t)

class tune_result_t(object):
    """Proxy of C++ uhd::tune_result_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    target_rf_freq = _swig_property(_uhd_swig.tune_result_t_target_rf_freq_get, _uhd_swig.tune_result_t_target_rf_freq_set)
    actual_rf_freq = _swig_property(_uhd_swig.tune_result_t_actual_rf_freq_get, _uhd_swig.tune_result_t_actual_rf_freq_set)
    target_dsp_freq = _swig_property(_uhd_swig.tune_result_t_target_dsp_freq_get, _uhd_swig.tune_result_t_target_dsp_freq_set)
    actual_dsp_freq = _swig_property(_uhd_swig.tune_result_t_actual_dsp_freq_get, _uhd_swig.tune_result_t_actual_dsp_freq_set)
    def to_pp_string(self):
        """to_pp_string(self) -> string"""
        return _uhd_swig.tune_result_t_to_pp_string(self)

    def __init__(self): 
        """__init__(self) -> tune_result_t"""
        this = _uhd_swig.new_tune_result_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_tune_result_t
    __del__ = lambda self : None;
tune_result_t_swigregister = _uhd_swig.tune_result_t_swigregister
tune_result_t_swigregister(tune_result_t)

class time_spec_t(object):
    """Proxy of C++ uhd::time_spec_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def get_system_time():
        """get_system_time() -> time_spec_t"""
        return _uhd_swig.time_spec_t_get_system_time()

    get_system_time = staticmethod(get_system_time)
    def __init__(self, *args): 
        """
        __init__(self, double secs = 0) -> time_spec_t
        __init__(self, time_t full_secs, double frac_secs = 0) -> time_spec_t
        __init__(self, time_t full_secs, long tick_count, double tick_rate) -> time_spec_t
        """
        this = _uhd_swig.new_time_spec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def from_ticks(*args, **kwargs):
        """from_ticks(long long ticks, double tick_rate) -> time_spec_t"""
        return _uhd_swig.time_spec_t_from_ticks(*args, **kwargs)

    from_ticks = staticmethod(from_ticks)
    def get_tick_count(self, *args, **kwargs):
        """get_tick_count(self, double tick_rate) -> long"""
        return _uhd_swig.time_spec_t_get_tick_count(self, *args, **kwargs)

    def to_ticks(self, *args, **kwargs):
        """to_ticks(self, double tick_rate) -> long long"""
        return _uhd_swig.time_spec_t_to_ticks(self, *args, **kwargs)

    def get_real_secs(self):
        """get_real_secs(self) -> double"""
        return _uhd_swig.time_spec_t_get_real_secs(self)

    def get_full_secs(self):
        """get_full_secs(self) -> time_t"""
        return _uhd_swig.time_spec_t_get_full_secs(self)

    def get_frac_secs(self):
        """get_frac_secs(self) -> double"""
        return _uhd_swig.time_spec_t_get_frac_secs(self)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, time_spec_t arg0) -> time_spec_t"""
        return _uhd_swig.time_spec_t___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, time_spec_t arg0) -> time_spec_t"""
        return _uhd_swig.time_spec_t___isub__(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_time_spec_t
    __del__ = lambda self : None;
time_spec_t_swigregister = _uhd_swig.time_spec_t_swigregister
time_spec_t_swigregister(time_spec_t)

def time_spec_t_get_system_time():
  """time_spec_t_get_system_time() -> time_spec_t"""
  return _uhd_swig.time_spec_t_get_system_time()

def time_spec_t_from_ticks(*args, **kwargs):
  """time_spec_t_from_ticks(long long ticks, double tick_rate) -> time_spec_t"""
  return _uhd_swig.time_spec_t_from_ticks(*args, **kwargs)


def __eq__(*args, **kwargs):
  """__eq__(time_spec_t arg0, time_spec_t arg1) -> bool"""
  return _uhd_swig.__eq__(*args, **kwargs)

def __lt__(*args, **kwargs):
  """__lt__(time_spec_t arg0, time_spec_t arg1) -> bool"""
  return _uhd_swig.__lt__(*args, **kwargs)
class clock_config_t(object):
    """Proxy of C++ uhd::clock_config_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def external():
        """external() -> clock_config_t"""
        return _uhd_swig.clock_config_t_external()

    external = staticmethod(external)
    def internal():
        """internal() -> clock_config_t"""
        return _uhd_swig.clock_config_t_internal()

    internal = staticmethod(internal)
    REF_AUTO = _uhd_swig.clock_config_t_REF_AUTO
    REF_INT = _uhd_swig.clock_config_t_REF_INT
    REF_SMA = _uhd_swig.clock_config_t_REF_SMA
    REF_MIMO = _uhd_swig.clock_config_t_REF_MIMO
    ref_source = _swig_property(_uhd_swig.clock_config_t_ref_source_get, _uhd_swig.clock_config_t_ref_source_set)
    PPS_INT = _uhd_swig.clock_config_t_PPS_INT
    PPS_SMA = _uhd_swig.clock_config_t_PPS_SMA
    PPS_MIMO = _uhd_swig.clock_config_t_PPS_MIMO
    pps_source = _swig_property(_uhd_swig.clock_config_t_pps_source_get, _uhd_swig.clock_config_t_pps_source_set)
    PPS_NEG = _uhd_swig.clock_config_t_PPS_NEG
    PPS_POS = _uhd_swig.clock_config_t_PPS_POS
    pps_polarity = _swig_property(_uhd_swig.clock_config_t_pps_polarity_get, _uhd_swig.clock_config_t_pps_polarity_set)
    def __init__(self): 
        """__init__(self) -> clock_config_t"""
        this = _uhd_swig.new_clock_config_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_clock_config_t
    __del__ = lambda self : None;
clock_config_t_swigregister = _uhd_swig.clock_config_t_swigregister
clock_config_t_swigregister(clock_config_t)

def clock_config_t_external():
  """clock_config_t_external() -> clock_config_t"""
  return _uhd_swig.clock_config_t_external()

def clock_config_t_internal():
  """clock_config_t_internal() -> clock_config_t"""
  return _uhd_swig.clock_config_t_internal()

class rx_metadata_t(object):
    """Proxy of C++ uhd::rx_metadata_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    has_time_spec = _swig_property(_uhd_swig.rx_metadata_t_has_time_spec_get, _uhd_swig.rx_metadata_t_has_time_spec_set)
    time_spec = _swig_property(_uhd_swig.rx_metadata_t_time_spec_get, _uhd_swig.rx_metadata_t_time_spec_set)
    more_fragments = _swig_property(_uhd_swig.rx_metadata_t_more_fragments_get, _uhd_swig.rx_metadata_t_more_fragments_set)
    fragment_offset = _swig_property(_uhd_swig.rx_metadata_t_fragment_offset_get, _uhd_swig.rx_metadata_t_fragment_offset_set)
    start_of_burst = _swig_property(_uhd_swig.rx_metadata_t_start_of_burst_get, _uhd_swig.rx_metadata_t_start_of_burst_set)
    end_of_burst = _swig_property(_uhd_swig.rx_metadata_t_end_of_burst_get, _uhd_swig.rx_metadata_t_end_of_burst_set)
    ERROR_CODE_NONE = _uhd_swig.rx_metadata_t_ERROR_CODE_NONE
    ERROR_CODE_TIMEOUT = _uhd_swig.rx_metadata_t_ERROR_CODE_TIMEOUT
    ERROR_CODE_LATE_COMMAND = _uhd_swig.rx_metadata_t_ERROR_CODE_LATE_COMMAND
    ERROR_CODE_BROKEN_CHAIN = _uhd_swig.rx_metadata_t_ERROR_CODE_BROKEN_CHAIN
    ERROR_CODE_OVERFLOW = _uhd_swig.rx_metadata_t_ERROR_CODE_OVERFLOW
    ERROR_CODE_ALIGNMENT = _uhd_swig.rx_metadata_t_ERROR_CODE_ALIGNMENT
    ERROR_CODE_BAD_PACKET = _uhd_swig.rx_metadata_t_ERROR_CODE_BAD_PACKET
    error_code = _swig_property(_uhd_swig.rx_metadata_t_error_code_get, _uhd_swig.rx_metadata_t_error_code_set)
    def __init__(self): 
        """__init__(self) -> rx_metadata_t"""
        this = _uhd_swig.new_rx_metadata_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_rx_metadata_t
    __del__ = lambda self : None;
rx_metadata_t_swigregister = _uhd_swig.rx_metadata_t_swigregister
rx_metadata_t_swigregister(rx_metadata_t)

class tx_metadata_t(object):
    """Proxy of C++ uhd::tx_metadata_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    has_time_spec = _swig_property(_uhd_swig.tx_metadata_t_has_time_spec_get, _uhd_swig.tx_metadata_t_has_time_spec_set)
    time_spec = _swig_property(_uhd_swig.tx_metadata_t_time_spec_get, _uhd_swig.tx_metadata_t_time_spec_set)
    start_of_burst = _swig_property(_uhd_swig.tx_metadata_t_start_of_burst_get, _uhd_swig.tx_metadata_t_start_of_burst_set)
    end_of_burst = _swig_property(_uhd_swig.tx_metadata_t_end_of_burst_get, _uhd_swig.tx_metadata_t_end_of_burst_set)
    def __init__(self): 
        """__init__(self) -> tx_metadata_t"""
        this = _uhd_swig.new_tx_metadata_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_tx_metadata_t
    __del__ = lambda self : None;
tx_metadata_t_swigregister = _uhd_swig.tx_metadata_t_swigregister
tx_metadata_t_swigregister(tx_metadata_t)

class async_metadata_t(object):
    """Proxy of C++ uhd::async_metadata_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    channel = _swig_property(_uhd_swig.async_metadata_t_channel_get, _uhd_swig.async_metadata_t_channel_set)
    has_time_spec = _swig_property(_uhd_swig.async_metadata_t_has_time_spec_get, _uhd_swig.async_metadata_t_has_time_spec_set)
    time_spec = _swig_property(_uhd_swig.async_metadata_t_time_spec_get, _uhd_swig.async_metadata_t_time_spec_set)
    EVENT_CODE_BURST_ACK = _uhd_swig.async_metadata_t_EVENT_CODE_BURST_ACK
    EVENT_CODE_UNDERFLOW = _uhd_swig.async_metadata_t_EVENT_CODE_UNDERFLOW
    EVENT_CODE_SEQ_ERROR = _uhd_swig.async_metadata_t_EVENT_CODE_SEQ_ERROR
    EVENT_CODE_TIME_ERROR = _uhd_swig.async_metadata_t_EVENT_CODE_TIME_ERROR
    EVENT_CODE_UNDERFLOW_IN_PACKET = _uhd_swig.async_metadata_t_EVENT_CODE_UNDERFLOW_IN_PACKET
    EVENT_CODE_SEQ_ERROR_IN_BURST = _uhd_swig.async_metadata_t_EVENT_CODE_SEQ_ERROR_IN_BURST
    EVENT_CODE_USER_PAYLOAD = _uhd_swig.async_metadata_t_EVENT_CODE_USER_PAYLOAD
    event_code = _swig_property(_uhd_swig.async_metadata_t_event_code_get, _uhd_swig.async_metadata_t_event_code_set)
    user_payload = _swig_property(_uhd_swig.async_metadata_t_user_payload_get, _uhd_swig.async_metadata_t_user_payload_set)
    def __init__(self): 
        """__init__(self) -> async_metadata_t"""
        this = _uhd_swig.new_async_metadata_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_async_metadata_t
    __del__ = lambda self : None;
async_metadata_t_swigregister = _uhd_swig.async_metadata_t_swigregister
async_metadata_t_swigregister(async_metadata_t)

class device_addr_vector_t(object):
    """Proxy of C++ std::vector<(uhd::device_addr_t)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _uhd_swig.device_addr_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _uhd_swig.device_addr_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _uhd_swig.device_addr_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _uhd_swig.device_addr_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _uhd_swig.device_addr_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> device_addr_vector_t"""
        return _uhd_swig.device_addr_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, device_addr_vector_t v = std::vector< uhd::device_addr_t,std::allocator< uhd::device_addr_t > >())"""
        return _uhd_swig.device_addr_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _uhd_swig.device_addr_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _uhd_swig.device_addr_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> device_addr_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _uhd_swig.device_addr_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, device_addr_vector_t v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _uhd_swig.device_addr_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _uhd_swig.device_addr_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _uhd_swig.device_addr_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _uhd_swig.device_addr_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _uhd_swig.device_addr_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, device_addr_vector_t v)"""
        return _uhd_swig.device_addr_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _uhd_swig.device_addr_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _uhd_swig.device_addr_vector_t_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _uhd_swig.device_addr_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _uhd_swig.device_addr_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _uhd_swig.device_addr_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _uhd_swig.device_addr_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _uhd_swig.device_addr_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> device_addr_vector_t
        __init__(self, device_addr_vector_t arg0) -> device_addr_vector_t
        __init__(self, size_type size) -> device_addr_vector_t
        __init__(self, size_type size, value_type value) -> device_addr_vector_t
        """
        this = _uhd_swig.new_device_addr_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _uhd_swig.device_addr_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _uhd_swig.device_addr_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _uhd_swig.device_addr_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _uhd_swig.device_addr_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _uhd_swig.device_addr_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _uhd_swig.device_addr_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _uhd_swig.device_addr_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _uhd_swig.device_addr_vector_t_capacity(self)

    __swig_destroy__ = _uhd_swig.delete_device_addr_vector_t
    __del__ = lambda self : None;
device_addr_vector_t_swigregister = _uhd_swig.device_addr_vector_t_swigregister
device_addr_vector_t_swigregister(device_addr_vector_t)

class sensor_value_t(object):
    """Proxy of C++ uhd::sensor_value_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string name, bool value, string utrue, string ufalse) -> sensor_value_t
        __init__(self, string name, int value, string unit, string formatter = "%d") -> sensor_value_t
        __init__(self, string name, double value, string unit, string formatter = "%f") -> sensor_value_t
        __init__(self, string name, string value, string unit) -> sensor_value_t
        """
        this = _uhd_swig.new_sensor_value_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def to_bool(self):
        """to_bool(self) -> bool"""
        return _uhd_swig.sensor_value_t_to_bool(self)

    def to_int(self):
        """to_int(self) -> int"""
        return _uhd_swig.sensor_value_t_to_int(self)

    def to_real(self):
        """to_real(self) -> double"""
        return _uhd_swig.sensor_value_t_to_real(self)

    name = _swig_property(_uhd_swig.sensor_value_t_name_get)
    value = _swig_property(_uhd_swig.sensor_value_t_value_get)
    unit = _swig_property(_uhd_swig.sensor_value_t_unit_get)
    BOOLEAN = _uhd_swig.sensor_value_t_BOOLEAN
    INTEGER = _uhd_swig.sensor_value_t_INTEGER
    REALNUM = _uhd_swig.sensor_value_t_REALNUM
    STRING = _uhd_swig.sensor_value_t_STRING
    type = _swig_property(_uhd_swig.sensor_value_t_type_get)
    def to_pp_string(self):
        """to_pp_string(self) -> string"""
        return _uhd_swig.sensor_value_t_to_pp_string(self)

    __swig_destroy__ = _uhd_swig.delete_sensor_value_t
    __del__ = lambda self : None;
sensor_value_t_swigregister = _uhd_swig.sensor_value_t_swigregister
sensor_value_t_swigregister(sensor_value_t)

class i2c_iface(object):
    """Proxy of C++ uhd::i2c_iface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def write_i2c(self, *args, **kwargs):
        """write_i2c(self, boost::uint8_t addr, byte_vector_t buf)"""
        return _uhd_swig.i2c_iface_write_i2c(self, *args, **kwargs)

    def read_i2c(self, *args, **kwargs):
        """read_i2c(self, boost::uint8_t addr, size_t num_bytes) -> byte_vector_t"""
        return _uhd_swig.i2c_iface_read_i2c(self, *args, **kwargs)

    def write_eeprom(self, *args, **kwargs):
        """write_eeprom(self, boost::uint8_t addr, boost::uint8_t offset, byte_vector_t buf)"""
        return _uhd_swig.i2c_iface_write_eeprom(self, *args, **kwargs)

    def read_eeprom(self, *args, **kwargs):
        """read_eeprom(self, boost::uint8_t addr, boost::uint8_t offset, size_t num_bytes) -> byte_vector_t"""
        return _uhd_swig.i2c_iface_read_eeprom(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_i2c_iface
    __del__ = lambda self : None;
i2c_iface_swigregister = _uhd_swig.i2c_iface_swigregister
i2c_iface_swigregister(i2c_iface)

class spi_config_t(object):
    """Proxy of C++ uhd::spi_config_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    EDGE_RISE = _uhd_swig.spi_config_t_EDGE_RISE
    EDGE_FALL = _uhd_swig.spi_config_t_EDGE_FALL
    mosi_edge = _swig_property(_uhd_swig.spi_config_t_mosi_edge_get, _uhd_swig.spi_config_t_mosi_edge_set)
    miso_edge = _swig_property(_uhd_swig.spi_config_t_miso_edge_get, _uhd_swig.spi_config_t_miso_edge_set)
    def __init__(self, *args, **kwargs): 
        """__init__(self, edge_t edge = EDGE_RISE) -> spi_config_t"""
        this = _uhd_swig.new_spi_config_t(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_spi_config_t
    __del__ = lambda self : None;
spi_config_t_swigregister = _uhd_swig.spi_config_t_swigregister
spi_config_t_swigregister(spi_config_t)

class spi_iface(object):
    """Proxy of C++ uhd::spi_iface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def transact_spi(self, *args, **kwargs):
        """
        transact_spi(self, int which_slave, spi_config_t config, boost::uint32_t data, 
            size_t num_bits, bool readback) -> boost::uint32_t
        """
        return _uhd_swig.spi_iface_transact_spi(self, *args, **kwargs)

    def read_spi(self, *args, **kwargs):
        """
        read_spi(self, int which_slave, spi_config_t config, boost::uint32_t data, 
            size_t num_bits) -> boost::uint32_t
        """
        return _uhd_swig.spi_iface_read_spi(self, *args, **kwargs)

    def write_spi(self, *args, **kwargs):
        """
        write_spi(self, int which_slave, spi_config_t config, boost::uint32_t data, 
            size_t num_bits)
        """
        return _uhd_swig.spi_iface_write_spi(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_spi_iface
    __del__ = lambda self : None;
spi_iface_swigregister = _uhd_swig.spi_iface_swigregister
spi_iface_swigregister(spi_iface)

class uart_iface(object):
    """Proxy of C++ uhd::uart_iface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def write_uart(self, *args, **kwargs):
        """write_uart(self, string buf)"""
        return _uhd_swig.uart_iface_write_uart(self, *args, **kwargs)

    def read_uart(self, *args, **kwargs):
        """read_uart(self, double timeout) -> string"""
        return _uhd_swig.uart_iface_read_uart(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_uart_iface
    __del__ = lambda self : None;
uart_iface_swigregister = _uhd_swig.uart_iface_swigregister
uart_iface_swigregister(uart_iface)

class byte_vector_t(object):
    """Proxy of C++ std::vector<(uint8_t)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _uhd_swig.byte_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _uhd_swig.byte_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _uhd_swig.byte_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _uhd_swig.byte_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _uhd_swig.byte_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> __dummy_0__"""
        return _uhd_swig.byte_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, __dummy_0__ v = std::vector< unsigned char,std::allocator< unsigned char > >())"""
        return _uhd_swig.byte_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _uhd_swig.byte_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _uhd_swig.byte_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> __dummy_0__
        __getitem__(self, difference_type i) -> value_type
        """
        return _uhd_swig.byte_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, __dummy_0__ v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _uhd_swig.byte_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _uhd_swig.byte_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _uhd_swig.byte_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _uhd_swig.byte_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _uhd_swig.byte_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, byte_vector_t v)"""
        return _uhd_swig.byte_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _uhd_swig.byte_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _uhd_swig.byte_vector_t_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _uhd_swig.byte_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _uhd_swig.byte_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _uhd_swig.byte_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _uhd_swig.byte_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _uhd_swig.byte_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> byte_vector_t
        __init__(self, byte_vector_t arg0) -> byte_vector_t
        __init__(self, size_type size) -> byte_vector_t
        __init__(self, size_type size, value_type value) -> byte_vector_t
        """
        this = _uhd_swig.new_byte_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _uhd_swig.byte_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _uhd_swig.byte_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _uhd_swig.byte_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _uhd_swig.byte_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _uhd_swig.byte_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _uhd_swig.byte_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _uhd_swig.byte_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _uhd_swig.byte_vector_t_capacity(self)

    __swig_destroy__ = _uhd_swig.delete_byte_vector_t
    __del__ = lambda self : None;
byte_vector_t_swigregister = _uhd_swig.byte_vector_t_swigregister
byte_vector_t_swigregister(byte_vector_t)

class dboard_iface_special_props_t(object):
    """Proxy of C++ uhd::usrp::dboard_iface_special_props_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    soft_clock_divider = _swig_property(_uhd_swig.dboard_iface_special_props_t_soft_clock_divider_get, _uhd_swig.dboard_iface_special_props_t_soft_clock_divider_set)
    mangle_i2c_addrs = _swig_property(_uhd_swig.dboard_iface_special_props_t_mangle_i2c_addrs_get, _uhd_swig.dboard_iface_special_props_t_mangle_i2c_addrs_set)
    def __init__(self): 
        """__init__(self) -> dboard_iface_special_props_t"""
        this = _uhd_swig.new_dboard_iface_special_props_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uhd_swig.delete_dboard_iface_special_props_t
    __del__ = lambda self : None;
dboard_iface_special_props_t_swigregister = _uhd_swig.dboard_iface_special_props_t_swigregister
dboard_iface_special_props_t_swigregister(dboard_iface_special_props_t)

class dboard_iface(i2c_iface):
    """Proxy of C++ uhd::usrp::dboard_iface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UNIT_RX = _uhd_swig.dboard_iface_UNIT_RX
    UNIT_TX = _uhd_swig.dboard_iface_UNIT_TX
    ATR_REG_IDLE = _uhd_swig.dboard_iface_ATR_REG_IDLE
    ATR_REG_TX_ONLY = _uhd_swig.dboard_iface_ATR_REG_TX_ONLY
    ATR_REG_RX_ONLY = _uhd_swig.dboard_iface_ATR_REG_RX_ONLY
    ATR_REG_FULL_DUPLEX = _uhd_swig.dboard_iface_ATR_REG_FULL_DUPLEX
    AUX_DAC_A = _uhd_swig.dboard_iface_AUX_DAC_A
    AUX_DAC_B = _uhd_swig.dboard_iface_AUX_DAC_B
    AUX_DAC_C = _uhd_swig.dboard_iface_AUX_DAC_C
    AUX_DAC_D = _uhd_swig.dboard_iface_AUX_DAC_D
    AUX_ADC_A = _uhd_swig.dboard_iface_AUX_ADC_A
    AUX_ADC_B = _uhd_swig.dboard_iface_AUX_ADC_B
    def get_special_props(self):
        """get_special_props(self) -> special_props_t"""
        return _uhd_swig.dboard_iface_get_special_props(self)

    def write_aux_dac(self, *args, **kwargs):
        """write_aux_dac(self, unit_t unit, aux_dac_t which_dac, double value)"""
        return _uhd_swig.dboard_iface_write_aux_dac(self, *args, **kwargs)

    def read_aux_adc(self, *args, **kwargs):
        """read_aux_adc(self, unit_t unit, aux_adc_t which_adc) -> double"""
        return _uhd_swig.dboard_iface_read_aux_adc(self, *args, **kwargs)

    def set_pin_ctrl(self, *args, **kwargs):
        """set_pin_ctrl(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_set_pin_ctrl(self, *args, **kwargs)

    def get_pin_ctrl(self, *args, **kwargs):
        """get_pin_ctrl(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_get_pin_ctrl(self, *args, **kwargs)

    def set_atr_reg(self, *args, **kwargs):
        """
        set_atr_reg(self, unit_t unit, atr_reg_t reg, boost::uint16_t value, 
            boost::uint16_t mask = 0xffff)
        """
        return _uhd_swig.dboard_iface_set_atr_reg(self, *args, **kwargs)

    def get_atr_reg(self, *args, **kwargs):
        """get_atr_reg(self, unit_t unit, atr_reg_t reg) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_get_atr_reg(self, *args, **kwargs)

    def set_gpio_ddr(self, *args, **kwargs):
        """set_gpio_ddr(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_set_gpio_ddr(self, *args, **kwargs)

    def get_gpio_ddr(self, *args, **kwargs):
        """get_gpio_ddr(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_get_gpio_ddr(self, *args, **kwargs)

    def set_gpio_out(self, *args, **kwargs):
        """set_gpio_out(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_set_gpio_out(self, *args, **kwargs)

    def get_gpio_out(self, *args, **kwargs):
        """get_gpio_out(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_get_gpio_out(self, *args, **kwargs)

    def set_gpio_debug(self, *args, **kwargs):
        """set_gpio_debug(self, unit_t unit, int which)"""
        return _uhd_swig.dboard_iface_set_gpio_debug(self, *args, **kwargs)

    def read_gpio(self, *args, **kwargs):
        """read_gpio(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_read_gpio(self, *args, **kwargs)

    def write_spi(self, *args, **kwargs):
        """
        write_spi(self, unit_t unit, spi_config_t config, boost::uint32_t data, 
            size_t num_bits)
        """
        return _uhd_swig.dboard_iface_write_spi(self, *args, **kwargs)

    def read_write_spi(self, *args, **kwargs):
        """
        read_write_spi(self, unit_t unit, spi_config_t config, boost::uint32_t data, 
            size_t num_bits) -> boost::uint32_t
        """
        return _uhd_swig.dboard_iface_read_write_spi(self, *args, **kwargs)

    def set_clock_rate(self, *args, **kwargs):
        """set_clock_rate(self, unit_t unit, double rate)"""
        return _uhd_swig.dboard_iface_set_clock_rate(self, *args, **kwargs)

    def get_clock_rate(self, *args, **kwargs):
        """get_clock_rate(self, unit_t unit) -> double"""
        return _uhd_swig.dboard_iface_get_clock_rate(self, *args, **kwargs)

    def get_clock_rates(self, *args, **kwargs):
        """get_clock_rates(self, unit_t unit) -> __dummy_5__"""
        return _uhd_swig.dboard_iface_get_clock_rates(self, *args, **kwargs)

    def set_clock_enabled(self, *args, **kwargs):
        """set_clock_enabled(self, unit_t unit, bool enb)"""
        return _uhd_swig.dboard_iface_set_clock_enabled(self, *args, **kwargs)

    def get_codec_rate(self, *args, **kwargs):
        """get_codec_rate(self, unit_t unit) -> double"""
        return _uhd_swig.dboard_iface_get_codec_rate(self, *args, **kwargs)

    __swig_destroy__ = _uhd_swig.delete_dboard_iface
    __del__ = lambda self : None;
dboard_iface_swigregister = _uhd_swig.dboard_iface_swigregister
dboard_iface_swigregister(dboard_iface)

class dboard_iface_sptr(object):
    """Proxy of C++ boost::shared_ptr<(uhd::usrp::dboard_iface)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> dboard_iface_sptr
        __init__(self, dboard_iface p) -> dboard_iface_sptr
        """
        this = _uhd_swig.new_dboard_iface_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> dboard_iface"""
        return _uhd_swig.dboard_iface_sptr___deref__(self)

    __swig_destroy__ = _uhd_swig.delete_dboard_iface_sptr
    __del__ = lambda self : None;
    def get_special_props(self):
        """get_special_props(self) -> special_props_t"""
        return _uhd_swig.dboard_iface_sptr_get_special_props(self)

    def write_aux_dac(self, *args, **kwargs):
        """write_aux_dac(self, unit_t unit, aux_dac_t which_dac, double value)"""
        return _uhd_swig.dboard_iface_sptr_write_aux_dac(self, *args, **kwargs)

    def read_aux_adc(self, *args, **kwargs):
        """read_aux_adc(self, unit_t unit, aux_adc_t which_adc) -> double"""
        return _uhd_swig.dboard_iface_sptr_read_aux_adc(self, *args, **kwargs)

    def set_pin_ctrl(self, *args, **kwargs):
        """set_pin_ctrl(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_sptr_set_pin_ctrl(self, *args, **kwargs)

    def get_pin_ctrl(self, *args, **kwargs):
        """get_pin_ctrl(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_sptr_get_pin_ctrl(self, *args, **kwargs)

    def set_atr_reg(self, *args, **kwargs):
        """
        set_atr_reg(self, unit_t unit, atr_reg_t reg, boost::uint16_t value, 
            boost::uint16_t mask = 0xffff)
        """
        return _uhd_swig.dboard_iface_sptr_set_atr_reg(self, *args, **kwargs)

    def get_atr_reg(self, *args, **kwargs):
        """get_atr_reg(self, unit_t unit, atr_reg_t reg) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_sptr_get_atr_reg(self, *args, **kwargs)

    def set_gpio_ddr(self, *args, **kwargs):
        """set_gpio_ddr(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_sptr_set_gpio_ddr(self, *args, **kwargs)

    def get_gpio_ddr(self, *args, **kwargs):
        """get_gpio_ddr(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_sptr_get_gpio_ddr(self, *args, **kwargs)

    def set_gpio_out(self, *args, **kwargs):
        """set_gpio_out(self, unit_t unit, boost::uint16_t value, boost::uint16_t mask = 0xffff)"""
        return _uhd_swig.dboard_iface_sptr_set_gpio_out(self, *args, **kwargs)

    def get_gpio_out(self, *args, **kwargs):
        """get_gpio_out(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_sptr_get_gpio_out(self, *args, **kwargs)

    def set_gpio_debug(self, *args, **kwargs):
        """set_gpio_debug(self, unit_t unit, int which)"""
        return _uhd_swig.dboard_iface_sptr_set_gpio_debug(self, *args, **kwargs)

    def read_gpio(self, *args, **kwargs):
        """read_gpio(self, unit_t unit) -> boost::uint16_t"""
        return _uhd_swig.dboard_iface_sptr_read_gpio(self, *args, **kwargs)

    def write_spi(self, *args, **kwargs):
        """
        write_spi(self, unit_t unit, spi_config_t config, boost::uint32_t data, 
            size_t num_bits)
        """
        return _uhd_swig.dboard_iface_sptr_write_spi(self, *args, **kwargs)

    def read_write_spi(self, *args, **kwargs):
        """
        read_write_spi(self, unit_t unit, spi_config_t config, boost::uint32_t data, 
            size_t num_bits) -> boost::uint32_t
        """
        return _uhd_swig.dboard_iface_sptr_read_write_spi(self, *args, **kwargs)

    def set_clock_rate(self, *args, **kwargs):
        """set_clock_rate(self, unit_t unit, double rate)"""
        return _uhd_swig.dboard_iface_sptr_set_clock_rate(self, *args, **kwargs)

    def get_clock_rate(self, *args, **kwargs):
        """get_clock_rate(self, unit_t unit) -> double"""
        return _uhd_swig.dboard_iface_sptr_get_clock_rate(self, *args, **kwargs)

    def get_clock_rates(self, *args, **kwargs):
        """get_clock_rates(self, unit_t unit) -> __dummy_5__"""
        return _uhd_swig.dboard_iface_sptr_get_clock_rates(self, *args, **kwargs)

    def set_clock_enabled(self, *args, **kwargs):
        """set_clock_enabled(self, unit_t unit, bool enb)"""
        return _uhd_swig.dboard_iface_sptr_set_clock_enabled(self, *args, **kwargs)

    def get_codec_rate(self, *args, **kwargs):
        """get_codec_rate(self, unit_t unit) -> double"""
        return _uhd_swig.dboard_iface_sptr_get_codec_rate(self, *args, **kwargs)

    def write_i2c(self, *args, **kwargs):
        """write_i2c(self, boost::uint8_t addr, byte_vector_t buf)"""
        return _uhd_swig.dboard_iface_sptr_write_i2c(self, *args, **kwargs)

    def read_i2c(self, *args, **kwargs):
        """read_i2c(self, boost::uint8_t addr, size_t num_bytes) -> byte_vector_t"""
        return _uhd_swig.dboard_iface_sptr_read_i2c(self, *args, **kwargs)

    def write_eeprom(self, *args, **kwargs):
        """write_eeprom(self, boost::uint8_t addr, boost::uint8_t offset, byte_vector_t buf)"""
        return _uhd_swig.dboard_iface_sptr_write_eeprom(self, *args, **kwargs)

    def read_eeprom(self, *args, **kwargs):
        """read_eeprom(self, boost::uint8_t addr, boost::uint8_t offset, size_t num_bytes) -> byte_vector_t"""
        return _uhd_swig.dboard_iface_sptr_read_eeprom(self, *args, **kwargs)

dboard_iface_sptr_swigregister = _uhd_swig.dboard_iface_sptr_swigregister
dboard_iface_sptr_swigregister(dboard_iface_sptr)

class uhd_usrp_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(uhd_usrp_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> uhd_usrp_source_sptr
        __init__(self,  p) -> uhd_usrp_source_sptr
        """
        this = _uhd_swig.new_uhd_usrp_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _uhd_swig.uhd_usrp_source_sptr___deref__(self)

    __swig_destroy__ = _uhd_swig.delete_uhd_usrp_source_sptr
    __del__ = lambda self : None;
    def set_start_time(self, *args, **kwargs):
        """set_start_time(self, time_spec_t time)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_start_time(self, *args, **kwargs)

    def get_usrp_info(self, chan = 0):
        """get_usrp_info(self, size_t chan = 0) -> string_string_dict_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_usrp_info(self, chan)

    def set_subdev_spec(self, *args, **kwargs):
        """set_subdev_spec(self, string spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_subdev_spec(self, *args, **kwargs)

    def get_subdev_spec(self, mboard = 0):
        """get_subdev_spec(self, size_t mboard = 0) -> string"""
        return _uhd_swig.uhd_usrp_source_sptr_get_subdev_spec(self, mboard)

    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(self, double rate)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_samp_rate(self, *args, **kwargs)

    def get_samp_rate(self):
        """get_samp_rate(self) -> double"""
        return _uhd_swig.uhd_usrp_source_sptr_get_samp_rate(self)

    def get_samp_rates(self):
        """get_samp_rates(self) -> meta_range_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_samp_rates(self)

    def set_center_freq(self, *args):
        """
        set_center_freq(self, tune_request_t tune_request, size_t chan = 0) -> tune_result_t
        set_center_freq(self, double freq, size_t chan = 0) -> tune_result_t
        """
        return _uhd_swig.uhd_usrp_source_sptr_set_center_freq(self, *args)

    def get_center_freq(self, chan = 0):
        """get_center_freq(self, size_t chan = 0) -> double"""
        return _uhd_swig.uhd_usrp_source_sptr_get_center_freq(self, chan)

    def get_freq_range(self, chan = 0):
        """get_freq_range(self, size_t chan = 0) -> freq_range_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_freq_range(self, chan)

    def set_gain(self, *args):
        """
        set_gain(self, double gain, size_t chan = 0)
        set_gain(self, double gain, string name, size_t chan = 0)
        """
        return _uhd_swig.uhd_usrp_source_sptr_set_gain(self, *args)

    def get_gain(self, *args):
        """
        get_gain(self, size_t chan = 0) -> double
        get_gain(self, string name, size_t chan = 0) -> double
        """
        return _uhd_swig.uhd_usrp_source_sptr_get_gain(self, *args)

    def get_gain_names(self, chan = 0):
        """get_gain_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_gain_names(self, chan)

    def get_gain_range(self, *args):
        """
        get_gain_range(self, size_t chan = 0) -> gain_range_t
        get_gain_range(self, string name, size_t chan = 0) -> gain_range_t
        """
        return _uhd_swig.uhd_usrp_source_sptr_get_gain_range(self, *args)

    def set_antenna(self, *args, **kwargs):
        """set_antenna(self, string ant, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_antenna(self, *args, **kwargs)

    def get_antenna(self, chan = 0):
        """get_antenna(self, size_t chan = 0) -> string"""
        return _uhd_swig.uhd_usrp_source_sptr_get_antenna(self, chan)

    def get_antennas(self, chan = 0):
        """get_antennas(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_antennas(self, chan)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(self, double bandwidth, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_bandwidth(self, *args, **kwargs)

    def set_auto_dc_offset(self, *args, **kwargs):
        """set_auto_dc_offset(self, bool enb, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_auto_dc_offset(self, *args, **kwargs)

    def set_dc_offset(self, *args, **kwargs):
        """set_dc_offset(self, std::complex<(double)> offset, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_dc_offset(self, *args, **kwargs)

    def set_iq_balance(self, *args, **kwargs):
        """set_iq_balance(self, std::complex<(double)> correction, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_iq_balance(self, *args, **kwargs)

    def get_sensor(self, *args, **kwargs):
        """get_sensor(self, string name, size_t chan = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_sensor(self, *args, **kwargs)

    def get_sensor_names(self, chan = 0):
        """get_sensor_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_sensor_names(self, chan)

    def get_dboard_sensor(self, *args, **kwargs):
        """get_dboard_sensor(self, string name, size_t chan = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_dboard_sensor(self, *args, **kwargs)

    def get_dboard_sensor_names(self, chan = 0):
        """get_dboard_sensor_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_dboard_sensor_names(self, chan)

    def get_mboard_sensor(self, *args, **kwargs):
        """get_mboard_sensor(self, string name, size_t mboard = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_mboard_sensor(self, *args, **kwargs)

    def get_mboard_sensor_names(self, mboard = 0):
        """get_mboard_sensor_names(self, size_t mboard = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_mboard_sensor_names(self, mboard)

    def set_clock_config(self, *args, **kwargs):
        """set_clock_config(self, clock_config_t clock_config, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_clock_config(self, *args, **kwargs)

    def set_time_source(self, *args, **kwargs):
        """set_time_source(self, string source, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_time_source(self, *args, **kwargs)

    def get_time_source(self, *args, **kwargs):
        """get_time_source(self, size_t mboard) -> string"""
        return _uhd_swig.uhd_usrp_source_sptr_get_time_source(self, *args, **kwargs)

    def get_time_sources(self, *args, **kwargs):
        """get_time_sources(self, size_t mboard) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_time_sources(self, *args, **kwargs)

    def set_clock_source(self, *args, **kwargs):
        """set_clock_source(self, string source, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_clock_source(self, *args, **kwargs)

    def get_clock_source(self, *args, **kwargs):
        """get_clock_source(self, size_t mboard) -> string"""
        return _uhd_swig.uhd_usrp_source_sptr_get_clock_source(self, *args, **kwargs)

    def get_clock_sources(self, *args, **kwargs):
        """get_clock_sources(self, size_t mboard) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_clock_sources(self, *args, **kwargs)

    def get_clock_rate(self, mboard = 0):
        """get_clock_rate(self, size_t mboard = 0) -> double"""
        return _uhd_swig.uhd_usrp_source_sptr_get_clock_rate(self, mboard)

    def set_clock_rate(self, *args, **kwargs):
        """set_clock_rate(self, double rate, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_clock_rate(self, *args, **kwargs)

    def get_time_now(self, mboard = 0):
        """get_time_now(self, size_t mboard = 0) -> time_spec_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_time_now(self, mboard)

    def get_time_last_pps(self, mboard = 0):
        """get_time_last_pps(self, size_t mboard = 0) -> time_spec_t"""
        return _uhd_swig.uhd_usrp_source_sptr_get_time_last_pps(self, mboard)

    def set_time_now(self, *args, **kwargs):
        """set_time_now(self, time_spec_t time_spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_time_now(self, *args, **kwargs)

    def set_time_next_pps(self, *args, **kwargs):
        """set_time_next_pps(self, time_spec_t time_spec)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_time_next_pps(self, *args, **kwargs)

    def set_time_unknown_pps(self, *args, **kwargs):
        """set_time_unknown_pps(self, time_spec_t time_spec)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_time_unknown_pps(self, *args, **kwargs)

    def set_command_time(self, *args, **kwargs):
        """set_command_time(self, time_spec_t time_spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_command_time(self, *args, **kwargs)

    def clear_command_time(self, mboard = 0):
        """clear_command_time(self, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_clear_command_time(self, mboard)

    def get_dboard_iface(self, chan = 0):
        """get_dboard_iface(self, size_t chan = 0) -> sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_get_dboard_iface(self, chan)

    def get_device(self):
        """get_device(self) -> uhd::usrp::multi_usrp::sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_get_device(self)

    def set_user_register(self, *args, **kwargs):
        """set_user_register(self, uint8_t addr, uint32_t data, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_user_register(self, *args, **kwargs)

    def finite_acquisition(self, *args, **kwargs):
        """finite_acquisition(self, size_t nsamps) -> __dummy_6__"""
        return _uhd_swig.uhd_usrp_source_sptr_finite_acquisition(self, *args, **kwargs)

    def finite_acquisition_v(self, *args, **kwargs):
        """finite_acquisition_v(self, size_t nsamps) -> __dummy_13__"""
        return _uhd_swig.uhd_usrp_source_sptr_finite_acquisition_v(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _uhd_swig.uhd_usrp_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _uhd_swig.uhd_usrp_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _uhd_swig.uhd_usrp_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _uhd_swig.uhd_usrp_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _uhd_swig.uhd_usrp_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _uhd_swig.uhd_usrp_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _uhd_swig.uhd_usrp_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _uhd_swig.uhd_usrp_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _uhd_swig.uhd_usrp_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _uhd_swig.uhd_usrp_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _uhd_swig.uhd_usrp_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _uhd_swig.uhd_usrp_source_sptr_check_topology(self, *args, **kwargs)

uhd_usrp_source_sptr_swigregister = _uhd_swig.uhd_usrp_source_sptr_swigregister
uhd_usrp_source_sptr_swigregister(uhd_usrp_source_sptr)

uhd_usrp_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class stream_args_t(object):
    """Proxy of C++ uhd::stream_args_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, cpu = "", otw = ""): 
        """__init__(self, string cpu = "", string otw = "") -> stream_args_t"""
        this = _uhd_swig.new_stream_args_t(cpu, otw)
        try: self.this.append(this)
        except: self.this = this
    cpu_format = _swig_property(_uhd_swig.stream_args_t_cpu_format_get, _uhd_swig.stream_args_t_cpu_format_set)
    otw_format = _swig_property(_uhd_swig.stream_args_t_otw_format_get, _uhd_swig.stream_args_t_otw_format_set)
    args = _swig_property(_uhd_swig.stream_args_t_args_get, _uhd_swig.stream_args_t_args_set)
    channels = _swig_property(_uhd_swig.stream_args_t_channels_get, _uhd_swig.stream_args_t_channels_set)
    __swig_destroy__ = _uhd_swig.delete_stream_args_t
    __del__ = lambda self : None;
stream_args_t_swigregister = _uhd_swig.stream_args_t_swigregister
stream_args_t_swigregister(stream_args_t)

class uhd_usrp_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(uhd_usrp_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> uhd_usrp_sink_sptr
        __init__(self,  p) -> uhd_usrp_sink_sptr
        """
        this = _uhd_swig.new_uhd_usrp_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _uhd_swig.uhd_usrp_sink_sptr___deref__(self)

    __swig_destroy__ = _uhd_swig.delete_uhd_usrp_sink_sptr
    __del__ = lambda self : None;
    def set_start_time(self, *args, **kwargs):
        """set_start_time(self, time_spec_t time)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_start_time(self, *args, **kwargs)

    def get_usrp_info(self, chan = 0):
        """get_usrp_info(self, size_t chan = 0) -> string_string_dict_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_usrp_info(self, chan)

    def set_subdev_spec(self, *args, **kwargs):
        """set_subdev_spec(self, string spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_subdev_spec(self, *args, **kwargs)

    def get_subdev_spec(self, mboard = 0):
        """get_subdev_spec(self, size_t mboard = 0) -> string"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_subdev_spec(self, mboard)

    def set_samp_rate(self, *args, **kwargs):
        """set_samp_rate(self, double rate)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_samp_rate(self, *args, **kwargs)

    def get_samp_rate(self):
        """get_samp_rate(self) -> double"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_samp_rate(self)

    def get_samp_rates(self):
        """get_samp_rates(self) -> meta_range_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_samp_rates(self)

    def set_center_freq(self, *args):
        """
        set_center_freq(self, tune_request_t tune_request, size_t chan = 0) -> tune_result_t
        set_center_freq(self, double freq, size_t chan = 0) -> tune_result_t
        """
        return _uhd_swig.uhd_usrp_sink_sptr_set_center_freq(self, *args)

    def get_center_freq(self, chan = 0):
        """get_center_freq(self, size_t chan = 0) -> double"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_center_freq(self, chan)

    def get_freq_range(self, chan = 0):
        """get_freq_range(self, size_t chan = 0) -> freq_range_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_freq_range(self, chan)

    def set_gain(self, *args):
        """
        set_gain(self, double gain, size_t chan = 0)
        set_gain(self, double gain, string name, size_t chan = 0)
        """
        return _uhd_swig.uhd_usrp_sink_sptr_set_gain(self, *args)

    def get_gain(self, *args):
        """
        get_gain(self, size_t chan = 0) -> double
        get_gain(self, string name, size_t chan = 0) -> double
        """
        return _uhd_swig.uhd_usrp_sink_sptr_get_gain(self, *args)

    def get_gain_names(self, chan = 0):
        """get_gain_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_gain_names(self, chan)

    def get_gain_range(self, *args):
        """
        get_gain_range(self, size_t chan = 0) -> gain_range_t
        get_gain_range(self, string name, size_t chan = 0) -> gain_range_t
        """
        return _uhd_swig.uhd_usrp_sink_sptr_get_gain_range(self, *args)

    def set_antenna(self, *args, **kwargs):
        """set_antenna(self, string ant, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_antenna(self, *args, **kwargs)

    def get_antenna(self, chan = 0):
        """get_antenna(self, size_t chan = 0) -> string"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_antenna(self, chan)

    def get_antennas(self, chan = 0):
        """get_antennas(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_antennas(self, chan)

    def set_bandwidth(self, *args, **kwargs):
        """set_bandwidth(self, double bandwidth, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_bandwidth(self, *args, **kwargs)

    def set_dc_offset(self, *args, **kwargs):
        """set_dc_offset(self, std::complex<(double)> offset, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_dc_offset(self, *args, **kwargs)

    def set_iq_balance(self, *args, **kwargs):
        """set_iq_balance(self, std::complex<(double)> correction, size_t chan = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_iq_balance(self, *args, **kwargs)

    def get_sensor(self, *args, **kwargs):
        """get_sensor(self, string name, size_t chan = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_sensor(self, *args, **kwargs)

    def get_sensor_names(self, chan = 0):
        """get_sensor_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_sensor_names(self, chan)

    def get_dboard_sensor(self, *args, **kwargs):
        """get_dboard_sensor(self, string name, size_t chan = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_dboard_sensor(self, *args, **kwargs)

    def get_dboard_sensor_names(self, chan = 0):
        """get_dboard_sensor_names(self, size_t chan = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_dboard_sensor_names(self, chan)

    def get_mboard_sensor(self, *args, **kwargs):
        """get_mboard_sensor(self, string name, size_t mboard = 0) -> sensor_value_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_mboard_sensor(self, *args, **kwargs)

    def get_mboard_sensor_names(self, mboard = 0):
        """get_mboard_sensor_names(self, size_t mboard = 0) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_mboard_sensor_names(self, mboard)

    def set_clock_config(self, *args, **kwargs):
        """set_clock_config(self, clock_config_t clock_config, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_clock_config(self, *args, **kwargs)

    def set_time_source(self, *args, **kwargs):
        """set_time_source(self, string source, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_time_source(self, *args, **kwargs)

    def get_time_source(self, *args, **kwargs):
        """get_time_source(self, size_t mboard) -> string"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_time_source(self, *args, **kwargs)

    def get_time_sources(self, *args, **kwargs):
        """get_time_sources(self, size_t mboard) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_time_sources(self, *args, **kwargs)

    def set_clock_source(self, *args, **kwargs):
        """set_clock_source(self, string source, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_clock_source(self, *args, **kwargs)

    def get_clock_source(self, *args, **kwargs):
        """get_clock_source(self, size_t mboard) -> string"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_clock_source(self, *args, **kwargs)

    def get_clock_sources(self, *args, **kwargs):
        """get_clock_sources(self, size_t mboard) -> string_vector_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_clock_sources(self, *args, **kwargs)

    def get_clock_rate(self, mboard = 0):
        """get_clock_rate(self, size_t mboard = 0) -> double"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_clock_rate(self, mboard)

    def set_clock_rate(self, *args, **kwargs):
        """set_clock_rate(self, double rate, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_clock_rate(self, *args, **kwargs)

    def get_time_now(self, mboard = 0):
        """get_time_now(self, size_t mboard = 0) -> time_spec_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_time_now(self, mboard)

    def get_time_last_pps(self, mboard = 0):
        """get_time_last_pps(self, size_t mboard = 0) -> time_spec_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_time_last_pps(self, mboard)

    def set_time_now(self, *args, **kwargs):
        """set_time_now(self, time_spec_t time_spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_time_now(self, *args, **kwargs)

    def set_time_next_pps(self, *args, **kwargs):
        """set_time_next_pps(self, time_spec_t time_spec)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_time_next_pps(self, *args, **kwargs)

    def set_time_unknown_pps(self, *args, **kwargs):
        """set_time_unknown_pps(self, time_spec_t time_spec)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_time_unknown_pps(self, *args, **kwargs)

    def set_command_time(self, *args, **kwargs):
        """set_command_time(self, time_spec_t time_spec, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_command_time(self, *args, **kwargs)

    def clear_command_time(self, mboard = 0):
        """clear_command_time(self, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_clear_command_time(self, mboard)

    def get_dboard_iface(self, chan = 0):
        """get_dboard_iface(self, size_t chan = 0) -> sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_dboard_iface(self, chan)

    def get_device(self):
        """get_device(self) -> uhd::usrp::multi_usrp::sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_get_device(self)

    def set_user_register(self, *args, **kwargs):
        """set_user_register(self, uint8_t addr, uint32_t data, size_t mboard = 0)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_user_register(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _uhd_swig.uhd_usrp_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _uhd_swig.uhd_usrp_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _uhd_swig.uhd_usrp_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _uhd_swig.uhd_usrp_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _uhd_swig.uhd_usrp_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _uhd_swig.uhd_usrp_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _uhd_swig.uhd_usrp_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _uhd_swig.uhd_usrp_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _uhd_swig.uhd_usrp_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _uhd_swig.uhd_usrp_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _uhd_swig.uhd_usrp_sink_sptr_check_topology(self, *args, **kwargs)

uhd_usrp_sink_sptr_swigregister = _uhd_swig.uhd_usrp_sink_sptr_swigregister
uhd_usrp_sink_sptr_swigregister(uhd_usrp_sink_sptr)

def usrp_source(*args):
  """
    usrp_source(device_addr_t device_addr, io_type_t io_type, size_t num_channels) -> uhd_usrp_source_sptr
    usrp_source(device_addr_t device_addr, stream_args_t stream_args) -> uhd_usrp_source_sptr
    """
  return _uhd_swig.usrp_source(*args)

uhd_usrp_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class uhd_amsg_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(uhd_amsg_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> uhd_amsg_source_sptr
        __init__(self,  p) -> uhd_amsg_source_sptr
        """
        this = _uhd_swig.new_uhd_amsg_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _uhd_swig.uhd_amsg_source_sptr___deref__(self)

    __swig_destroy__ = _uhd_swig.delete_uhd_amsg_source_sptr
    __del__ = lambda self : None;
    def msg_to_async_metadata_t(self, *args, **kwargs):
        """msg_to_async_metadata_t(self, gr_message_sptr msg) -> async_metadata_t"""
        return _uhd_swig.uhd_amsg_source_sptr_msg_to_async_metadata_t(self, *args, **kwargs)

uhd_amsg_source_sptr_swigregister = _uhd_swig.uhd_amsg_source_sptr_swigregister
uhd_amsg_source_sptr_swigregister(uhd_amsg_source_sptr)

def usrp_sink(*args):
  """
    usrp_sink(device_addr_t device_addr, io_type_t io_type, size_t num_channels) -> uhd_usrp_sink_sptr
    usrp_sink(device_addr_t device_addr, stream_args_t stream_args) -> uhd_usrp_sink_sptr
    """
  return _uhd_swig.usrp_sink(*args)

uhd_amsg_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def amsg_source(*args, **kwargs):
  """amsg_source(device_addr_t device_addr, gr_msg_queue_sptr msgq) -> uhd_amsg_source_sptr"""
  return _uhd_swig.amsg_source(*args, **kwargs)

def find_devices_raw(*args, **kwargs):
  """find_devices_raw(device_addr_t dev_addr = uhd::device_addr_t()) -> device_addrs_t"""
  return _uhd_swig.find_devices_raw(*args, **kwargs)

def get_version_string():
  """get_version_string() -> string"""
  return _uhd_swig.get_version_string()

cvar = _uhd_swig.cvar
ALL_MBOARDS = cvar.ALL_MBOARDS

