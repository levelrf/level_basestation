# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gnuradio_core_io', [dirname(__file__)])
        except ImportError:
            import _gnuradio_core_io
            return _gnuradio_core_io
        if fp is not None:
            try:
                _mod = imp.load_module('_gnuradio_core_io', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gnuradio_core_io = swig_import_helper()
    del swig_import_helper
else:
    import _gnuradio_core_io
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_io.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _gnuradio_core_io.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _gnuradio_core_io.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_io.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _gnuradio_core_io.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _gnuradio_core_io.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _gnuradio_core_io.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_io.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_io.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_io.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gnuradio_core_io.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gnuradio_core_io.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class gr_file_sink_base(object):
    """Proxy of C++ gr_file_sink_base class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_io.delete_gr_file_sink_base
    __del__ = lambda self : None;
    def open(self, *args, **kwargs):
        """open(self, char filename) -> bool"""
        return _gnuradio_core_io.gr_file_sink_base_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _gnuradio_core_io.gr_file_sink_base_close(self)

    def do_update(self):
        """do_update(self)"""
        return _gnuradio_core_io.gr_file_sink_base_do_update(self)

    def set_unbuffered(self, *args, **kwargs):
        """set_unbuffered(self, bool unbuffered)"""
        return _gnuradio_core_io.gr_file_sink_base_set_unbuffered(self, *args, **kwargs)

gr_file_sink_base_swigregister = _gnuradio_core_io.gr_file_sink_base_swigregister
gr_file_sink_base_swigregister(gr_file_sink_base)

class gr_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_file_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_file_sink_sptr
        __init__(self,  p) -> gr_file_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_file_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_file_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_file_sink_sptr
    __del__ = lambda self : None;
    def open(self, *args, **kwargs):
        """open(self, char filename) -> bool"""
        return _gnuradio_core_io.gr_file_sink_sptr_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _gnuradio_core_io.gr_file_sink_sptr_close(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_file_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_file_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_file_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_file_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_file_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_file_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_file_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_file_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_file_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_file_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_file_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_file_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_file_sink_sptr_check_topology(self, *args, **kwargs)

    def do_update(self):
        """do_update(self)"""
        return _gnuradio_core_io.gr_file_sink_sptr_do_update(self)

    def set_unbuffered(self, *args, **kwargs):
        """set_unbuffered(self, bool unbuffered)"""
        return _gnuradio_core_io.gr_file_sink_sptr_set_unbuffered(self, *args, **kwargs)

gr_file_sink_sptr_swigregister = _gnuradio_core_io.gr_file_sink_sptr_swigregister
gr_file_sink_sptr_swigregister(gr_file_sink_sptr)

gr_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def file_sink(*args, **kwargs):
  """file_sink(size_t itemsize, char filename) -> gr_file_sink_sptr"""
  return _gnuradio_core_io.file_sink(*args, **kwargs)
SEEK_SET = _gnuradio_core_io.SEEK_SET
SEEK_CUR = _gnuradio_core_io.SEEK_CUR
SEEK_END = _gnuradio_core_io.SEEK_END
class gr_file_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_file_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_file_source_sptr
        __init__(self,  p) -> gr_file_source_sptr
        """
        this = _gnuradio_core_io.new_gr_file_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_file_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_file_source_sptr
    __del__ = lambda self : None;
    def seek(self, *args, **kwargs):
        """seek(self, long seek_point, int whence) -> bool"""
        return _gnuradio_core_io.gr_file_source_sptr_seek(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_file_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_file_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_file_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_file_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_file_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_file_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_file_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_file_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_file_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_file_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_file_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_file_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_file_source_sptr_check_topology(self, *args, **kwargs)

gr_file_source_sptr_swigregister = _gnuradio_core_io.gr_file_source_sptr_swigregister
gr_file_source_sptr_swigregister(gr_file_source_sptr)

gr_file_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def file_source(*args, **kwargs):
  """file_source(size_t itemsize, char filename, bool repeat = False) -> gr_file_source_sptr"""
  return _gnuradio_core_io.file_source(*args, **kwargs)
class gr_file_descriptor_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_file_descriptor_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_file_descriptor_sink_sptr
        __init__(self,  p) -> gr_file_descriptor_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_file_descriptor_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_file_descriptor_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_sink_sptr_check_topology(self, *args, **kwargs)

gr_file_descriptor_sink_sptr_swigregister = _gnuradio_core_io.gr_file_descriptor_sink_sptr_swigregister
gr_file_descriptor_sink_sptr_swigregister(gr_file_descriptor_sink_sptr)

gr_file_descriptor_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def file_descriptor_sink(*args, **kwargs):
  """file_descriptor_sink(size_t itemsize, int fd) -> gr_file_descriptor_sink_sptr"""
  return _gnuradio_core_io.file_descriptor_sink(*args, **kwargs)
class gr_file_descriptor_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_file_descriptor_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_file_descriptor_source_sptr
        __init__(self,  p) -> gr_file_descriptor_source_sptr
        """
        this = _gnuradio_core_io.new_gr_file_descriptor_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_file_descriptor_source_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_file_descriptor_source_sptr_check_topology(self, *args, **kwargs)

gr_file_descriptor_source_sptr_swigregister = _gnuradio_core_io.gr_file_descriptor_source_sptr_swigregister
gr_file_descriptor_source_sptr_swigregister(gr_file_descriptor_source_sptr)

gr_file_descriptor_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def file_descriptor_source(*args, **kwargs):
  """file_descriptor_source(size_t itemsize, int fd, bool repeat = False) -> gr_file_descriptor_source_sptr"""
  return _gnuradio_core_io.file_descriptor_source(*args, **kwargs)
class gr_histo_sink_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_histo_sink_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_histo_sink_f_sptr
        __init__(self,  p) -> gr_histo_sink_f_sptr
        """
        this = _gnuradio_core_io.new_gr_histo_sink_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_histo_sink_f_sptr
    __del__ = lambda self : None;
    def get_frame_size(self):
        """get_frame_size(self) -> unsigned int"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_get_frame_size(self)

    def get_num_bins(self):
        """get_num_bins(self) -> unsigned int"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_get_num_bins(self)

    def set_frame_size(self, *args, **kwargs):
        """set_frame_size(self, unsigned int frame_size)"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_set_frame_size(self, *args, **kwargs)

    def set_num_bins(self, *args, **kwargs):
        """set_num_bins(self, unsigned int num_bins)"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_set_num_bins(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_histo_sink_f_sptr_check_topology(self, *args, **kwargs)

gr_histo_sink_f_sptr_swigregister = _gnuradio_core_io.gr_histo_sink_f_sptr_swigregister
gr_histo_sink_f_sptr_swigregister(gr_histo_sink_f_sptr)

gr_histo_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def histo_sink_f(*args, **kwargs):
  """histo_sink_f(gr_msg_queue_sptr msgq) -> gr_histo_sink_f_sptr"""
  return _gnuradio_core_io.histo_sink_f(*args, **kwargs)
class microtune_xxxx_eval_board(object):
    """Proxy of C++ microtune_xxxx_eval_board class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_io.delete_microtune_xxxx_eval_board
    __del__ = lambda self : None;
    def board_present_p(self):
        """board_present_p(self) -> bool"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_board_present_p(self)

    def set_RF_AGC_voltage(self, *args, **kwargs):
        """set_RF_AGC_voltage(self, float volts)"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_set_RF_AGC_voltage(self, *args, **kwargs)

    def set_IF_AGC_voltage(self, *args, **kwargs):
        """set_IF_AGC_voltage(self, float volts)"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_set_IF_AGC_voltage(self, *args, **kwargs)

    def set_AGC(self, *args, **kwargs):
        """set_AGC(self, float value_0_1000)"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_set_AGC(self, *args, **kwargs)

    def set_RF_freq(self, *args, **kwargs):
        """set_RF_freq(self, double freq) -> double"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_set_RF_freq(self, *args, **kwargs)

    def pll_locked_p(self):
        """pll_locked_p(self) -> bool"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_pll_locked_p(self)

    def get_output_freq(self):
        """get_output_freq(self) -> double"""
        return _gnuradio_core_io.microtune_xxxx_eval_board_get_output_freq(self)

microtune_xxxx_eval_board_swigregister = _gnuradio_core_io.microtune_xxxx_eval_board_swigregister
microtune_xxxx_eval_board_swigregister(microtune_xxxx_eval_board)

class microtune_4702_eval_board(microtune_xxxx_eval_board):
    """Proxy of C++ microtune_4702_eval_board class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, which_pp = 0): 
        """__init__(self, int which_pp = 0) -> microtune_4702_eval_board"""
        this = _gnuradio_core_io.new_microtune_4702_eval_board(which_pp)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_io.delete_microtune_4702_eval_board
    __del__ = lambda self : None;
microtune_4702_eval_board_swigregister = _gnuradio_core_io.microtune_4702_eval_board_swigregister
microtune_4702_eval_board_swigregister(microtune_4702_eval_board)

class microtune_4937_eval_board(microtune_xxxx_eval_board):
    """Proxy of C++ microtune_4937_eval_board class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, which_pp = 0): 
        """__init__(self, int which_pp = 0) -> microtune_4937_eval_board"""
        this = _gnuradio_core_io.new_microtune_4937_eval_board(which_pp)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_io.delete_microtune_4937_eval_board
    __del__ = lambda self : None;
microtune_4937_eval_board_swigregister = _gnuradio_core_io.microtune_4937_eval_board_swigregister
microtune_4937_eval_board_swigregister(microtune_4937_eval_board)

class sdr_1000_base(object):
    """Proxy of C++ sdr_1000_base class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, int which_pp) -> sdr_1000_base"""
        this = _gnuradio_core_io.new_sdr_1000_base(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_io.delete_sdr_1000_base
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _gnuradio_core_io.sdr_1000_base_reset(self)

    def write_latch(self, *args, **kwargs):
        """write_latch(self, int which, int value, int mask)"""
        return _gnuradio_core_io.sdr_1000_base_write_latch(self, *args, **kwargs)

sdr_1000_base_swigregister = _gnuradio_core_io.sdr_1000_base_swigregister
sdr_1000_base_swigregister(sdr_1000_base)
cvar = _gnuradio_core_io.cvar
L_EXT = cvar.L_EXT
L_BAND = cvar.L_BAND
L_DDS0 = cvar.L_DDS0
L_DDS1 = cvar.L_DDS1

gr_TRIG_MODE_FREE = _gnuradio_core_io.gr_TRIG_MODE_FREE
gr_TRIG_MODE_AUTO = _gnuradio_core_io.gr_TRIG_MODE_AUTO
gr_TRIG_MODE_NORM = _gnuradio_core_io.gr_TRIG_MODE_NORM
gr_TRIG_MODE_STRIPCHART = _gnuradio_core_io.gr_TRIG_MODE_STRIPCHART
gr_TRIG_SLOPE_POS = _gnuradio_core_io.gr_TRIG_SLOPE_POS
gr_TRIG_SLOPE_NEG = _gnuradio_core_io.gr_TRIG_SLOPE_NEG
class gr_oscope_sink_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_oscope_sink_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_oscope_sink_f_sptr
        __init__(self,  p) -> gr_oscope_sink_f_sptr
        """
        this = _gnuradio_core_io.new_gr_oscope_sink_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_oscope_sink_f_sptr
    __del__ = lambda self : None;
    def set_update_rate(self, *args, **kwargs):
        """set_update_rate(self, double update_rate) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_update_rate(self, *args, **kwargs)

    def set_decimation_count(self, *args, **kwargs):
        """set_decimation_count(self, int decimation_count) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_decimation_count(self, *args, **kwargs)

    def set_trigger_channel(self, *args, **kwargs):
        """set_trigger_channel(self, int channel) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_trigger_channel(self, *args, **kwargs)

    def set_trigger_mode(self, *args, **kwargs):
        """set_trigger_mode(self, gr_trigger_mode mode) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_trigger_mode(self, *args, **kwargs)

    def set_trigger_slope(self, *args, **kwargs):
        """set_trigger_slope(self, gr_trigger_slope slope) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_trigger_slope(self, *args, **kwargs)

    def set_trigger_level(self, *args, **kwargs):
        """set_trigger_level(self, double trigger_level) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_trigger_level(self, *args, **kwargs)

    def set_trigger_level_auto(self):
        """set_trigger_level_auto(self) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_trigger_level_auto(self)

    def set_sample_rate(self, *args, **kwargs):
        """set_sample_rate(self, double sample_rate) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_sample_rate(self, *args, **kwargs)

    def num_channels(self):
        """num_channels(self) -> int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_num_channels(self)

    def sample_rate(self):
        """sample_rate(self) -> double"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_sample_rate(self)

    def update_rate(self):
        """update_rate(self) -> double"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_update_rate(self)

    def get_decimation_count(self):
        """get_decimation_count(self) -> int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_decimation_count(self)

    def get_trigger_channel(self):
        """get_trigger_channel(self) -> int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_trigger_channel(self)

    def get_trigger_mode(self):
        """get_trigger_mode(self) -> gr_trigger_mode"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_trigger_mode(self)

    def get_trigger_slope(self):
        """get_trigger_slope(self) -> gr_trigger_slope"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_trigger_slope(self)

    def get_trigger_level(self):
        """get_trigger_level(self) -> double"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_trigger_level(self)

    def get_samples_per_output_record(self):
        """get_samples_per_output_record(self) -> int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_get_samples_per_output_record(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_oscope_sink_f_sptr_check_topology(self, *args, **kwargs)

gr_oscope_sink_f_sptr_swigregister = _gnuradio_core_io.gr_oscope_sink_f_sptr_swigregister
gr_oscope_sink_f_sptr_swigregister(gr_oscope_sink_f_sptr)

gr_oscope_sink_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def oscope_sink_f(*args, **kwargs):
  """oscope_sink_f(double sample_rate, gr_msg_queue_sptr msgq) -> gr_oscope_sink_f_sptr"""
  return _gnuradio_core_io.oscope_sink_f(*args, **kwargs)
class ppio_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ppio)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ppio_sptr
        __init__(self, ppio p) -> ppio_sptr
        """
        this = _gnuradio_core_io.new_ppio_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> ppio"""
        return _gnuradio_core_io.ppio_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_ppio_sptr
    __del__ = lambda self : None;
    def write_data(self, *args, **kwargs):
        """write_data(self, unsigned char v)"""
        return _gnuradio_core_io.ppio_sptr_write_data(self, *args, **kwargs)

    def read_data(self):
        """read_data(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_sptr_read_data(self)

    def write_control(self, *args, **kwargs):
        """write_control(self, unsigned char v)"""
        return _gnuradio_core_io.ppio_sptr_write_control(self, *args, **kwargs)

    def read_control(self):
        """read_control(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_sptr_read_control(self)

    def read_status(self):
        """read_status(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_sptr_read_status(self)

    def lock(self):
        """lock(self)"""
        return _gnuradio_core_io.ppio_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _gnuradio_core_io.ppio_sptr_unlock(self)

ppio_sptr_swigregister = _gnuradio_core_io.ppio_sptr_swigregister
ppio_sptr_swigregister(ppio_sptr)

class ppio(object):
    """Proxy of C++ ppio class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_io.delete_ppio
    __del__ = lambda self : None;
    def write_data(self, *args, **kwargs):
        """write_data(self, unsigned char v)"""
        return _gnuradio_core_io.ppio_write_data(self, *args, **kwargs)

    def read_data(self):
        """read_data(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_read_data(self)

    def write_control(self, *args, **kwargs):
        """write_control(self, unsigned char v)"""
        return _gnuradio_core_io.ppio_write_control(self, *args, **kwargs)

    def read_control(self):
        """read_control(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_read_control(self)

    def read_status(self):
        """read_status(self) -> unsigned char"""
        return _gnuradio_core_io.ppio_read_status(self)

    def lock(self):
        """lock(self)"""
        return _gnuradio_core_io.ppio_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _gnuradio_core_io.ppio_unlock(self)

ppio_swigregister = _gnuradio_core_io.ppio_swigregister
ppio_swigregister(ppio)


def make_ppio(*args, **kwargs):
  """make_ppio(int which_pp) -> ppio_sptr"""
  return _gnuradio_core_io.make_ppio(*args, **kwargs)
class gr_message_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_message_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_message_source_sptr
        __init__(self,  p) -> gr_message_source_sptr
        """
        this = _gnuradio_core_io.new_gr_message_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_message_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_message_source_sptr
    __del__ = lambda self : None;
    def msgq(self):
        """msgq(self) -> gr_msg_queue_sptr"""
        return _gnuradio_core_io.gr_message_source_sptr_msgq(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_message_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_message_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_message_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_message_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_message_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_message_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_message_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_message_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_message_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_message_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_message_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_message_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_message_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_message_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_message_source_sptr_check_topology(self, *args, **kwargs)

gr_message_source_sptr_swigregister = _gnuradio_core_io.gr_message_source_sptr_swigregister
gr_message_source_sptr_swigregister(gr_message_source_sptr)

gr_message_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class gr_message_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_message_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_message_sink_sptr
        __init__(self,  p) -> gr_message_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_message_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_message_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_message_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_message_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_message_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_message_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_message_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_message_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_message_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_message_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_message_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_message_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_message_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_message_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_message_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_message_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_message_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_message_sink_sptr_check_topology(self, *args, **kwargs)

gr_message_sink_sptr_swigregister = _gnuradio_core_io.gr_message_sink_sptr_swigregister
gr_message_sink_sptr_swigregister(gr_message_sink_sptr)

def message_source(*args):
  """
    message_source(size_t itemsize, int msgq_limit = 0) -> gr_message_source_sptr
    message_source(size_t itemsize, gr_msg_queue_sptr msgq) -> gr_message_source_sptr
    """
  return _gnuradio_core_io.message_source(*args)

gr_message_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def message_sink(*args, **kwargs):
  """message_sink(size_t itemsize, gr_msg_queue_sptr msgq, bool dont_block) -> gr_message_sink_sptr"""
  return _gnuradio_core_io.message_sink(*args, **kwargs)
class gr_udp_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_udp_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_udp_sink_sptr
        __init__(self,  p) -> gr_udp_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_udp_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_udp_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_udp_sink_sptr
    __del__ = lambda self : None;
    def payload_size(self):
        """payload_size(self) -> int"""
        return _gnuradio_core_io.gr_udp_sink_sptr_payload_size(self)

    def connect(self, *args, **kwargs):
        """connect(self, char host, unsigned short port)"""
        return _gnuradio_core_io.gr_udp_sink_sptr_connect(self, *args, **kwargs)

    def disconnect(self):
        """disconnect(self)"""
        return _gnuradio_core_io.gr_udp_sink_sptr_disconnect(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_udp_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_udp_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_udp_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_udp_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_udp_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_udp_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_udp_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_udp_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_udp_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_udp_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_udp_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_udp_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_udp_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_udp_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_udp_sink_sptr_check_topology(self, *args, **kwargs)

gr_udp_sink_sptr_swigregister = _gnuradio_core_io.gr_udp_sink_sptr_swigregister
gr_udp_sink_sptr_swigregister(gr_udp_sink_sptr)

gr_udp_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def udp_sink(*args, **kwargs):
  """
    udp_sink(size_t itemsize, char host, unsigned short port, int payload_size = 1472, 
        bool eof = True) -> gr_udp_sink_sptr
    """
  return _gnuradio_core_io.udp_sink(*args, **kwargs)
class gr_udp_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_udp_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_udp_source_sptr
        __init__(self,  p) -> gr_udp_source_sptr
        """
        this = _gnuradio_core_io.new_gr_udp_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_udp_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_udp_source_sptr
    __del__ = lambda self : None;
    def payload_size(self):
        """payload_size(self) -> int"""
        return _gnuradio_core_io.gr_udp_source_sptr_payload_size(self)

    def get_port(self):
        """get_port(self) -> int"""
        return _gnuradio_core_io.gr_udp_source_sptr_get_port(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_udp_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_udp_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_udp_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_udp_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_udp_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_udp_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_udp_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_udp_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_udp_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_udp_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_udp_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_udp_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_udp_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_udp_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_udp_source_sptr_check_topology(self, *args, **kwargs)

gr_udp_source_sptr_swigregister = _gnuradio_core_io.gr_udp_source_sptr_swigregister
gr_udp_source_sptr_swigregister(gr_udp_source_sptr)

gr_udp_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def udp_source(*args, **kwargs):
  """
    udp_source(size_t itemsize, char host, unsigned short port, int payload_size = 1472, 
        bool eof = True, bool wait = True) -> gr_udp_source_sptr
    """
  return _gnuradio_core_io.udp_source(*args, **kwargs)
class gr_wavfile_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_wavfile_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_wavfile_sink_sptr
        __init__(self,  p) -> gr_wavfile_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_wavfile_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_wavfile_sink_sptr
    __del__ = lambda self : None;
    def open(self, *args, **kwargs):
        """open(self, char filename) -> bool"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_open(self, *args, **kwargs)

    def close(self):
        """close(self)"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_close(self)

    def set_sample_rate(self, *args, **kwargs):
        """set_sample_rate(self, unsigned int sample_rate)"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_set_sample_rate(self, *args, **kwargs)

    def set_bits_per_sample(self, *args, **kwargs):
        """set_bits_per_sample(self, int bits_per_sample)"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_set_bits_per_sample(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_wavfile_sink_sptr_check_topology(self, *args, **kwargs)

gr_wavfile_sink_sptr_swigregister = _gnuradio_core_io.gr_wavfile_sink_sptr_swigregister
gr_wavfile_sink_sptr_swigregister(gr_wavfile_sink_sptr)

gr_wavfile_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def wavfile_sink(*args, **kwargs):
  """
    wavfile_sink(char filename, int n_channels, unsigned int sample_rate, 
        int bits_per_sample = 16) -> gr_wavfile_sink_sptr
    """
  return _gnuradio_core_io.wavfile_sink(*args, **kwargs)
class gr_wavfile_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_wavfile_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_wavfile_source_sptr
        __init__(self,  p) -> gr_wavfile_source_sptr
        """
        this = _gnuradio_core_io.new_gr_wavfile_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_wavfile_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_wavfile_source_sptr
    __del__ = lambda self : None;
    def sample_rate(self):
        """sample_rate(self) -> unsigned int"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_sample_rate(self)

    def bits_per_sample(self):
        """bits_per_sample(self) -> int"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_bits_per_sample(self)

    def channels(self):
        """channels(self) -> int"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_channels(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_wavfile_source_sptr_check_topology(self, *args, **kwargs)

gr_wavfile_source_sptr_swigregister = _gnuradio_core_io.gr_wavfile_source_sptr_swigregister
gr_wavfile_source_sptr_swigregister(gr_wavfile_source_sptr)

gr_wavfile_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def wavfile_source(*args, **kwargs):
  """wavfile_source(char filename, bool repeat = False) -> gr_wavfile_source_sptr"""
  return _gnuradio_core_io.wavfile_source(*args, **kwargs)
class gr_tagged_file_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_tagged_file_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_tagged_file_sink_sptr
        __init__(self,  p) -> gr_tagged_file_sink_sptr
        """
        this = _gnuradio_core_io.new_gr_tagged_file_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_io.delete_gr_tagged_file_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_io.gr_tagged_file_sink_sptr_check_topology(self, *args, **kwargs)

gr_tagged_file_sink_sptr_swigregister = _gnuradio_core_io.gr_tagged_file_sink_sptr_swigregister
gr_tagged_file_sink_sptr_swigregister(gr_tagged_file_sink_sptr)

gr_tagged_file_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def tagged_file_sink(*args, **kwargs):
  """tagged_file_sink(size_t itemsize, double samp_rate) -> gr_tagged_file_sink_sptr"""
  return _gnuradio_core_io.tagged_file_sink(*args, **kwargs)


