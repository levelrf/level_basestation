# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gnuradio_core_filter', [dirname(__file__)])
        except ImportError:
            import _gnuradio_core_filter
            return _gnuradio_core_filter
        if fp is not None:
            try:
                _mod = imp.load_module('_gnuradio_core_filter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gnuradio_core_filter = swig_import_helper()
    del swig_import_helper
else:
    import _gnuradio_core_filter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_filter.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _gnuradio_core_filter.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _gnuradio_core_filter.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_filter.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _gnuradio_core_filter.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _gnuradio_core_filter.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _gnuradio_core_filter.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_filter.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_filter.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_filter.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gnuradio_core_filter.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gnuradio_core_filter.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class gr_iir_filter_ffd_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_iir_filter_ffd)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_iir_filter_ffd_sptr
        __init__(self,  p) -> gr_iir_filter_ffd_sptr
        """
        this = _gnuradio_core_filter.new_gr_iir_filter_ffd_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_iir_filter_ffd_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_5__ fftaps, __dummy_5__ fbtaps)"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_iir_filter_ffd_sptr_check_topology(self, *args, **kwargs)

gr_iir_filter_ffd_sptr_swigregister = _gnuradio_core_filter.gr_iir_filter_ffd_sptr_swigregister
gr_iir_filter_ffd_sptr_swigregister(gr_iir_filter_ffd_sptr)

gr_iir_filter_ffd_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def iir_filter_ffd(*args, **kwargs):
  """iir_filter_ffd(__dummy_5__ fftaps, __dummy_5__ fbtaps) -> gr_iir_filter_ffd_sptr"""
  return _gnuradio_core_filter.iir_filter_ffd(*args, **kwargs)
class gr_single_pole_iir_filter_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_single_pole_iir_filter_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_single_pole_iir_filter_ff_sptr
        __init__(self,  p) -> gr_single_pole_iir_filter_ff_sptr
        """
        this = _gnuradio_core_filter.new_gr_single_pole_iir_filter_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_single_pole_iir_filter_ff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_check_topology(self, *args, **kwargs)

gr_single_pole_iir_filter_ff_sptr_swigregister = _gnuradio_core_filter.gr_single_pole_iir_filter_ff_sptr_swigregister
gr_single_pole_iir_filter_ff_sptr_swigregister(gr_single_pole_iir_filter_ff_sptr)

gr_single_pole_iir_filter_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def single_pole_iir_filter_ff(*args, **kwargs):
  """single_pole_iir_filter_ff(double alpha, unsigned int vlen = 1) -> gr_single_pole_iir_filter_ff_sptr"""
  return _gnuradio_core_filter.single_pole_iir_filter_ff(*args, **kwargs)
class gr_single_pole_iir_filter_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_single_pole_iir_filter_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_single_pole_iir_filter_cc_sptr
        __init__(self,  p) -> gr_single_pole_iir_filter_cc_sptr
        """
        this = _gnuradio_core_filter.new_gr_single_pole_iir_filter_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_single_pole_iir_filter_cc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, double alpha)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_check_topology(self, *args, **kwargs)

gr_single_pole_iir_filter_cc_sptr_swigregister = _gnuradio_core_filter.gr_single_pole_iir_filter_cc_sptr_swigregister
gr_single_pole_iir_filter_cc_sptr_swigregister(gr_single_pole_iir_filter_cc_sptr)

gr_single_pole_iir_filter_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def single_pole_iir_filter_cc(*args, **kwargs):
  """single_pole_iir_filter_cc(double alpha, unsigned int vlen = 1) -> gr_single_pole_iir_filter_cc_sptr"""
  return _gnuradio_core_filter.single_pole_iir_filter_cc(*args, **kwargs)
class gr_hilbert_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_hilbert_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_hilbert_fc_sptr
        __init__(self,  p) -> gr_hilbert_fc_sptr
        """
        this = _gnuradio_core_filter.new_gr_hilbert_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_hilbert_fc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_hilbert_fc_sptr_check_topology(self, *args, **kwargs)

gr_hilbert_fc_sptr_swigregister = _gnuradio_core_filter.gr_hilbert_fc_sptr_swigregister
gr_hilbert_fc_sptr_swigregister(gr_hilbert_fc_sptr)

gr_hilbert_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def hilbert_fc(*args, **kwargs):
  """hilbert_fc(unsigned int ntaps) -> gr_hilbert_fc_sptr"""
  return _gnuradio_core_filter.hilbert_fc(*args, **kwargs)
class gr_filter_delay_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_filter_delay_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_filter_delay_fc_sptr
        __init__(self,  p) -> gr_filter_delay_fc_sptr
        """
        this = _gnuradio_core_filter.new_gr_filter_delay_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_filter_delay_fc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_filter_delay_fc_sptr_check_topology(self, *args, **kwargs)

gr_filter_delay_fc_sptr_swigregister = _gnuradio_core_filter.gr_filter_delay_fc_sptr_swigregister
gr_filter_delay_fc_sptr_swigregister(gr_filter_delay_fc_sptr)

gr_filter_delay_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def filter_delay_fc(*args, **kwargs):
  """filter_delay_fc(__dummy_4__ taps) -> gr_filter_delay_fc_sptr"""
  return _gnuradio_core_filter.filter_delay_fc(*args, **kwargs)
class gr_fft_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fft_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fft_filter_ccc_sptr
        __init__(self,  p) -> gr_fft_filter_ccc_sptr
        """
        this = _gnuradio_core_filter.new_gr_fft_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fft_filter_ccc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_nthreads(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_ccc_sptr_check_topology(self, *args, **kwargs)

gr_fft_filter_ccc_sptr_swigregister = _gnuradio_core_filter.gr_fft_filter_ccc_sptr_swigregister
gr_fft_filter_ccc_sptr_swigregister(gr_fft_filter_ccc_sptr)

gr_fft_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fft_filter_ccc(*args, **kwargs):
  """
    fft_filter_ccc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        int nthreads = 1) -> gr_fft_filter_ccc_sptr
    """
  return _gnuradio_core_filter.fft_filter_ccc(*args, **kwargs)
class gr_fft_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fft_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fft_filter_fff_sptr
        __init__(self,  p) -> gr_fft_filter_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_fft_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fft_filter_fff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_taps(self)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_nthreads(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fft_filter_fff_sptr_check_topology(self, *args, **kwargs)

gr_fft_filter_fff_sptr_swigregister = _gnuradio_core_filter.gr_fft_filter_fff_sptr_swigregister
gr_fft_filter_fff_sptr_swigregister(gr_fft_filter_fff_sptr)

gr_fft_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fft_filter_fff(*args, **kwargs):
  """fft_filter_fff(int decimation, __dummy_4__ taps, int nthreads = 1) -> gr_fft_filter_fff_sptr"""
  return _gnuradio_core_filter.fft_filter_fff(*args, **kwargs)
class gr_fractional_interpolator_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fractional_interpolator_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fractional_interpolator_ff_sptr
        __init__(self,  p) -> gr_fractional_interpolator_ff_sptr
        """
        this = _gnuradio_core_filter.new_gr_fractional_interpolator_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fractional_interpolator_ff_sptr
    __del__ = lambda self : None;
    def mu(self):
        """mu(self) -> float"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_set_interp_ratio(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_check_topology(self, *args, **kwargs)

gr_fractional_interpolator_ff_sptr_swigregister = _gnuradio_core_filter.gr_fractional_interpolator_ff_sptr_swigregister
gr_fractional_interpolator_ff_sptr_swigregister(gr_fractional_interpolator_ff_sptr)

gr_fractional_interpolator_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fractional_interpolator_ff(*args, **kwargs):
  """fractional_interpolator_ff(float phase_shift, float interp_ratio) -> gr_fractional_interpolator_ff_sptr"""
  return _gnuradio_core_filter.fractional_interpolator_ff(*args, **kwargs)
class gr_fractional_interpolator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fractional_interpolator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fractional_interpolator_cc_sptr
        __init__(self,  p) -> gr_fractional_interpolator_cc_sptr
        """
        this = _gnuradio_core_filter.new_gr_fractional_interpolator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fractional_interpolator_cc_sptr
    __del__ = lambda self : None;
    def mu(self):
        """mu(self) -> float"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_mu(self)

    def interp_ratio(self):
        """interp_ratio(self) -> float"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_interp_ratio(self)

    def set_mu(self, *args, **kwargs):
        """set_mu(self, float mu)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_set_mu(self, *args, **kwargs)

    def set_interp_ratio(self, *args, **kwargs):
        """set_interp_ratio(self, float interp_ratio)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_set_interp_ratio(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_check_topology(self, *args, **kwargs)

gr_fractional_interpolator_cc_sptr_swigregister = _gnuradio_core_filter.gr_fractional_interpolator_cc_sptr_swigregister
gr_fractional_interpolator_cc_sptr_swigregister(gr_fractional_interpolator_cc_sptr)

gr_fractional_interpolator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fractional_interpolator_cc(*args, **kwargs):
  """fractional_interpolator_cc(float phase_shift, float interp_ratio) -> gr_fractional_interpolator_cc_sptr"""
  return _gnuradio_core_filter.fractional_interpolator_cc(*args, **kwargs)
class gr_goertzel_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_goertzel_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_goertzel_fc_sptr
        __init__(self,  p) -> gr_goertzel_fc_sptr
        """
        this = _gnuradio_core_filter.new_gr_goertzel_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_goertzel_fc_sptr
    __del__ = lambda self : None;
    def set_freq(self, *args, **kwargs):
        """set_freq(self, float freq)"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_set_freq(self, *args, **kwargs)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, int rate)"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_set_rate(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_goertzel_fc_sptr_check_topology(self, *args, **kwargs)

gr_goertzel_fc_sptr_swigregister = _gnuradio_core_filter.gr_goertzel_fc_sptr_swigregister
gr_goertzel_fc_sptr_swigregister(gr_goertzel_fc_sptr)

gr_goertzel_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def goertzel_fc(*args, **kwargs):
  """goertzel_fc(int rate, int len, float freq) -> gr_goertzel_fc_sptr"""
  return _gnuradio_core_filter.goertzel_fc(*args, **kwargs)
class gr_pfb_channelizer_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_channelizer_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_channelizer_ccf_sptr
        __init__(self,  p) -> gr_pfb_channelizer_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_channelizer_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_channelizer_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, __dummy_3__ map)"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> __dummy_3__"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_channel_map(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_channelizer_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_channelizer_ccf_sptr_swigregister
gr_pfb_channelizer_ccf_sptr_swigregister(gr_pfb_channelizer_ccf_sptr)

gr_pfb_channelizer_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_channelizer_ccf(*args, **kwargs):
  """pfb_channelizer_ccf(unsigned int numchans, __dummy_4__ taps, float oversample_rate = 1) -> gr_pfb_channelizer_ccf_sptr"""
  return _gnuradio_core_filter.pfb_channelizer_ccf(*args, **kwargs)
class gr_pfb_synthesizer_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_synthesizer_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_synthesizer_ccf_sptr
        __init__(self,  p) -> gr_pfb_synthesizer_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_synthesizer_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_synthesizer_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_print_taps(self)

    def taps(self):
        """taps(self) -> __dummy_11__"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_taps(self)

    def set_channel_map(self, *args, **kwargs):
        """set_channel_map(self, __dummy_3__ map)"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_set_channel_map(self, *args, **kwargs)

    def channel_map(self):
        """channel_map(self) -> __dummy_3__"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_channel_map(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_synthesizer_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_synthesizer_ccf_sptr_swigregister
gr_pfb_synthesizer_ccf_sptr_swigregister(gr_pfb_synthesizer_ccf_sptr)

gr_pfb_synthesizer_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_synthesizer_ccf(*args, **kwargs):
  """pfb_synthesizer_ccf(unsigned int numchans, __dummy_4__ taps, bool twox = False) -> gr_pfb_synthesizer_ccf_sptr"""
  return _gnuradio_core_filter.pfb_synthesizer_ccf(*args, **kwargs)
class gr_pfb_decimator_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_decimator_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_decimator_ccf_sptr
        __init__(self,  p) -> gr_pfb_decimator_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_decimator_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_decimator_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_decimator_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_decimator_ccf_sptr_swigregister
gr_pfb_decimator_ccf_sptr_swigregister(gr_pfb_decimator_ccf_sptr)

gr_pfb_decimator_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_decimator_ccf(*args, **kwargs):
  """pfb_decimator_ccf(unsigned int decim, __dummy_4__ taps, unsigned int channel) -> gr_pfb_decimator_ccf_sptr"""
  return _gnuradio_core_filter.pfb_decimator_ccf(*args, **kwargs)
class gr_pfb_interpolator_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_interpolator_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_interpolator_ccf_sptr
        __init__(self,  p) -> gr_pfb_interpolator_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_interpolator_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_interpolator_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_set_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_print_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_interpolator_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_interpolator_ccf_sptr_swigregister
gr_pfb_interpolator_ccf_sptr_swigregister(gr_pfb_interpolator_ccf_sptr)

gr_pfb_interpolator_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_interpolator_ccf(*args, **kwargs):
  """pfb_interpolator_ccf(unsigned int interp, __dummy_4__ taps) -> gr_pfb_interpolator_ccf_sptr"""
  return _gnuradio_core_filter.pfb_interpolator_ccf(*args, **kwargs)
class gr_pfb_arb_resampler_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_arb_resampler_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_arb_resampler_ccf_sptr
        __init__(self,  p) -> gr_pfb_arb_resampler_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_arb_resampler_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_arb_resampler_ccf_sptr
    __del__ = lambda self : None;
    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_set_rate(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_arb_resampler_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_arb_resampler_ccf_sptr_swigregister
gr_pfb_arb_resampler_ccf_sptr_swigregister(gr_pfb_arb_resampler_ccf_sptr)

gr_pfb_arb_resampler_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_arb_resampler_ccf(*args, **kwargs):
  """pfb_arb_resampler_ccf(float rate, __dummy_4__ taps, unsigned int filter_size = 32) -> gr_pfb_arb_resampler_ccf_sptr"""
  return _gnuradio_core_filter.pfb_arb_resampler_ccf(*args, **kwargs)
class gr_pfb_arb_resampler_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_arb_resampler_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_arb_resampler_fff_sptr
        __init__(self,  p) -> gr_pfb_arb_resampler_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_arb_resampler_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_arb_resampler_fff_sptr
    __del__ = lambda self : None;
    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_print_taps(self)

    def set_rate(self, *args, **kwargs):
        """set_rate(self, float rate)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_set_rate(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_check_topology(self, *args, **kwargs)

gr_pfb_arb_resampler_fff_sptr_swigregister = _gnuradio_core_filter.gr_pfb_arb_resampler_fff_sptr_swigregister
gr_pfb_arb_resampler_fff_sptr_swigregister(gr_pfb_arb_resampler_fff_sptr)

gr_pfb_arb_resampler_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_arb_resampler_fff(*args, **kwargs):
  """pfb_arb_resampler_fff(float rate, __dummy_4__ taps, unsigned int filter_size = 32) -> gr_pfb_arb_resampler_fff_sptr"""
  return _gnuradio_core_filter.pfb_arb_resampler_fff(*args, **kwargs)
class gr_pfb_clock_sync_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_clock_sync_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_clock_sync_ccf_sptr
        __init__(self,  p) -> gr_pfb_clock_sync_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_clock_sync_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_clock_sync_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps, __dummy_11__ ourtaps, std::vector<(p.gr_fir_ccf,std::allocator<(p.gr_fir_ccf)>)> ourfilter)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_taps(self, *args, **kwargs)

    def get_taps(self):
        """get_taps(self) -> __dummy_11__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_taps(self)

    def get_diff_taps(self):
        """get_diff_taps(self) -> __dummy_11__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_diff_taps(self)

    def get_channel_taps(self, *args, **kwargs):
        """get_channel_taps(self, int channel) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_channel_taps(self, *args, **kwargs)

    def get_diff_channel_taps(self, *args, **kwargs):
        """get_diff_channel_taps(self, int channel) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_diff_channel_taps(self, *args, **kwargs)

    def get_taps_as_string(self):
        """get_taps_as_string(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_taps_as_string(self)

    def get_diff_taps_as_string(self):
        """get_diff_taps_as_string(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_diff_taps_as_string(self)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_beta(self, *args, **kwargs)

    def set_max_rate_deviation(self, *args, **kwargs):
        """set_max_rate_deviation(self, float m)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_max_rate_deviation(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_beta(self)

    def get_clock_rate(self):
        """get_clock_rate(self) -> float"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_get_clock_rate(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_check_topology(self, *args, **kwargs)

gr_pfb_clock_sync_ccf_sptr_swigregister = _gnuradio_core_filter.gr_pfb_clock_sync_ccf_sptr_swigregister
gr_pfb_clock_sync_ccf_sptr_swigregister(gr_pfb_clock_sync_ccf_sptr)

gr_pfb_clock_sync_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_clock_sync_ccf(*args, **kwargs):
  """
    pfb_clock_sync_ccf(double sps, float loop_bw, __dummy_4__ taps, unsigned int filter_size = 32, 
        float init_phase = 0, 
        float max_rate_deviation = 1.5, int osps = 1) -> gr_pfb_clock_sync_ccf_sptr
    """
  return _gnuradio_core_filter.pfb_clock_sync_ccf(*args, **kwargs)
class gr_pfb_clock_sync_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pfb_clock_sync_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pfb_clock_sync_fff_sptr
        __init__(self,  p) -> gr_pfb_clock_sync_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_pfb_clock_sync_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_pfb_clock_sync_fff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps, __dummy_11__ ourtaps, std::vector<(p.gr_fir_fff,std::allocator<(p.gr_fir_fff)>)> ourfilter)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_set_taps(self, *args, **kwargs)

    def channel_taps(self, *args, **kwargs):
        """channel_taps(self, int channel) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_channel_taps(self, *args, **kwargs)

    def diff_channel_taps(self, *args, **kwargs):
        """diff_channel_taps(self, int channel) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_diff_channel_taps(self, *args, **kwargs)

    def print_taps(self):
        """print_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_print_taps(self)

    def print_diff_taps(self):
        """print_diff_taps(self)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_print_diff_taps(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_set_beta(self, *args, **kwargs)

    def set_max_rate_deviation(self, *args, **kwargs):
        """set_max_rate_deviation(self, float m)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_set_max_rate_deviation(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_check_topology(self, *args, **kwargs)

gr_pfb_clock_sync_fff_sptr_swigregister = _gnuradio_core_filter.gr_pfb_clock_sync_fff_sptr_swigregister
gr_pfb_clock_sync_fff_sptr_swigregister(gr_pfb_clock_sync_fff_sptr)

gr_pfb_clock_sync_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pfb_clock_sync_fff(*args, **kwargs):
  """
    pfb_clock_sync_fff(double sps, float gain, __dummy_4__ taps, unsigned int filter_size = 32, 
        float init_phase = 0, float max_rate_deviation = 1.5) -> gr_pfb_clock_sync_fff_sptr
    """
  return _gnuradio_core_filter.pfb_clock_sync_fff(*args, **kwargs)
class gr_dc_blocker_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_dc_blocker_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_dc_blocker_cc_sptr
        __init__(self,  p) -> gr_dc_blocker_cc_sptr
        """
        this = _gnuradio_core_filter.new_gr_dc_blocker_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_dc_blocker_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_cc_sptr_check_topology(self, *args, **kwargs)

gr_dc_blocker_cc_sptr_swigregister = _gnuradio_core_filter.gr_dc_blocker_cc_sptr_swigregister
gr_dc_blocker_cc_sptr_swigregister(gr_dc_blocker_cc_sptr)

gr_dc_blocker_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def dc_blocker_cc(D = 32, long_form = True):
  """dc_blocker_cc(int D = 32, bool long_form = True) -> gr_dc_blocker_cc_sptr"""
  return _gnuradio_core_filter.dc_blocker_cc(D, long_form)
class gr_dc_blocker_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_dc_blocker_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_dc_blocker_ff_sptr
        __init__(self,  p) -> gr_dc_blocker_ff_sptr
        """
        this = _gnuradio_core_filter.new_gr_dc_blocker_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_dc_blocker_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_dc_blocker_ff_sptr_check_topology(self, *args, **kwargs)

gr_dc_blocker_ff_sptr_swigregister = _gnuradio_core_filter.gr_dc_blocker_ff_sptr_swigregister
gr_dc_blocker_ff_sptr_swigregister(gr_dc_blocker_ff_sptr)

gr_dc_blocker_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def dc_blocker_ff(D = 32, long_form = True):
  """dc_blocker_ff(int D = 32, bool long_form = True) -> gr_dc_blocker_ff_sptr"""
  return _gnuradio_core_filter.dc_blocker_ff(D, long_form)
class gr_fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_ccc_sptr
        __init__(self,  p) -> gr_fir_filter_ccc_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccc_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_ccc_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_ccc_sptr_swigregister
gr_fir_filter_ccc_sptr_swigregister(gr_fir_filter_ccc_sptr)

gr_fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_ccc(*args, **kwargs):
  """fir_filter_ccc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_fir_filter_ccc_sptr"""
  return _gnuradio_core_filter.fir_filter_ccc(*args, **kwargs)
class gr_fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_ccf_sptr
        __init__(self,  p) -> gr_fir_filter_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_ccf_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_ccf_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_ccf_sptr_swigregister
gr_fir_filter_ccf_sptr_swigregister(gr_fir_filter_ccf_sptr)

gr_fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_ccf(*args, **kwargs):
  """fir_filter_ccf(int decimation, __dummy_4__ taps) -> gr_fir_filter_ccf_sptr"""
  return _gnuradio_core_filter.fir_filter_ccf(*args, **kwargs)
class gr_fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_fcc_sptr
        __init__(self,  p) -> gr_fir_filter_fcc_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fcc_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_fcc_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_fcc_sptr_swigregister
gr_fir_filter_fcc_sptr_swigregister(gr_fir_filter_fcc_sptr)

gr_fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_fcc(*args, **kwargs):
  """fir_filter_fcc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_fir_filter_fcc_sptr"""
  return _gnuradio_core_filter.fir_filter_fcc(*args, **kwargs)
class gr_fir_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_fff_sptr
        __init__(self,  p) -> gr_fir_filter_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_fff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fff_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_fff_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_fff_sptr_swigregister
gr_fir_filter_fff_sptr_swigregister(gr_fir_filter_fff_sptr)

gr_fir_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_fff(*args, **kwargs):
  """fir_filter_fff(int decimation, __dummy_4__ taps) -> gr_fir_filter_fff_sptr"""
  return _gnuradio_core_filter.fir_filter_fff(*args, **kwargs)
class gr_fir_filter_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_fsf_sptr
        __init__(self,  p) -> gr_fir_filter_fsf_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_fsf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> __dummy_4__"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_fsf_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_fsf_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_fsf_sptr_swigregister
gr_fir_filter_fsf_sptr_swigregister(gr_fir_filter_fsf_sptr)

gr_fir_filter_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_fsf(*args, **kwargs):
  """fir_filter_fsf(int decimation, __dummy_4__ taps) -> gr_fir_filter_fsf_sptr"""
  return _gnuradio_core_filter.fir_filter_fsf(*args, **kwargs)
class gr_fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fir_filter_scc_sptr
        __init__(self,  p) -> gr_fir_filter_scc_sptr
        """
        this = _gnuradio_core_filter.new_gr_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def taps(self):
        """taps(self) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_taps(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_fir_filter_scc_sptr_check_topology(self, *args, **kwargs)

gr_fir_filter_scc_sptr_swigregister = _gnuradio_core_filter.gr_fir_filter_scc_sptr_swigregister
gr_fir_filter_scc_sptr_swigregister(gr_fir_filter_scc_sptr)

gr_fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fir_filter_scc(*args, **kwargs):
  """fir_filter_scc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_fir_filter_scc_sptr"""
  return _gnuradio_core_filter.fir_filter_scc(*args, **kwargs)
class gr_freq_xlating_fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_ccc_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_ccc_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_ccc_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccc_sptr_swigregister
gr_freq_xlating_fir_filter_ccc_sptr_swigregister(gr_freq_xlating_fir_filter_ccc_sptr)

gr_freq_xlating_fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_ccc(*args, **kwargs):
  """
    freq_xlating_fir_filter_ccc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_ccc_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_ccc(*args, **kwargs)
class gr_freq_xlating_fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_ccf_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_ccf_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_ccf_sptr_swigregister
gr_freq_xlating_fir_filter_ccf_sptr_swigregister(gr_freq_xlating_fir_filter_ccf_sptr)

gr_freq_xlating_fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_ccf(*args, **kwargs):
  """
    freq_xlating_fir_filter_ccf(int decimation, __dummy_4__ taps, double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_ccf_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_ccf(*args, **kwargs)
class gr_freq_xlating_fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_fcc_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_fcc_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_fcc_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcc_sptr_swigregister
gr_freq_xlating_fir_filter_fcc_sptr_swigregister(gr_freq_xlating_fir_filter_fcc_sptr)

gr_freq_xlating_fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_fcc(*args, **kwargs):
  """
    freq_xlating_fir_filter_fcc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_fcc_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_fcc(*args, **kwargs)
class gr_freq_xlating_fir_filter_fcf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_fcf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_fcf_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_fcf_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_fcf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_fcf_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_fcf_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_fcf_sptr_swigregister
gr_freq_xlating_fir_filter_fcf_sptr_swigregister(gr_freq_xlating_fir_filter_fcf_sptr)

gr_freq_xlating_fir_filter_fcf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_fcf(*args, **kwargs):
  """
    freq_xlating_fir_filter_fcf(int decimation, __dummy_4__ taps, double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_fcf_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_fcf(*args, **kwargs)
class gr_freq_xlating_fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_scc_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_scc_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_scc_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_scc_sptr_swigregister
gr_freq_xlating_fir_filter_scc_sptr_swigregister(gr_freq_xlating_fir_filter_scc_sptr)

gr_freq_xlating_fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_scc(*args, **kwargs):
  """
    freq_xlating_fir_filter_scc(int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps, 
        double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_scc_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_scc(*args, **kwargs)
class gr_freq_xlating_fir_filter_scf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_freq_xlating_fir_filter_scf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_freq_xlating_fir_filter_scf_sptr
        __init__(self,  p) -> gr_freq_xlating_fir_filter_scf_sptr
        """
        this = _gnuradio_core_filter.new_gr_freq_xlating_fir_filter_scf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_freq_xlating_fir_filter_scf_sptr
    __del__ = lambda self : None;
    def set_center_freq(self, *args, **kwargs):
        """set_center_freq(self, double center_freq)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_set_center_freq(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_check_topology(self, *args, **kwargs)

gr_freq_xlating_fir_filter_scf_sptr_swigregister = _gnuradio_core_filter.gr_freq_xlating_fir_filter_scf_sptr_swigregister
gr_freq_xlating_fir_filter_scf_sptr_swigregister(gr_freq_xlating_fir_filter_scf_sptr)

gr_freq_xlating_fir_filter_scf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freq_xlating_fir_filter_scf(*args, **kwargs):
  """
    freq_xlating_fir_filter_scf(int decimation, __dummy_4__ taps, double center_freq, 
        double sampling_freq) -> gr_freq_xlating_fir_filter_scf_sptr
    """
  return _gnuradio_core_filter.freq_xlating_fir_filter_scf(*args, **kwargs)
class gr_interp_fir_filter_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_ccc_sptr
        __init__(self,  p) -> gr_interp_fir_filter_ccc_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_ccc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_ccc_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_ccc_sptr_swigregister
gr_interp_fir_filter_ccc_sptr_swigregister(gr_interp_fir_filter_ccc_sptr)

gr_interp_fir_filter_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_ccc(*args, **kwargs):
  """interp_fir_filter_ccc(int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_interp_fir_filter_ccc_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_ccc(*args, **kwargs)
class gr_interp_fir_filter_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_ccf_sptr
        __init__(self,  p) -> gr_interp_fir_filter_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_ccf_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_ccf_sptr_swigregister
gr_interp_fir_filter_ccf_sptr_swigregister(gr_interp_fir_filter_ccf_sptr)

gr_interp_fir_filter_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_ccf(*args, **kwargs):
  """interp_fir_filter_ccf(int interpolation, __dummy_4__ taps) -> gr_interp_fir_filter_ccf_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_ccf(*args, **kwargs)
class gr_interp_fir_filter_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_fcc_sptr
        __init__(self,  p) -> gr_interp_fir_filter_fcc_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_fcc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_fcc_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_fcc_sptr_swigregister
gr_interp_fir_filter_fcc_sptr_swigregister(gr_interp_fir_filter_fcc_sptr)

gr_interp_fir_filter_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_fcc(*args, **kwargs):
  """interp_fir_filter_fcc(int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_interp_fir_filter_fcc_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_fcc(*args, **kwargs)
class gr_interp_fir_filter_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_fff_sptr
        __init__(self,  p) -> gr_interp_fir_filter_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_fff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_fff_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_fff_sptr_swigregister
gr_interp_fir_filter_fff_sptr_swigregister(gr_interp_fir_filter_fff_sptr)

gr_interp_fir_filter_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_fff(*args, **kwargs):
  """interp_fir_filter_fff(int interpolation, __dummy_4__ taps) -> gr_interp_fir_filter_fff_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_fff(*args, **kwargs)
class gr_interp_fir_filter_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_fsf_sptr
        __init__(self,  p) -> gr_interp_fir_filter_fsf_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_fsf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_fsf_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_fsf_sptr_swigregister
gr_interp_fir_filter_fsf_sptr_swigregister(gr_interp_fir_filter_fsf_sptr)

gr_interp_fir_filter_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_fsf(*args, **kwargs):
  """interp_fir_filter_fsf(int interpolation, __dummy_4__ taps) -> gr_interp_fir_filter_fsf_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_fsf(*args, **kwargs)
class gr_interp_fir_filter_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interp_fir_filter_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interp_fir_filter_scc_sptr
        __init__(self,  p) -> gr_interp_fir_filter_scc_sptr
        """
        this = _gnuradio_core_filter.new_gr_interp_fir_filter_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_interp_fir_filter_scc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_check_topology(self, *args, **kwargs)

gr_interp_fir_filter_scc_sptr_swigregister = _gnuradio_core_filter.gr_interp_fir_filter_scc_sptr_swigregister
gr_interp_fir_filter_scc_sptr_swigregister(gr_interp_fir_filter_scc_sptr)

gr_interp_fir_filter_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interp_fir_filter_scc(*args, **kwargs):
  """interp_fir_filter_scc(int interpolation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_interp_fir_filter_scc_sptr"""
  return _gnuradio_core_filter.interp_fir_filter_scc(*args, **kwargs)
class gr_rational_resampler_base_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_ccc_sptr
        __init__(self,  p) -> gr_rational_resampler_base_ccc_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_ccc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_ccc_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_ccc_sptr_swigregister
gr_rational_resampler_base_ccc_sptr_swigregister(gr_rational_resampler_base_ccc_sptr)

gr_rational_resampler_base_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_ccc(*args, **kwargs):
  """rational_resampler_base_ccc(int interpolation, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_rational_resampler_base_ccc_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_ccc(*args, **kwargs)
class gr_rational_resampler_base_ccf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_ccf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_ccf_sptr
        __init__(self,  p) -> gr_rational_resampler_base_ccf_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_ccf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_ccf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_ccf_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_ccf_sptr_swigregister
gr_rational_resampler_base_ccf_sptr_swigregister(gr_rational_resampler_base_ccf_sptr)

gr_rational_resampler_base_ccf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_ccf(*args, **kwargs):
  """rational_resampler_base_ccf(int interpolation, int decimation, __dummy_4__ taps) -> gr_rational_resampler_base_ccf_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_ccf(*args, **kwargs)
class gr_rational_resampler_base_fcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_fcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_fcc_sptr
        __init__(self,  p) -> gr_rational_resampler_base_fcc_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_fcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_fcc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_fcc_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_fcc_sptr_swigregister
gr_rational_resampler_base_fcc_sptr_swigregister(gr_rational_resampler_base_fcc_sptr)

gr_rational_resampler_base_fcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_fcc(*args, **kwargs):
  """rational_resampler_base_fcc(int interpolation, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_rational_resampler_base_fcc_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_fcc(*args, **kwargs)
class gr_rational_resampler_base_fff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_fff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_fff_sptr
        __init__(self,  p) -> gr_rational_resampler_base_fff_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_fff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_fff_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_fff_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_fff_sptr_swigregister
gr_rational_resampler_base_fff_sptr_swigregister(gr_rational_resampler_base_fff_sptr)

gr_rational_resampler_base_fff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_fff(*args, **kwargs):
  """rational_resampler_base_fff(int interpolation, int decimation, __dummy_4__ taps) -> gr_rational_resampler_base_fff_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_fff(*args, **kwargs)
class gr_rational_resampler_base_fsf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_fsf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_fsf_sptr
        __init__(self,  p) -> gr_rational_resampler_base_fsf_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_fsf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_fsf_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, __dummy_4__ taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_fsf_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_fsf_sptr_swigregister
gr_rational_resampler_base_fsf_sptr_swigregister(gr_rational_resampler_base_fsf_sptr)

gr_rational_resampler_base_fsf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_fsf(*args, **kwargs):
  """rational_resampler_base_fsf(int interpolation, int decimation, __dummy_4__ taps) -> gr_rational_resampler_base_fsf_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_fsf(*args, **kwargs)
class gr_rational_resampler_base_scc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rational_resampler_base_scc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rational_resampler_base_scc_sptr
        __init__(self,  p) -> gr_rational_resampler_base_scc_sptr
        """
        this = _gnuradio_core_filter.new_gr_rational_resampler_base_scc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_filter.delete_gr_rational_resampler_base_scc_sptr
    __del__ = lambda self : None;
    def set_taps(self, *args, **kwargs):
        """set_taps(self, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_set_taps(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_check_topology(self, *args, **kwargs)

gr_rational_resampler_base_scc_sptr_swigregister = _gnuradio_core_filter.gr_rational_resampler_base_scc_sptr_swigregister
gr_rational_resampler_base_scc_sptr_swigregister(gr_rational_resampler_base_scc_sptr)

gr_rational_resampler_base_scc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rational_resampler_base_scc(*args, **kwargs):
  """rational_resampler_base_scc(int interpolation, int decimation, std::vector<(gr_complex,std::allocator<(gr_complex)>)> taps) -> gr_rational_resampler_base_scc_sptr"""
  return _gnuradio_core_filter.rational_resampler_base_scc(*args, **kwargs)


