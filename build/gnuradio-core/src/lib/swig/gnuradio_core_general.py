# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gnuradio_core_general', [dirname(__file__)])
        except ImportError:
            import _gnuradio_core_general
            return _gnuradio_core_general
        if fp is not None:
            try:
                _mod = imp.load_module('_gnuradio_core_general', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gnuradio_core_general = swig_import_helper()
    del swig_import_helper
else:
    import _gnuradio_core_general
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnuradio_core_general.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _gnuradio_core_general.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _gnuradio_core_general.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_general.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _gnuradio_core_general.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _gnuradio_core_general.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _gnuradio_core_general.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_general.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _gnuradio_core_general.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _gnuradio_core_general.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gnuradio_core_general.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gnuradio_core_general.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class gri_control_loop(object):
    """Proxy of C++ gri_control_loop class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, float loop_bw, float max_freq, float min_freq) -> gri_control_loop"""
        this = _gnuradio_core_general.new_gri_control_loop(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_gri_control_loop
    __del__ = lambda self : None;
    def update_gains(self):
        """update_gains(self)"""
        return _gnuradio_core_general.gri_control_loop_update_gains(self)

    def advance_loop(self, *args, **kwargs):
        """advance_loop(self, float error)"""
        return _gnuradio_core_general.gri_control_loop_advance_loop(self, *args, **kwargs)

    def phase_wrap(self):
        """phase_wrap(self)"""
        return _gnuradio_core_general.gri_control_loop_phase_wrap(self)

    def frequency_limit(self):
        """frequency_limit(self)"""
        return _gnuradio_core_general.gri_control_loop_frequency_limit(self)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _gnuradio_core_general.gri_control_loop_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _gnuradio_core_general.gri_control_loop_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_general.gri_control_loop_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_general.gri_control_loop_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _gnuradio_core_general.gri_control_loop_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _gnuradio_core_general.gri_control_loop_set_phase(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _gnuradio_core_general.gri_control_loop_get_phase(self)

gri_control_loop_swigregister = _gnuradio_core_general.gri_control_loop_swigregister
gri_control_loop_swigregister(gri_control_loop)

class gr_nop_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_nop)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_nop_sptr
        __init__(self,  p) -> gr_nop_sptr
        """
        this = _gnuradio_core_general.new_gr_nop_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_nop_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_nop_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_nop_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_nop_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_nop_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_nop_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_nop_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_nop_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_nop_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_nop_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_nop_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_nop_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_nop_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_nop_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_nop_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_nop_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_nop_sptr_check_topology(self, *args, **kwargs)

gr_nop_sptr_swigregister = _gnuradio_core_general.gr_nop_sptr_swigregister
gr_nop_sptr_swigregister(gr_nop_sptr)

gr_nop_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def nop(*args, **kwargs):
  """nop(size_t sizeof_stream_item) -> gr_nop_sptr"""
  return _gnuradio_core_general.nop(*args, **kwargs)
class gr_null_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_null_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_null_sink_sptr
        __init__(self,  p) -> gr_null_sink_sptr
        """
        this = _gnuradio_core_general.new_gr_null_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_null_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_null_sink_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_null_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_null_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_null_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_null_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_null_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_null_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_null_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_null_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_null_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_null_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_null_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_null_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_null_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_null_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_null_sink_sptr_check_topology(self, *args, **kwargs)

gr_null_sink_sptr_swigregister = _gnuradio_core_general.gr_null_sink_sptr_swigregister
gr_null_sink_sptr_swigregister(gr_null_sink_sptr)

gr_null_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def null_sink(*args, **kwargs):
  """null_sink(size_t sizeof_stream_item) -> gr_null_sink_sptr"""
  return _gnuradio_core_general.null_sink(*args, **kwargs)
class gr_null_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_null_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_null_source_sptr
        __init__(self,  p) -> gr_null_source_sptr
        """
        this = _gnuradio_core_general.new_gr_null_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_null_source_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_null_source_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_null_source_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_null_source_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_null_source_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_null_source_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_null_source_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_null_source_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_null_source_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_null_source_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_null_source_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_null_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_null_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_null_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_null_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_null_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_null_source_sptr_check_topology(self, *args, **kwargs)

gr_null_source_sptr_swigregister = _gnuradio_core_general.gr_null_source_sptr_swigregister
gr_null_source_sptr_swigregister(gr_null_source_sptr)

gr_null_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def null_source(*args, **kwargs):
  """null_source(size_t sizeof_stream_item) -> gr_null_source_sptr"""
  return _gnuradio_core_general.null_source(*args, **kwargs)
class gr_head_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_head)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_head_sptr
        __init__(self,  p) -> gr_head_sptr
        """
        this = _gnuradio_core_general.new_gr_head_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_head_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_head_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _gnuradio_core_general.gr_head_sptr_reset(self)

    def set_length(self, *args, **kwargs):
        """set_length(self, int nitems)"""
        return _gnuradio_core_general.gr_head_sptr_set_length(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_head_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_head_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_head_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_head_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_head_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_head_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_head_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_head_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_head_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_head_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_head_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_head_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_head_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_head_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_head_sptr_check_topology(self, *args, **kwargs)

gr_head_sptr_swigregister = _gnuradio_core_general.gr_head_sptr_swigregister
gr_head_sptr_swigregister(gr_head_sptr)

gr_head_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def head(*args, **kwargs):
  """head(size_t sizeof_stream_item, unsigned long long nitems) -> gr_head_sptr"""
  return _gnuradio_core_general.head(*args, **kwargs)
class gr_skiphead_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_skiphead)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_skiphead_sptr
        __init__(self,  p) -> gr_skiphead_sptr
        """
        this = _gnuradio_core_general.new_gr_skiphead_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_skiphead_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_skiphead_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_skiphead_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_skiphead_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_skiphead_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_skiphead_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_skiphead_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_skiphead_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_skiphead_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_skiphead_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_skiphead_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_skiphead_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_skiphead_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_skiphead_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_skiphead_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_skiphead_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_skiphead_sptr_check_topology(self, *args, **kwargs)

gr_skiphead_sptr_swigregister = _gnuradio_core_general.gr_skiphead_sptr_swigregister
gr_skiphead_sptr_swigregister(gr_skiphead_sptr)

gr_skiphead_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def skiphead(*args, **kwargs):
  """skiphead(size_t itemsize, uint64_t nitems_to_skip) -> gr_skiphead_sptr"""
  return _gnuradio_core_general.skiphead(*args, **kwargs)
class gr_quadrature_demod_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_quadrature_demod_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_quadrature_demod_cf_sptr
        __init__(self,  p) -> gr_quadrature_demod_cf_sptr
        """
        this = _gnuradio_core_general.new_gr_quadrature_demod_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_quadrature_demod_cf_sptr
    __del__ = lambda self : None;
    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_set_gain(self, *args, **kwargs)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_gain(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_quadrature_demod_cf_sptr_check_topology(self, *args, **kwargs)

gr_quadrature_demod_cf_sptr_swigregister = _gnuradio_core_general.gr_quadrature_demod_cf_sptr_swigregister
gr_quadrature_demod_cf_sptr_swigregister(gr_quadrature_demod_cf_sptr)

gr_quadrature_demod_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def quadrature_demod_cf(*args, **kwargs):
  """quadrature_demod_cf(float gain) -> gr_quadrature_demod_cf_sptr"""
  return _gnuradio_core_general.quadrature_demod_cf(*args, **kwargs)

def remez(*args, **kwargs):
  """
    remez(int order, __dummy_5__ bands, __dummy_5__ ampl, __dummy_5__ error_weight, 
        string filter_type = "bandpass", 
        int grid_density = 16) -> __dummy_5__
    """
  return _gnuradio_core_general.remez(*args, **kwargs)
class gr_float_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_float_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_float_to_complex_sptr
        __init__(self,  p) -> gr_float_to_complex_sptr
        """
        this = _gnuradio_core_general.new_gr_float_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_float_to_complex_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_float_to_complex_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_float_to_complex_sptr_check_topology(self, *args, **kwargs)

gr_float_to_complex_sptr_swigregister = _gnuradio_core_general.gr_float_to_complex_sptr_swigregister
gr_float_to_complex_sptr_swigregister(gr_float_to_complex_sptr)

gr_float_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def float_to_complex(vlen = 1):
  """float_to_complex(size_t vlen = 1) -> gr_float_to_complex_sptr"""
  return _gnuradio_core_general.float_to_complex(vlen)
class gr_check_counting_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_check_counting_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_check_counting_s_sptr
        __init__(self,  p) -> gr_check_counting_s_sptr
        """
        this = _gnuradio_core_general.new_gr_check_counting_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_check_counting_s_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_check_counting_s_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_check_counting_s_sptr_check_topology(self, *args, **kwargs)

gr_check_counting_s_sptr_swigregister = _gnuradio_core_general.gr_check_counting_s_sptr_swigregister
gr_check_counting_s_sptr_swigregister(gr_check_counting_s_sptr)

gr_check_counting_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def check_counting_s(do_32bit = False):
  """check_counting_s(bool do_32bit = False) -> gr_check_counting_s_sptr"""
  return _gnuradio_core_general.check_counting_s(do_32bit)
class gr_lfsr_32k_source_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_lfsr_32k_source_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_lfsr_32k_source_s_sptr
        __init__(self,  p) -> gr_lfsr_32k_source_s_sptr
        """
        this = _gnuradio_core_general.new_gr_lfsr_32k_source_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_lfsr_32k_source_s_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_check_topology(self, *args, **kwargs)

gr_lfsr_32k_source_s_sptr_swigregister = _gnuradio_core_general.gr_lfsr_32k_source_s_sptr_swigregister
gr_lfsr_32k_source_s_sptr_swigregister(gr_lfsr_32k_source_s_sptr)

gr_lfsr_32k_source_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def lfsr_32k_source_s():
  """lfsr_32k_source_s() -> gr_lfsr_32k_source_s_sptr"""
  return _gnuradio_core_general.lfsr_32k_source_s()
class gr_check_lfsr_32k_s_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_check_lfsr_32k_s)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_check_lfsr_32k_s_sptr
        __init__(self,  p) -> gr_check_lfsr_32k_s_sptr
        """
        this = _gnuradio_core_general.new_gr_check_lfsr_32k_s_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_check_lfsr_32k_s_sptr
    __del__ = lambda self : None;
    def ntotal(self):
        """ntotal(self) -> long"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_ntotal(self)

    def nright(self):
        """nright(self) -> long"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_nright(self)

    def runlength(self):
        """runlength(self) -> long"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_runlength(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_check_topology(self, *args, **kwargs)

gr_check_lfsr_32k_s_sptr_swigregister = _gnuradio_core_general.gr_check_lfsr_32k_s_sptr_swigregister
gr_check_lfsr_32k_s_sptr_swigregister(gr_check_lfsr_32k_s_sptr)

gr_check_lfsr_32k_s_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def check_lfsr_32k_s():
  """check_lfsr_32k_s() -> gr_check_lfsr_32k_s_sptr"""
  return _gnuradio_core_general.check_lfsr_32k_s()
class gr_stream_to_vector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_stream_to_vector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_stream_to_vector_sptr
        __init__(self,  p) -> gr_stream_to_vector_sptr
        """
        this = _gnuradio_core_general.new_gr_stream_to_vector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_stream_to_vector_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_stream_to_vector_sptr_check_topology(self, *args, **kwargs)

gr_stream_to_vector_sptr_swigregister = _gnuradio_core_general.gr_stream_to_vector_sptr_swigregister
gr_stream_to_vector_sptr_swigregister(gr_stream_to_vector_sptr)

gr_stream_to_vector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def stream_to_vector(*args, **kwargs):
  """stream_to_vector(size_t itemsize, size_t nitems_per_block) -> gr_stream_to_vector_sptr"""
  return _gnuradio_core_general.stream_to_vector(*args, **kwargs)
class gr_vector_to_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_vector_to_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_vector_to_stream_sptr
        __init__(self,  p) -> gr_vector_to_stream_sptr
        """
        this = _gnuradio_core_general.new_gr_vector_to_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_vector_to_stream_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_vector_to_stream_sptr_check_topology(self, *args, **kwargs)

gr_vector_to_stream_sptr_swigregister = _gnuradio_core_general.gr_vector_to_stream_sptr_swigregister
gr_vector_to_stream_sptr_swigregister(gr_vector_to_stream_sptr)

gr_vector_to_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def vector_to_stream(*args, **kwargs):
  """vector_to_stream(size_t itemsize, size_t nitems_per_block) -> gr_vector_to_stream_sptr"""
  return _gnuradio_core_general.vector_to_stream(*args, **kwargs)
class gr_keep_one_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_keep_one_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_keep_one_in_n_sptr
        __init__(self,  p) -> gr_keep_one_in_n_sptr
        """
        this = _gnuradio_core_general.new_gr_keep_one_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_keep_one_in_n_sptr
    __del__ = lambda self : None;
    def set_n(self, *args, **kwargs):
        """set_n(self, int n)"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_set_n(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_keep_one_in_n_sptr_check_topology(self, *args, **kwargs)

gr_keep_one_in_n_sptr_swigregister = _gnuradio_core_general.gr_keep_one_in_n_sptr_swigregister
gr_keep_one_in_n_sptr_swigregister(gr_keep_one_in_n_sptr)

gr_keep_one_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def keep_one_in_n(*args, **kwargs):
  """keep_one_in_n(size_t itemsize, int n) -> gr_keep_one_in_n_sptr"""
  return _gnuradio_core_general.keep_one_in_n(*args, **kwargs)
class gr_keep_m_in_n_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_keep_m_in_n)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_keep_m_in_n_sptr
        __init__(self,  p) -> gr_keep_m_in_n_sptr
        """
        this = _gnuradio_core_general.new_gr_keep_m_in_n_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_keep_m_in_n_sptr
    __del__ = lambda self : None;
    def set_offset(self, *args, **kwargs):
        """set_offset(self, int offset)"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_set_offset(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_keep_m_in_n_sptr_check_topology(self, *args, **kwargs)

gr_keep_m_in_n_sptr_swigregister = _gnuradio_core_general.gr_keep_m_in_n_sptr_swigregister
gr_keep_m_in_n_sptr_swigregister(gr_keep_m_in_n_sptr)

gr_keep_m_in_n_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def keep_m_in_n(*args, **kwargs):
  """keep_m_in_n(size_t itemsize, int m, int n, int offset) -> gr_keep_m_in_n_sptr"""
  return _gnuradio_core_general.keep_m_in_n(*args, **kwargs)
class gr_fft_vcc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fft_vcc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fft_vcc_sptr
        __init__(self,  p) -> gr_fft_vcc_sptr
        """
        this = _gnuradio_core_general.new_gr_fft_vcc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_fft_vcc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_fft_vcc_sptr
    __del__ = lambda self : None;
    def set_window(self, *args, **kwargs):
        """set_window(self, __dummy_4__ window) -> bool"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_set_window(self, *args, **kwargs)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_nthreads(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_fft_vcc_sptr_check_topology(self, *args, **kwargs)

gr_fft_vcc_sptr_swigregister = _gnuradio_core_general.gr_fft_vcc_sptr_swigregister
gr_fft_vcc_sptr_swigregister(gr_fft_vcc_sptr)

gr_fft_vcc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fft_vcc(*args, **kwargs):
  """
    fft_vcc(int fft_size, bool forward, __dummy_4__ window, bool shift = False, 
        int nthreads = 1) -> gr_fft_vcc_sptr
    """
  return _gnuradio_core_general.fft_vcc(*args, **kwargs)
class gr_fft_vfc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fft_vfc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fft_vfc_sptr
        __init__(self,  p) -> gr_fft_vfc_sptr
        """
        this = _gnuradio_core_general.new_gr_fft_vfc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_fft_vfc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_fft_vfc_sptr
    __del__ = lambda self : None;
    def set_window(self, *args, **kwargs):
        """set_window(self, __dummy_4__ window) -> bool"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_set_window(self, *args, **kwargs)

    def set_nthreads(self, *args, **kwargs):
        """set_nthreads(self, int n)"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_set_nthreads(self, *args, **kwargs)

    def nthreads(self):
        """nthreads(self) -> int"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_nthreads(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_fft_vfc_sptr_check_topology(self, *args, **kwargs)

gr_fft_vfc_sptr_swigregister = _gnuradio_core_general.gr_fft_vfc_sptr_swigregister
gr_fft_vfc_sptr_swigregister(gr_fft_vfc_sptr)

gr_fft_vfc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fft_vfc(*args, **kwargs):
  """fft_vfc(int fft_size, bool forward, __dummy_4__ window, int nthreads = 1) -> gr_fft_vfc_sptr"""
  return _gnuradio_core_general.fft_vfc(*args, **kwargs)
class gr_float_to_int_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_float_to_int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_float_to_int_sptr
        __init__(self,  p) -> gr_float_to_int_sptr
        """
        this = _gnuradio_core_general.new_gr_float_to_int_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_float_to_int_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_float_to_int_sptr
    __del__ = lambda self : None;
    def scale(self):
        """scale(self) -> float"""
        return _gnuradio_core_general.gr_float_to_int_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _gnuradio_core_general.gr_float_to_int_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_float_to_int_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_float_to_int_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_float_to_int_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_int_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_int_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_int_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_int_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_float_to_int_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_float_to_int_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_float_to_int_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_int_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_int_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_float_to_int_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_float_to_int_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_float_to_int_sptr_check_topology(self, *args, **kwargs)

gr_float_to_int_sptr_swigregister = _gnuradio_core_general.gr_float_to_int_sptr_swigregister
gr_float_to_int_sptr_swigregister(gr_float_to_int_sptr)

gr_float_to_int_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def float_to_int(vlen = 1, scale = 1):
  """float_to_int(size_t vlen = 1, float scale = 1) -> gr_float_to_int_sptr"""
  return _gnuradio_core_general.float_to_int(vlen, scale)
class gr_float_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_float_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_float_to_short_sptr
        __init__(self,  p) -> gr_float_to_short_sptr
        """
        this = _gnuradio_core_general.new_gr_float_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_float_to_short_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_float_to_short_sptr
    __del__ = lambda self : None;
    def scale(self):
        """scale(self) -> float"""
        return _gnuradio_core_general.gr_float_to_short_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _gnuradio_core_general.gr_float_to_short_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_float_to_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_float_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_float_to_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_short_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_float_to_short_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_float_to_short_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_float_to_short_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_float_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_float_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_float_to_short_sptr_check_topology(self, *args, **kwargs)

gr_float_to_short_sptr_swigregister = _gnuradio_core_general.gr_float_to_short_sptr_swigregister
gr_float_to_short_sptr_swigregister(gr_float_to_short_sptr)

gr_float_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def float_to_short(vlen = 1, scale = 1):
  """float_to_short(size_t vlen = 1, float scale = 1) -> gr_float_to_short_sptr"""
  return _gnuradio_core_general.float_to_short(vlen, scale)
class gr_float_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_float_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_float_to_char_sptr
        __init__(self,  p) -> gr_float_to_char_sptr
        """
        this = _gnuradio_core_general.new_gr_float_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_float_to_char_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_float_to_char_sptr
    __del__ = lambda self : None;
    def scale(self):
        """scale(self) -> float"""
        return _gnuradio_core_general.gr_float_to_char_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _gnuradio_core_general.gr_float_to_char_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_float_to_char_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_float_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_float_to_char_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_char_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_char_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_float_to_char_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_float_to_char_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_float_to_char_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_float_to_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_float_to_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_float_to_char_sptr_check_topology(self, *args, **kwargs)

gr_float_to_char_sptr_swigregister = _gnuradio_core_general.gr_float_to_char_sptr_swigregister
gr_float_to_char_sptr_swigregister(gr_float_to_char_sptr)

gr_float_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def float_to_char(vlen = 1, scale = 1):
  """float_to_char(size_t vlen = 1, float scale = 1) -> gr_float_to_char_sptr"""
  return _gnuradio_core_general.float_to_char(vlen, scale)
class gr_float_to_uchar_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_float_to_uchar)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_float_to_uchar_sptr
        __init__(self,  p) -> gr_float_to_uchar_sptr
        """
        this = _gnuradio_core_general.new_gr_float_to_uchar_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_float_to_uchar_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_float_to_uchar_sptr_check_topology(self, *args, **kwargs)

gr_float_to_uchar_sptr_swigregister = _gnuradio_core_general.gr_float_to_uchar_sptr_swigregister
gr_float_to_uchar_sptr_swigregister(gr_float_to_uchar_sptr)

gr_float_to_uchar_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def float_to_uchar():
  """float_to_uchar() -> gr_float_to_uchar_sptr"""
  return _gnuradio_core_general.float_to_uchar()
class gr_short_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_short_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_short_to_float_sptr
        __init__(self,  p) -> gr_short_to_float_sptr
        """
        this = _gnuradio_core_general.new_gr_short_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_short_to_float_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_short_to_float_sptr
    __del__ = lambda self : None;
    def scale(self):
        """scale(self) -> float"""
        return _gnuradio_core_general.gr_short_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _gnuradio_core_general.gr_short_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_short_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_short_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_short_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_short_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_short_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_short_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_short_to_float_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_short_to_float_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_short_to_float_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_short_to_float_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_short_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_short_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_short_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_short_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_short_to_float_sptr_check_topology(self, *args, **kwargs)

gr_short_to_float_sptr_swigregister = _gnuradio_core_general.gr_short_to_float_sptr_swigregister
gr_short_to_float_sptr_swigregister(gr_short_to_float_sptr)

gr_short_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def short_to_float(vlen = 1, scale = 1):
  """short_to_float(size_t vlen = 1, float scale = 1) -> gr_short_to_float_sptr"""
  return _gnuradio_core_general.short_to_float(vlen, scale)
class gr_short_to_char_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_short_to_char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_short_to_char_sptr
        __init__(self,  p) -> gr_short_to_char_sptr
        """
        this = _gnuradio_core_general.new_gr_short_to_char_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_short_to_char_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_short_to_char_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_short_to_char_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_short_to_char_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_short_to_char_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_short_to_char_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_short_to_char_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_short_to_char_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_short_to_char_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_short_to_char_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_short_to_char_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_short_to_char_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_short_to_char_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_short_to_char_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_short_to_char_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_short_to_char_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_short_to_char_sptr_check_topology(self, *args, **kwargs)

gr_short_to_char_sptr_swigregister = _gnuradio_core_general.gr_short_to_char_sptr_swigregister
gr_short_to_char_sptr_swigregister(gr_short_to_char_sptr)

gr_short_to_char_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def short_to_char(vlen = 1):
  """short_to_char(size_t vlen = 1) -> gr_short_to_char_sptr"""
  return _gnuradio_core_general.short_to_char(vlen)
class gr_int_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_int_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_int_to_float_sptr
        __init__(self,  p) -> gr_int_to_float_sptr
        """
        this = _gnuradio_core_general.new_gr_int_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_int_to_float_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_int_to_float_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_int_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_int_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_int_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_int_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_int_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_int_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_int_to_float_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_int_to_float_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_int_to_float_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_int_to_float_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_int_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_int_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_int_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_int_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_int_to_float_sptr_check_topology(self, *args, **kwargs)

gr_int_to_float_sptr_swigregister = _gnuradio_core_general.gr_int_to_float_sptr_swigregister
gr_int_to_float_sptr_swigregister(gr_int_to_float_sptr)

gr_int_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def int_to_float(vlen = 1, scale = 1):
  """int_to_float(size_t vlen = 1, float scale = 1) -> gr_int_to_float_sptr"""
  return _gnuradio_core_general.int_to_float(vlen, scale)
class gr_char_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_char_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_char_to_float_sptr
        __init__(self,  p) -> gr_char_to_float_sptr
        """
        this = _gnuradio_core_general.new_gr_char_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_char_to_float_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_char_to_float_sptr
    __del__ = lambda self : None;
    def scale(self):
        """scale(self) -> float"""
        return _gnuradio_core_general.gr_char_to_float_sptr_scale(self)

    def set_scale(self, *args, **kwargs):
        """set_scale(self, float scale)"""
        return _gnuradio_core_general.gr_char_to_float_sptr_set_scale(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_char_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_char_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_char_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_char_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_char_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_char_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_char_to_float_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_char_to_float_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_char_to_float_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_char_to_float_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_char_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_char_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_char_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_char_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_char_to_float_sptr_check_topology(self, *args, **kwargs)

gr_char_to_float_sptr_swigregister = _gnuradio_core_general.gr_char_to_float_sptr_swigregister
gr_char_to_float_sptr_swigregister(gr_char_to_float_sptr)

gr_char_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def char_to_float(vlen = 1, scale = 1):
  """char_to_float(size_t vlen = 1, float scale = 1) -> gr_char_to_float_sptr"""
  return _gnuradio_core_general.char_to_float(vlen, scale)
class gr_char_to_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_char_to_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_char_to_short_sptr
        __init__(self,  p) -> gr_char_to_short_sptr
        """
        this = _gnuradio_core_general.new_gr_char_to_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_char_to_short_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_char_to_short_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_char_to_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_char_to_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_char_to_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_char_to_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_char_to_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_char_to_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_char_to_short_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_char_to_short_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_char_to_short_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_char_to_short_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_char_to_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_char_to_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_char_to_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_char_to_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_char_to_short_sptr_check_topology(self, *args, **kwargs)

gr_char_to_short_sptr_swigregister = _gnuradio_core_general.gr_char_to_short_sptr_swigregister
gr_char_to_short_sptr_swigregister(gr_char_to_short_sptr)

gr_char_to_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def char_to_short(vlen = 1):
  """char_to_short(size_t vlen = 1) -> gr_char_to_short_sptr"""
  return _gnuradio_core_general.char_to_short(vlen)
class gr_uchar_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_uchar_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_uchar_to_float_sptr
        __init__(self,  p) -> gr_uchar_to_float_sptr
        """
        this = _gnuradio_core_general.new_gr_uchar_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_uchar_to_float_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_uchar_to_float_sptr_check_topology(self, *args, **kwargs)

gr_uchar_to_float_sptr_swigregister = _gnuradio_core_general.gr_uchar_to_float_sptr_swigregister
gr_uchar_to_float_sptr_swigregister(gr_uchar_to_float_sptr)

gr_uchar_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def uchar_to_float():
  """uchar_to_float() -> gr_uchar_to_float_sptr"""
  return _gnuradio_core_general.uchar_to_float()
class gr_frequency_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_frequency_modulator_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_frequency_modulator_fc_sptr
        __init__(self,  p) -> gr_frequency_modulator_fc_sptr
        """
        this = _gnuradio_core_general.new_gr_frequency_modulator_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_frequency_modulator_fc_sptr
    __del__ = lambda self : None;
    def set_sensitivity(self, *args, **kwargs):
        """set_sensitivity(self, float sens)"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_set_sensitivity(self, *args, **kwargs)

    def sensitivity(self):
        """sensitivity(self) -> float"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_sensitivity(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_frequency_modulator_fc_sptr_check_topology(self, *args, **kwargs)

gr_frequency_modulator_fc_sptr_swigregister = _gnuradio_core_general.gr_frequency_modulator_fc_sptr_swigregister
gr_frequency_modulator_fc_sptr_swigregister(gr_frequency_modulator_fc_sptr)

gr_frequency_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def frequency_modulator_fc(*args, **kwargs):
  """frequency_modulator_fc(double sensitivity) -> gr_frequency_modulator_fc_sptr"""
  return _gnuradio_core_general.frequency_modulator_fc(*args, **kwargs)
class gr_phase_modulator_fc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_phase_modulator_fc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_phase_modulator_fc_sptr
        __init__(self,  p) -> gr_phase_modulator_fc_sptr
        """
        this = _gnuradio_core_general.new_gr_phase_modulator_fc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_phase_modulator_fc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_phase_modulator_fc_sptr_check_topology(self, *args, **kwargs)

gr_phase_modulator_fc_sptr_swigregister = _gnuradio_core_general.gr_phase_modulator_fc_sptr_swigregister
gr_phase_modulator_fc_sptr_swigregister(gr_phase_modulator_fc_sptr)

gr_phase_modulator_fc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def phase_modulator_fc(*args, **kwargs):
  """phase_modulator_fc(double sensitivity) -> gr_phase_modulator_fc_sptr"""
  return _gnuradio_core_general.phase_modulator_fc(*args, **kwargs)
class gr_bytes_to_syms_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_bytes_to_syms)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_bytes_to_syms_sptr
        __init__(self,  p) -> gr_bytes_to_syms_sptr
        """
        this = _gnuradio_core_general.new_gr_bytes_to_syms_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_bytes_to_syms_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_bytes_to_syms_sptr_check_topology(self, *args, **kwargs)

gr_bytes_to_syms_sptr_swigregister = _gnuradio_core_general.gr_bytes_to_syms_sptr_swigregister
gr_bytes_to_syms_sptr_swigregister(gr_bytes_to_syms_sptr)

gr_bytes_to_syms_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def bytes_to_syms():
  """bytes_to_syms() -> gr_bytes_to_syms_sptr"""
  return _gnuradio_core_general.bytes_to_syms()
class gr_simple_correlator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_simple_correlator)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_simple_correlator_sptr
        __init__(self,  p) -> gr_simple_correlator_sptr
        """
        this = _gnuradio_core_general.new_gr_simple_correlator_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_simple_correlator_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_simple_correlator_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_simple_correlator_sptr_check_topology(self, *args, **kwargs)

gr_simple_correlator_sptr_swigregister = _gnuradio_core_general.gr_simple_correlator_sptr_swigregister
gr_simple_correlator_sptr_swigregister(gr_simple_correlator_sptr)

gr_simple_correlator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def simple_correlator(*args, **kwargs):
  """simple_correlator(int payload_bytesize) -> gr_simple_correlator_sptr"""
  return _gnuradio_core_general.simple_correlator(*args, **kwargs)
class gr_simple_framer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_simple_framer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_simple_framer_sptr
        __init__(self,  p) -> gr_simple_framer_sptr
        """
        this = _gnuradio_core_general.new_gr_simple_framer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_simple_framer_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_simple_framer_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_simple_framer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_simple_framer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_simple_framer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_simple_framer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_simple_framer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_framer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_framer_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_simple_framer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_simple_framer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_simple_framer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_framer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_framer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_simple_framer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_simple_framer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_simple_framer_sptr_check_topology(self, *args, **kwargs)

gr_simple_framer_sptr_swigregister = _gnuradio_core_general.gr_simple_framer_sptr_swigregister
gr_simple_framer_sptr_swigregister(gr_simple_framer_sptr)

gr_simple_framer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def simple_framer(*args, **kwargs):
  """simple_framer(int payload_bytesize) -> gr_simple_framer_sptr"""
  return _gnuradio_core_general.simple_framer(*args, **kwargs)
class gr_align_on_samplenumbers_ss_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_align_on_samplenumbers_ss)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_align_on_samplenumbers_ss_sptr
        __init__(self,  p) -> gr_align_on_samplenumbers_ss_sptr
        """
        this = _gnuradio_core_general.new_gr_align_on_samplenumbers_ss_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_align_on_samplenumbers_ss_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_check_topology(self, *args, **kwargs)

gr_align_on_samplenumbers_ss_sptr_swigregister = _gnuradio_core_general.gr_align_on_samplenumbers_ss_sptr_swigregister
gr_align_on_samplenumbers_ss_sptr_swigregister(gr_align_on_samplenumbers_ss_sptr)

gr_align_on_samplenumbers_ss_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def align_on_samplenumbers_ss(nchan = 2, align_interval = 128):
  """align_on_samplenumbers_ss(int nchan = 2, int align_interval = 128) -> gr_align_on_samplenumbers_ss_sptr"""
  return _gnuradio_core_general.align_on_samplenumbers_ss(nchan, align_interval)
class gr_complex_to_float_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_float_sptr
        __init__(self,  p) -> gr_complex_to_float_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_float_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_float_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_float_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_float_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_float_sptr_swigregister = _gnuradio_core_general.gr_complex_to_float_sptr_swigregister
gr_complex_to_float_sptr_swigregister(gr_complex_to_float_sptr)

gr_complex_to_float_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_float(vlen = 1):
  """complex_to_float(unsigned int vlen = 1) -> gr_complex_to_float_sptr"""
  return _gnuradio_core_general.complex_to_float(vlen)
class gr_complex_to_real_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_real)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_real_sptr
        __init__(self,  p) -> gr_complex_to_real_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_real_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_real_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_real_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_real_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_real_sptr_swigregister = _gnuradio_core_general.gr_complex_to_real_sptr_swigregister
gr_complex_to_real_sptr_swigregister(gr_complex_to_real_sptr)

gr_complex_to_real_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_real(vlen = 1):
  """complex_to_real(unsigned int vlen = 1) -> gr_complex_to_real_sptr"""
  return _gnuradio_core_general.complex_to_real(vlen)
class gr_complex_to_imag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_imag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_imag_sptr
        __init__(self,  p) -> gr_complex_to_imag_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_imag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_imag_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_imag_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_imag_sptr_swigregister = _gnuradio_core_general.gr_complex_to_imag_sptr_swigregister
gr_complex_to_imag_sptr_swigregister(gr_complex_to_imag_sptr)

gr_complex_to_imag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_imag(vlen = 1):
  """complex_to_imag(unsigned int vlen = 1) -> gr_complex_to_imag_sptr"""
  return _gnuradio_core_general.complex_to_imag(vlen)
class gr_complex_to_mag_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_mag)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_mag_sptr
        __init__(self,  p) -> gr_complex_to_mag_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_mag_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_mag_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_mag_sptr_swigregister = _gnuradio_core_general.gr_complex_to_mag_sptr_swigregister
gr_complex_to_mag_sptr_swigregister(gr_complex_to_mag_sptr)

gr_complex_to_mag_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_mag(vlen = 1):
  """complex_to_mag(unsigned int vlen = 1) -> gr_complex_to_mag_sptr"""
  return _gnuradio_core_general.complex_to_mag(vlen)
class gr_complex_to_mag_squared_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_mag_squared)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_mag_squared_sptr
        __init__(self,  p) -> gr_complex_to_mag_squared_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_mag_squared_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_mag_squared_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_mag_squared_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_mag_squared_sptr_swigregister = _gnuradio_core_general.gr_complex_to_mag_squared_sptr_swigregister
gr_complex_to_mag_squared_sptr_swigregister(gr_complex_to_mag_squared_sptr)

gr_complex_to_mag_squared_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_mag_squared(vlen = 1):
  """complex_to_mag_squared(unsigned int vlen = 1) -> gr_complex_to_mag_squared_sptr"""
  return _gnuradio_core_general.complex_to_mag_squared(vlen)
class gr_complex_to_arg_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_arg)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_arg_sptr
        __init__(self,  p) -> gr_complex_to_arg_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_arg_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_arg_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_arg_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_arg_sptr_swigregister = _gnuradio_core_general.gr_complex_to_arg_sptr_swigregister
gr_complex_to_arg_sptr_swigregister(gr_complex_to_arg_sptr)

gr_complex_to_arg_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_arg(vlen = 1):
  """complex_to_arg(unsigned int vlen = 1) -> gr_complex_to_arg_sptr"""
  return _gnuradio_core_general.complex_to_arg(vlen)
class gr_complex_to_interleaved_short_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_complex_to_interleaved_short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_complex_to_interleaved_short_sptr
        __init__(self,  p) -> gr_complex_to_interleaved_short_sptr
        """
        this = _gnuradio_core_general.new_gr_complex_to_interleaved_short_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_complex_to_interleaved_short_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_check_topology(self, *args, **kwargs)

gr_complex_to_interleaved_short_sptr_swigregister = _gnuradio_core_general.gr_complex_to_interleaved_short_sptr_swigregister
gr_complex_to_interleaved_short_sptr_swigregister(gr_complex_to_interleaved_short_sptr)

gr_complex_to_interleaved_short_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def complex_to_interleaved_short():
  """complex_to_interleaved_short() -> gr_complex_to_interleaved_short_sptr"""
  return _gnuradio_core_general.complex_to_interleaved_short()
class gr_interleaved_short_to_complex_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interleaved_short_to_complex)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interleaved_short_to_complex_sptr
        __init__(self,  p) -> gr_interleaved_short_to_complex_sptr
        """
        this = _gnuradio_core_general.new_gr_interleaved_short_to_complex_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_interleaved_short_to_complex_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_check_topology(self, *args, **kwargs)

gr_interleaved_short_to_complex_sptr_swigregister = _gnuradio_core_general.gr_interleaved_short_to_complex_sptr_swigregister
gr_interleaved_short_to_complex_sptr_swigregister(gr_interleaved_short_to_complex_sptr)

gr_interleaved_short_to_complex_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interleaved_short_to_complex():
  """interleaved_short_to_complex() -> gr_interleaved_short_to_complex_sptr"""
  return _gnuradio_core_general.interleaved_short_to_complex()
class firdes(object):
    """Proxy of C++ gr_firdes class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    WIN_HAMMING = _gnuradio_core_general.firdes_WIN_HAMMING
    WIN_HANN = _gnuradio_core_general.firdes_WIN_HANN
    WIN_BLACKMAN = _gnuradio_core_general.firdes_WIN_BLACKMAN
    WIN_RECTANGULAR = _gnuradio_core_general.firdes_WIN_RECTANGULAR
    WIN_KAISER = _gnuradio_core_general.firdes_WIN_KAISER
    WIN_BLACKMAN_hARRIS = _gnuradio_core_general.firdes_WIN_BLACKMAN_hARRIS
    def low_pass(*args, **kwargs):
        """
        low_pass(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_low_pass(*args, **kwargs)

    low_pass = staticmethod(low_pass)
    def low_pass_2(*args, **kwargs):
        """
        low_pass_2(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, double attenuation_dB, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_low_pass_2(*args, **kwargs)

    low_pass_2 = staticmethod(low_pass_2)
    def high_pass(*args, **kwargs):
        """
        high_pass(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_high_pass(*args, **kwargs)

    high_pass = staticmethod(high_pass)
    def high_pass_2(*args, **kwargs):
        """
        high_pass_2(double gain, double sampling_freq, double cutoff_freq, 
            double transition_width, double attenuation_dB, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_high_pass_2(*args, **kwargs)

    high_pass_2 = staticmethod(high_pass_2)
    def band_pass(*args, **kwargs):
        """
        band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_band_pass(*args, **kwargs)

    band_pass = staticmethod(band_pass)
    def band_pass_2(*args, **kwargs):
        """
        band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_band_pass_2(*args, **kwargs)

    band_pass_2 = staticmethod(band_pass_2)
    def complex_band_pass(*args, **kwargs):
        """
        complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
        """
        return _gnuradio_core_general.firdes_complex_band_pass(*args, **kwargs)

    complex_band_pass = staticmethod(complex_band_pass)
    def complex_band_pass_2(*args, **kwargs):
        """
        complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
        """
        return _gnuradio_core_general.firdes_complex_band_pass_2(*args, **kwargs)

    complex_band_pass_2 = staticmethod(complex_band_pass_2)
    def band_reject(*args, **kwargs):
        """
        band_reject(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_band_reject(*args, **kwargs)

    band_reject = staticmethod(band_reject)
    def band_reject_2(*args, **kwargs):
        """
        band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, 
            double high_cutoff_freq, double transition_width, 
            double attenuation_dB, win_type window = WIN_HAMMING, 
            double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_band_reject_2(*args, **kwargs)

    band_reject_2 = staticmethod(band_reject_2)
    def hilbert(*args, **kwargs):
        """
        hilbert(unsigned int ntaps = 19, win_type windowtype = WIN_RECTANGULAR, 
            double beta = 6.76) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_hilbert(*args, **kwargs)

    hilbert = staticmethod(hilbert)
    def root_raised_cosine(*args, **kwargs):
        """
        root_raised_cosine(double gain, double sampling_freq, double symbol_rate, 
            double alpha, int ntaps) -> __dummy_4__
        """
        return _gnuradio_core_general.firdes_root_raised_cosine(*args, **kwargs)

    root_raised_cosine = staticmethod(root_raised_cosine)
    def gaussian(*args, **kwargs):
        """gaussian(double gain, double spb, double bt, int ntaps) -> __dummy_4__"""
        return _gnuradio_core_general.firdes_gaussian(*args, **kwargs)

    gaussian = staticmethod(gaussian)
    def window(*args, **kwargs):
        """window(win_type type, int ntaps, double beta) -> __dummy_4__"""
        return _gnuradio_core_general.firdes_window(*args, **kwargs)

    window = staticmethod(window)
    def __init__(self): 
        """__init__(self) -> firdes"""
        this = _gnuradio_core_general.new_firdes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_firdes
    __del__ = lambda self : None;
firdes_swigregister = _gnuradio_core_general.firdes_swigregister
firdes_swigregister(firdes)

def firdes_low_pass(*args, **kwargs):
  """
    firdes_low_pass(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_low_pass(*args, **kwargs)

def firdes_low_pass_2(*args, **kwargs):
  """
    firdes_low_pass_2(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, double attenuation_dB, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_low_pass_2(*args, **kwargs)

def firdes_high_pass(*args, **kwargs):
  """
    firdes_high_pass(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_high_pass(*args, **kwargs)

def firdes_high_pass_2(*args, **kwargs):
  """
    firdes_high_pass_2(double gain, double sampling_freq, double cutoff_freq, 
        double transition_width, double attenuation_dB, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_high_pass_2(*args, **kwargs)

def firdes_band_pass(*args, **kwargs):
  """
    firdes_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_band_pass(*args, **kwargs)

def firdes_band_pass_2(*args, **kwargs):
  """
    firdes_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_band_pass_2(*args, **kwargs)

def firdes_complex_band_pass(*args, **kwargs):
  """
    firdes_complex_band_pass(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
    """
  return _gnuradio_core_general.firdes_complex_band_pass(*args, **kwargs)

def firdes_complex_band_pass_2(*args, **kwargs):
  """
    firdes_complex_band_pass_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> std::vector<(gr_complex,std::allocator<(gr_complex)>)>
    """
  return _gnuradio_core_general.firdes_complex_band_pass_2(*args, **kwargs)

def firdes_band_reject(*args, **kwargs):
  """
    firdes_band_reject(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        win_type window = WIN_HAMMING, double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_band_reject(*args, **kwargs)

def firdes_band_reject_2(*args, **kwargs):
  """
    firdes_band_reject_2(double gain, double sampling_freq, double low_cutoff_freq, 
        double high_cutoff_freq, double transition_width, 
        double attenuation_dB, win_type window = WIN_HAMMING, 
        double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_band_reject_2(*args, **kwargs)

def firdes_hilbert(*args, **kwargs):
  """
    firdes_hilbert(unsigned int ntaps = 19, win_type windowtype = WIN_RECTANGULAR, 
        double beta = 6.76) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_hilbert(*args, **kwargs)

def firdes_root_raised_cosine(*args, **kwargs):
  """
    firdes_root_raised_cosine(double gain, double sampling_freq, double symbol_rate, 
        double alpha, int ntaps) -> __dummy_4__
    """
  return _gnuradio_core_general.firdes_root_raised_cosine(*args, **kwargs)

def firdes_gaussian(*args, **kwargs):
  """firdes_gaussian(double gain, double spb, double bt, int ntaps) -> __dummy_4__"""
  return _gnuradio_core_general.firdes_gaussian(*args, **kwargs)

def firdes_window(*args, **kwargs):
  """firdes_window(win_type type, int ntaps, double beta) -> __dummy_4__"""
  return _gnuradio_core_general.firdes_window(*args, **kwargs)

class gr_interleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_interleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_interleave_sptr
        __init__(self,  p) -> gr_interleave_sptr
        """
        this = _gnuradio_core_general.new_gr_interleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_interleave_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_interleave_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_interleave_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_interleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_interleave_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_interleave_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_interleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_interleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_interleave_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_interleave_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_interleave_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_interleave_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_interleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_interleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_interleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_interleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_interleave_sptr_check_topology(self, *args, **kwargs)

gr_interleave_sptr_swigregister = _gnuradio_core_general.gr_interleave_sptr_swigregister
gr_interleave_sptr_swigregister(gr_interleave_sptr)

gr_interleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interleave(*args, **kwargs):
  """interleave(size_t itemsize) -> gr_interleave_sptr"""
  return _gnuradio_core_general.interleave(*args, **kwargs)
class gr_deinterleave_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_deinterleave)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_deinterleave_sptr
        __init__(self,  p) -> gr_deinterleave_sptr
        """
        this = _gnuradio_core_general.new_gr_deinterleave_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_deinterleave_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_deinterleave_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_deinterleave_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_deinterleave_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_deinterleave_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_deinterleave_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_deinterleave_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_deinterleave_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_deinterleave_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_deinterleave_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_deinterleave_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_deinterleave_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_deinterleave_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_deinterleave_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_deinterleave_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_deinterleave_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_deinterleave_sptr_check_topology(self, *args, **kwargs)

gr_deinterleave_sptr_swigregister = _gnuradio_core_general.gr_deinterleave_sptr_swigregister
gr_deinterleave_sptr_swigregister(gr_deinterleave_sptr)

gr_deinterleave_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def deinterleave(*args, **kwargs):
  """deinterleave(size_t itemsize) -> gr_deinterleave_sptr"""
  return _gnuradio_core_general.deinterleave(*args, **kwargs)
class gr_delay_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_delay)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_delay_sptr
        __init__(self,  p) -> gr_delay_sptr
        """
        this = _gnuradio_core_general.new_gr_delay_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_delay_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_delay_sptr
    __del__ = lambda self : None;
    def delay(self):
        """delay(self) -> int"""
        return _gnuradio_core_general.gr_delay_sptr_delay(self)

    def set_delay(self, *args, **kwargs):
        """set_delay(self, int delay)"""
        return _gnuradio_core_general.gr_delay_sptr_set_delay(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_delay_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_delay_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_delay_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_delay_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_delay_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_delay_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_delay_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_delay_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_delay_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_delay_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_delay_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_delay_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_delay_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_delay_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_delay_sptr_check_topology(self, *args, **kwargs)

gr_delay_sptr_swigregister = _gnuradio_core_general.gr_delay_sptr_swigregister
gr_delay_sptr_swigregister(gr_delay_sptr)

gr_delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def delay(*args, **kwargs):
  """delay(size_t itemsize, int delay) -> gr_delay_sptr"""
  return _gnuradio_core_general.delay(*args, **kwargs)
class gr_simple_squelch_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_simple_squelch_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_simple_squelch_cc_sptr
        __init__(self,  p) -> gr_simple_squelch_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_simple_squelch_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_simple_squelch_cc_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_unmuted(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_threshold(self)

    def squelch_range(self):
        """squelch_range(self) -> __dummy_4__"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_squelch_range(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_simple_squelch_cc_sptr_check_topology(self, *args, **kwargs)

gr_simple_squelch_cc_sptr_swigregister = _gnuradio_core_general.gr_simple_squelch_cc_sptr_swigregister
gr_simple_squelch_cc_sptr_swigregister(gr_simple_squelch_cc_sptr)

gr_simple_squelch_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def simple_squelch_cc(*args, **kwargs):
  """simple_squelch_cc(double threshold_db, double alpha = 0.0001) -> gr_simple_squelch_cc_sptr"""
  return _gnuradio_core_general.simple_squelch_cc(*args, **kwargs)
class gr_agc_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_agc_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_agc_ff_sptr
        __init__(self,  p) -> gr_agc_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_agc_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_agc_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_agc_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_agc_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_agc_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_agc_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_agc_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_agc_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_agc_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_agc_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_agc_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_agc_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_agc_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_agc_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_agc_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_agc_ff_sptr_check_topology(self, *args, **kwargs)

gr_agc_ff_sptr_swigregister = _gnuradio_core_general.gr_agc_ff_sptr_swigregister
gr_agc_ff_sptr_swigregister(gr_agc_ff_sptr)

gr_agc_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class gri_agc_ff(object):
    """Proxy of C++ gri_agc_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0): 
        """
        __init__(self, float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> gri_agc_ff
        """
        this = _gnuradio_core_general.new_gri_agc_ff(rate, reference, gain, max_gain)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_gri_agc_ff
    __del__ = lambda self : None;
gri_agc_ff_swigregister = _gnuradio_core_general.gri_agc_ff_swigregister
gri_agc_ff_swigregister(gri_agc_ff)


def agc_ff(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
  """
    agc_ff(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
        float max_gain = 0.0) -> gr_agc_ff_sptr
    """
  return _gnuradio_core_general.agc_ff(rate, reference, gain, max_gain)
class gr_agc_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_agc_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_agc_cc_sptr
        __init__(self,  p) -> gr_agc_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_agc_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_agc_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_agc_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_agc_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_agc_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_agc_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_agc_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_agc_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_agc_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_agc_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_agc_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_agc_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_agc_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_agc_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_agc_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_agc_cc_sptr_check_topology(self, *args, **kwargs)

    def rate(self):
        """rate(self) -> float"""
        return _gnuradio_core_general.gr_agc_cc_sptr_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gr_agc_cc_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gr_agc_cc_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gr_agc_cc_sptr_max_gain(self)

gr_agc_cc_sptr_swigregister = _gnuradio_core_general.gr_agc_cc_sptr_swigregister
gr_agc_cc_sptr_swigregister(gr_agc_cc_sptr)

gr_agc_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class gri_agc_cc(object):
    """Proxy of C++ gri_agc_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0): 
        """
        __init__(self, float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
            float max_gain = 0.0) -> gri_agc_cc
        """
        this = _gnuradio_core_general.new_gri_agc_cc(rate, reference, gain, max_gain)
        try: self.this.append(this)
        except: self.this = this
    def rate(self):
        """rate(self) -> float"""
        return _gnuradio_core_general.gri_agc_cc_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gri_agc_cc_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gri_agc_cc_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gri_agc_cc_max_gain(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gri_agc_cc
    __del__ = lambda self : None;
gri_agc_cc_swigregister = _gnuradio_core_general.gri_agc_cc_swigregister
gri_agc_cc_swigregister(gri_agc_cc)


def agc_cc(rate = 1e-4, reference = 1.0, gain = 1.0, max_gain = 0.0):
  """
    agc_cc(float rate = 1e-4, float reference = 1.0, float gain = 1.0, 
        float max_gain = 0.0) -> gr_agc_cc_sptr
    """
  return _gnuradio_core_general.agc_cc(rate, reference, gain, max_gain)
class gr_agc2_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_agc2_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_agc2_ff_sptr
        __init__(self,  p) -> gr_agc2_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_agc2_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_agc2_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_check_topology(self, *args, **kwargs)

    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _gnuradio_core_general.gr_agc2_ff_sptr_set_max_gain(self, *args, **kwargs)

gr_agc2_ff_sptr_swigregister = _gnuradio_core_general.gr_agc2_ff_sptr_swigregister
gr_agc2_ff_sptr_swigregister(gr_agc2_ff_sptr)

gr_agc2_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class gri_agc2_ff(object):
    """Proxy of C++ gri_agc2_ff class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0): 
        """
        __init__(self, float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> gri_agc2_ff
        """
        this = _gnuradio_core_general.new_gri_agc2_ff(attack_rate, decay_rate, reference, gain, max_gain)
        try: self.this.append(this)
        except: self.this = this
    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _gnuradio_core_general.gri_agc2_ff_attack_rate(self)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _gnuradio_core_general.gri_agc2_ff_decay_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gri_agc2_ff_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gri_agc2_ff_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gri_agc2_ff_max_gain(self)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _gnuradio_core_general.gri_agc2_ff_set_attack_rate(self, *args, **kwargs)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _gnuradio_core_general.gri_agc2_ff_set_decay_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _gnuradio_core_general.gri_agc2_ff_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _gnuradio_core_general.gri_agc2_ff_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _gnuradio_core_general.gri_agc2_ff_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _gnuradio_core_general.delete_gri_agc2_ff
    __del__ = lambda self : None;
gri_agc2_ff_swigregister = _gnuradio_core_general.gri_agc2_ff_swigregister
gri_agc2_ff_swigregister(gri_agc2_ff)


def agc2_ff(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
  """
    agc2_ff(float attack_rate = 1e-1, float decay_rate = 1e-2, 
        float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> gr_agc2_ff_sptr
    """
  return _gnuradio_core_general.agc2_ff(attack_rate, decay_rate, reference, gain, max_gain)
class gr_agc2_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_agc2_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_agc2_cc_sptr
        __init__(self,  p) -> gr_agc2_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_agc2_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_agc2_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_check_topology(self, *args, **kwargs)

    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_decay_rate(self)

    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_attack_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_max_gain(self)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_decay_rate(self, *args, **kwargs)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_attack_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _gnuradio_core_general.gr_agc2_cc_sptr_set_max_gain(self, *args, **kwargs)

gr_agc2_cc_sptr_swigregister = _gnuradio_core_general.gr_agc2_cc_sptr_swigregister
gr_agc2_cc_sptr_swigregister(gr_agc2_cc_sptr)

gr_agc2_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

class gri_agc2_cc(object):
    """Proxy of C++ gri_agc2_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0): 
        """
        __init__(self, float attack_rate = 1e-1, float decay_rate = 1e-2, 
            float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> gri_agc2_cc
        """
        this = _gnuradio_core_general.new_gri_agc2_cc(attack_rate, decay_rate, reference, gain, max_gain)
        try: self.this.append(this)
        except: self.this = this
    def decay_rate(self):
        """decay_rate(self) -> float"""
        return _gnuradio_core_general.gri_agc2_cc_decay_rate(self)

    def attack_rate(self):
        """attack_rate(self) -> float"""
        return _gnuradio_core_general.gri_agc2_cc_attack_rate(self)

    def reference(self):
        """reference(self) -> float"""
        return _gnuradio_core_general.gri_agc2_cc_reference(self)

    def gain(self):
        """gain(self) -> float"""
        return _gnuradio_core_general.gri_agc2_cc_gain(self)

    def max_gain(self):
        """max_gain(self) -> float"""
        return _gnuradio_core_general.gri_agc2_cc_max_gain(self)

    def set_decay_rate(self, *args, **kwargs):
        """set_decay_rate(self, float rate)"""
        return _gnuradio_core_general.gri_agc2_cc_set_decay_rate(self, *args, **kwargs)

    def set_attack_rate(self, *args, **kwargs):
        """set_attack_rate(self, float rate)"""
        return _gnuradio_core_general.gri_agc2_cc_set_attack_rate(self, *args, **kwargs)

    def set_reference(self, *args, **kwargs):
        """set_reference(self, float reference)"""
        return _gnuradio_core_general.gri_agc2_cc_set_reference(self, *args, **kwargs)

    def set_gain(self, *args, **kwargs):
        """set_gain(self, float gain)"""
        return _gnuradio_core_general.gri_agc2_cc_set_gain(self, *args, **kwargs)

    def set_max_gain(self, *args, **kwargs):
        """set_max_gain(self, float max_gain)"""
        return _gnuradio_core_general.gri_agc2_cc_set_max_gain(self, *args, **kwargs)

    __swig_destroy__ = _gnuradio_core_general.delete_gri_agc2_cc
    __del__ = lambda self : None;
gri_agc2_cc_swigregister = _gnuradio_core_general.gri_agc2_cc_swigregister
gri_agc2_cc_swigregister(gri_agc2_cc)


def agc2_cc(attack_rate = 1e-1, decay_rate = 1e-2, reference = 1.0, 
    gain = 1.0, max_gain = 0.0):
  """
    agc2_cc(float attack_rate = 1e-1, float decay_rate = 1e-2, 
        float reference = 1.0, float gain = 1.0, float max_gain = 0.0) -> gr_agc2_cc_sptr
    """
  return _gnuradio_core_general.agc2_cc(attack_rate, decay_rate, reference, gain, max_gain)
class gr_rms_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rms_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rms_cf_sptr
        __init__(self,  p) -> gr_rms_cf_sptr
        """
        this = _gnuradio_core_general.new_gr_rms_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_rms_cf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_rms_cf_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_rms_cf_sptr_unmuted(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_rms_cf_sptr_set_alpha(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_rms_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_rms_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_rms_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_rms_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_rms_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_rms_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_rms_cf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_rms_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_rms_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_rms_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rms_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rms_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_rms_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_rms_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_rms_cf_sptr_check_topology(self, *args, **kwargs)

gr_rms_cf_sptr_swigregister = _gnuradio_core_general.gr_rms_cf_sptr_swigregister
gr_rms_cf_sptr_swigregister(gr_rms_cf_sptr)

gr_rms_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rms_cf(alpha = 0.0001):
  """rms_cf(double alpha = 0.0001) -> gr_rms_cf_sptr"""
  return _gnuradio_core_general.rms_cf(alpha)
class gr_rms_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rms_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rms_ff_sptr
        __init__(self,  p) -> gr_rms_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_rms_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_rms_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_rms_ff_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_rms_ff_sptr_unmuted(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_rms_ff_sptr_set_alpha(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_rms_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_rms_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_rms_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_rms_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_rms_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_rms_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_rms_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_rms_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_rms_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_rms_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rms_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rms_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_rms_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_rms_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_rms_ff_sptr_check_topology(self, *args, **kwargs)

gr_rms_ff_sptr_swigregister = _gnuradio_core_general.gr_rms_ff_sptr_swigregister
gr_rms_ff_sptr_swigregister(gr_rms_ff_sptr)

gr_rms_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rms_ff(alpha = 0.0001):
  """rms_ff(double alpha = 0.0001) -> gr_rms_ff_sptr"""
  return _gnuradio_core_general.rms_ff(alpha)
class gr_nlog10_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_nlog10_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_nlog10_ff_sptr
        __init__(self,  p) -> gr_nlog10_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_nlog10_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_nlog10_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_nlog10_ff_sptr_check_topology(self, *args, **kwargs)

gr_nlog10_ff_sptr_swigregister = _gnuradio_core_general.gr_nlog10_ff_sptr_swigregister
gr_nlog10_ff_sptr_swigregister(gr_nlog10_ff_sptr)

gr_nlog10_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def nlog10_ff(n = 1.0, vlen = 1, k = 0):
  """nlog10_ff(float n = 1.0, unsigned int vlen = 1, float k = 0) -> gr_nlog10_ff_sptr"""
  return _gnuradio_core_general.nlog10_ff(n, vlen, k)
class gr_fake_channel_encoder_pp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fake_channel_encoder_pp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fake_channel_encoder_pp_sptr
        __init__(self,  p) -> gr_fake_channel_encoder_pp_sptr
        """
        this = _gnuradio_core_general.new_gr_fake_channel_encoder_pp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_fake_channel_encoder_pp_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_check_topology(self, *args, **kwargs)

gr_fake_channel_encoder_pp_sptr_swigregister = _gnuradio_core_general.gr_fake_channel_encoder_pp_sptr_swigregister
gr_fake_channel_encoder_pp_sptr_swigregister(gr_fake_channel_encoder_pp_sptr)

gr_fake_channel_encoder_pp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fake_channel_encoder_pp(*args, **kwargs):
  """fake_channel_encoder_pp(int input_vlen, int output_vlen) -> gr_fake_channel_encoder_pp_sptr"""
  return _gnuradio_core_general.fake_channel_encoder_pp(*args, **kwargs)
class gr_fake_channel_decoder_pp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fake_channel_decoder_pp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fake_channel_decoder_pp_sptr
        __init__(self,  p) -> gr_fake_channel_decoder_pp_sptr
        """
        this = _gnuradio_core_general.new_gr_fake_channel_decoder_pp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_fake_channel_decoder_pp_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_check_topology(self, *args, **kwargs)

gr_fake_channel_decoder_pp_sptr_swigregister = _gnuradio_core_general.gr_fake_channel_decoder_pp_sptr_swigregister
gr_fake_channel_decoder_pp_sptr_swigregister(gr_fake_channel_decoder_pp_sptr)

gr_fake_channel_decoder_pp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fake_channel_decoder_pp(*args, **kwargs):
  """fake_channel_decoder_pp(int input_vlen, int output_vlen) -> gr_fake_channel_decoder_pp_sptr"""
  return _gnuradio_core_general.fake_channel_decoder_pp(*args, **kwargs)
class gr_throttle_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_throttle)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_throttle_sptr
        __init__(self,  p) -> gr_throttle_sptr
        """
        this = _gnuradio_core_general.new_gr_throttle_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_throttle_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_throttle_sptr
    __del__ = lambda self : None;
    def set_sample_rate(self, *args, **kwargs):
        """set_sample_rate(self, double rate)"""
        return _gnuradio_core_general.gr_throttle_sptr_set_sample_rate(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_throttle_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_throttle_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_throttle_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_throttle_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_throttle_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_throttle_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_throttle_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_throttle_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_throttle_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_throttle_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_throttle_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_throttle_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_throttle_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_throttle_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_throttle_sptr_check_topology(self, *args, **kwargs)

gr_throttle_sptr_swigregister = _gnuradio_core_general.gr_throttle_sptr_swigregister
gr_throttle_sptr_swigregister(gr_throttle_sptr)

gr_throttle_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def throttle(*args, **kwargs):
  """throttle(size_t itemsize, double samples_per_sec) -> sptr"""
  return _gnuradio_core_general.throttle(*args, **kwargs)
class gr_transcendental_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_transcendental)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_transcendental_sptr
        __init__(self,  p) -> gr_transcendental_sptr
        """
        this = _gnuradio_core_general.new_gr_transcendental_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_transcendental_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_transcendental_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_transcendental_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_transcendental_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_transcendental_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_transcendental_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_transcendental_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_transcendental_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_transcendental_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_transcendental_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_transcendental_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_transcendental_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_transcendental_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_transcendental_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_transcendental_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_transcendental_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_transcendental_sptr_check_topology(self, *args, **kwargs)

gr_transcendental_sptr_swigregister = _gnuradio_core_general.gr_transcendental_sptr_swigregister
gr_transcendental_sptr_swigregister(gr_transcendental_sptr)

gr_transcendental_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def transcendental(*args, **kwargs):
  """transcendental(string name, string type = "float") -> sptr"""
  return _gnuradio_core_general.transcendental(*args, **kwargs)
class gr_stream_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_stream_mux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_stream_mux_sptr
        __init__(self,  p) -> gr_stream_mux_sptr
        """
        this = _gnuradio_core_general.new_gr_stream_mux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_stream_mux_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_stream_mux_sptr
    __del__ = lambda self : None;
    def general_work(self, *args, **kwargs):
        """
        general_work(self, int noutput_items, gr_vector_int ninput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int
        """
        return _gnuradio_core_general.gr_stream_mux_sptr_general_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_stream_mux_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_stream_mux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_stream_mux_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_stream_mux_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_stream_mux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_mux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_mux_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_stream_mux_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_stream_mux_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_stream_mux_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_mux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_mux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_stream_mux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_stream_mux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_stream_mux_sptr_check_topology(self, *args, **kwargs)

gr_stream_mux_sptr_swigregister = _gnuradio_core_general.gr_stream_mux_sptr_swigregister
gr_stream_mux_sptr_swigregister(gr_stream_mux_sptr)

gr_stream_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def stream_mux(*args, **kwargs):
  """stream_mux(size_t itemsize, __dummy_3__ lengths) -> gr_stream_mux_sptr"""
  return _gnuradio_core_general.stream_mux(*args, **kwargs)
class gr_stream_to_streams_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_stream_to_streams)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_stream_to_streams_sptr
        __init__(self,  p) -> gr_stream_to_streams_sptr
        """
        this = _gnuradio_core_general.new_gr_stream_to_streams_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_stream_to_streams_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_stream_to_streams_sptr_check_topology(self, *args, **kwargs)

gr_stream_to_streams_sptr_swigregister = _gnuradio_core_general.gr_stream_to_streams_sptr_swigregister
gr_stream_to_streams_sptr_swigregister(gr_stream_to_streams_sptr)

gr_stream_to_streams_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def stream_to_streams(*args, **kwargs):
  """stream_to_streams(size_t itemsize, size_t nstreams) -> gr_stream_to_streams_sptr"""
  return _gnuradio_core_general.stream_to_streams(*args, **kwargs)
class gr_streams_to_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_streams_to_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_streams_to_stream_sptr
        __init__(self,  p) -> gr_streams_to_stream_sptr
        """
        this = _gnuradio_core_general.new_gr_streams_to_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_streams_to_stream_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_streams_to_stream_sptr_check_topology(self, *args, **kwargs)

gr_streams_to_stream_sptr_swigregister = _gnuradio_core_general.gr_streams_to_stream_sptr_swigregister
gr_streams_to_stream_sptr_swigregister(gr_streams_to_stream_sptr)

gr_streams_to_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def streams_to_stream(*args, **kwargs):
  """streams_to_stream(size_t itemsize, size_t nstreams) -> gr_streams_to_stream_sptr"""
  return _gnuradio_core_general.streams_to_stream(*args, **kwargs)
class gr_streams_to_vector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_streams_to_vector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_streams_to_vector_sptr
        __init__(self,  p) -> gr_streams_to_vector_sptr
        """
        this = _gnuradio_core_general.new_gr_streams_to_vector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_streams_to_vector_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_streams_to_vector_sptr_check_topology(self, *args, **kwargs)

gr_streams_to_vector_sptr_swigregister = _gnuradio_core_general.gr_streams_to_vector_sptr_swigregister
gr_streams_to_vector_sptr_swigregister(gr_streams_to_vector_sptr)

gr_streams_to_vector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def streams_to_vector(*args, **kwargs):
  """streams_to_vector(size_t itemsize, size_t nstreams) -> gr_streams_to_vector_sptr"""
  return _gnuradio_core_general.streams_to_vector(*args, **kwargs)
class gr_vector_to_streams_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_vector_to_streams)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_vector_to_streams_sptr
        __init__(self,  p) -> gr_vector_to_streams_sptr
        """
        this = _gnuradio_core_general.new_gr_vector_to_streams_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_vector_to_streams_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_vector_to_streams_sptr_check_topology(self, *args, **kwargs)

gr_vector_to_streams_sptr_swigregister = _gnuradio_core_general.gr_vector_to_streams_sptr_swigregister
gr_vector_to_streams_sptr_swigregister(gr_vector_to_streams_sptr)

gr_vector_to_streams_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def vector_to_streams(*args, **kwargs):
  """vector_to_streams(size_t itemsize, size_t nstreams) -> gr_vector_to_streams_sptr"""
  return _gnuradio_core_general.vector_to_streams(*args, **kwargs)
class gr_conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_conjugate_cc_sptr
        __init__(self,  p) -> gr_conjugate_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_conjugate_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_conjugate_cc_sptr_check_topology(self, *args, **kwargs)

gr_conjugate_cc_sptr_swigregister = _gnuradio_core_general.gr_conjugate_cc_sptr_swigregister
gr_conjugate_cc_sptr_swigregister(gr_conjugate_cc_sptr)

gr_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def conjugate_cc():
  """conjugate_cc() -> gr_conjugate_cc_sptr"""
  return _gnuradio_core_general.conjugate_cc()
class gr_vco_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_vco_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_vco_f_sptr
        __init__(self,  p) -> gr_vco_f_sptr
        """
        this = _gnuradio_core_general.new_gr_vco_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_vco_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_vco_f_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_vco_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_vco_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_vco_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_vco_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_vco_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_vco_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_vco_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_vco_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_vco_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_vco_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vco_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vco_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_vco_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_vco_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_vco_f_sptr_check_topology(self, *args, **kwargs)

gr_vco_f_sptr_swigregister = _gnuradio_core_general.gr_vco_f_sptr_swigregister
gr_vco_f_sptr_swigregister(gr_vco_f_sptr)

gr_vco_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def vco_f(*args, **kwargs):
  """vco_f(double sampling_rate, double sensitivity, double amplitude) -> gr_vco_f_sptr"""
  return _gnuradio_core_general.vco_f(*args, **kwargs)
class gr_threshold_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_threshold_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_threshold_ff_sptr
        __init__(self,  p) -> gr_threshold_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_threshold_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_threshold_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_threshold_ff_sptr
    __del__ = lambda self : None;
    def lo(self):
        """lo(self) -> float"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_lo(self)

    def set_lo(self, *args, **kwargs):
        """set_lo(self, float lo)"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_set_lo(self, *args, **kwargs)

    def hi(self):
        """hi(self) -> float"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_hi(self)

    def set_hi(self, *args, **kwargs):
        """set_hi(self, float hi)"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_set_hi(self, *args, **kwargs)

    def last_state(self):
        """last_state(self) -> float"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_last_state(self)

    def set_last_state(self, *args, **kwargs):
        """set_last_state(self, float last_state)"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_set_last_state(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_threshold_ff_sptr_check_topology(self, *args, **kwargs)

gr_threshold_ff_sptr_swigregister = _gnuradio_core_general.gr_threshold_ff_sptr_swigregister
gr_threshold_ff_sptr_swigregister(gr_threshold_ff_sptr)

gr_threshold_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def threshold_ff(*args, **kwargs):
  """threshold_ff(float lo, float hi, float initial_state = 0) -> gr_threshold_ff_sptr"""
  return _gnuradio_core_general.threshold_ff(*args, **kwargs)
class gr_packet_sink_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_packet_sink)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_packet_sink_sptr
        __init__(self,  p) -> gr_packet_sink_sptr
        """
        this = _gnuradio_core_general.new_gr_packet_sink_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_packet_sink_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_packet_sink_sptr
    __del__ = lambda self : None;
    def carrier_sensed(self):
        """carrier_sensed(self) -> bool"""
        return _gnuradio_core_general.gr_packet_sink_sptr_carrier_sensed(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_packet_sink_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_packet_sink_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_packet_sink_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_packet_sink_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_packet_sink_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_packet_sink_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_packet_sink_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_packet_sink_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_packet_sink_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_packet_sink_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_packet_sink_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_packet_sink_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_packet_sink_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_packet_sink_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_packet_sink_sptr_check_topology(self, *args, **kwargs)

gr_packet_sink_sptr_swigregister = _gnuradio_core_general.gr_packet_sink_sptr_swigregister
gr_packet_sink_sptr_swigregister(gr_packet_sink_sptr)

gr_packet_sink_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def packet_sink(*args, **kwargs):
  """
    packet_sink(__dummy_0__ sync_vector, gr_msg_queue_sptr target_queue, 
        int threshold = -1) -> gr_packet_sink_sptr
    """
  return _gnuradio_core_general.packet_sink(*args, **kwargs)
class gr_dpll_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_dpll_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_dpll_bb_sptr
        __init__(self,  p) -> gr_dpll_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_dpll_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_dpll_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_dpll_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_dpll_bb_sptr_check_topology(self, *args, **kwargs)

gr_dpll_bb_sptr_swigregister = _gnuradio_core_general.gr_dpll_bb_sptr_swigregister
gr_dpll_bb_sptr_swigregister(gr_dpll_bb_sptr)

gr_dpll_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def dpll_bb(*args, **kwargs):
  """dpll_bb(float period, float gain) -> gr_dpll_bb_sptr"""
  return _gnuradio_core_general.dpll_bb(*args, **kwargs)
class gr_fmdet_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_fmdet_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_fmdet_cf_sptr
        __init__(self,  p) -> gr_fmdet_cf_sptr
        """
        this = _gnuradio_core_general.new_gr_fmdet_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_fmdet_cf_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_fmdet_cf_sptr_check_topology(self, *args, **kwargs)

gr_fmdet_cf_sptr_swigregister = _gnuradio_core_general.gr_fmdet_cf_sptr_swigregister
gr_fmdet_cf_sptr_swigregister(gr_fmdet_cf_sptr)

gr_fmdet_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fmdet_cf(*args, **kwargs):
  """
    fmdet_cf(float samplerate, float freq_low, float freq_high, 
        float scl) -> gr_fmdet_cf_sptr
    """
  return _gnuradio_core_general.fmdet_cf(*args, **kwargs)
class gr_pll_freqdet_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pll_freqdet_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pll_freqdet_cf_sptr
        __init__(self,  p) -> gr_pll_freqdet_cf_sptr
        """
        this = _gnuradio_core_general.new_gr_pll_freqdet_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pll_freqdet_cf_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_check_topology(self, *args, **kwargs)

    def update_gains(self):
        """update_gains(self)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_update_gains(self)

    def advance_loop(self, *args, **kwargs):
        """advance_loop(self, float error)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_advance_loop(self, *args, **kwargs)

    def phase_wrap(self):
        """phase_wrap(self)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_phase_wrap(self)

    def frequency_limit(self):
        """frequency_limit(self)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_frequency_limit(self)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_set_phase(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _gnuradio_core_general.gr_pll_freqdet_cf_sptr_get_phase(self)

gr_pll_freqdet_cf_sptr_swigregister = _gnuradio_core_general.gr_pll_freqdet_cf_sptr_swigregister
gr_pll_freqdet_cf_sptr_swigregister(gr_pll_freqdet_cf_sptr)

gr_pll_freqdet_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pll_freqdet_cf(*args, **kwargs):
  """pll_freqdet_cf(float loop_bw, float max_freq, float min_freq) -> gr_pll_freqdet_cf_sptr"""
  return _gnuradio_core_general.pll_freqdet_cf(*args, **kwargs)
class gr_pll_refout_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pll_refout_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pll_refout_cc_sptr
        __init__(self,  p) -> gr_pll_refout_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_pll_refout_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pll_refout_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_check_topology(self, *args, **kwargs)

    def update_gains(self):
        """update_gains(self)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_update_gains(self)

    def advance_loop(self, *args, **kwargs):
        """advance_loop(self, float error)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_advance_loop(self, *args, **kwargs)

    def phase_wrap(self):
        """phase_wrap(self)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_phase_wrap(self)

    def frequency_limit(self):
        """frequency_limit(self)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_frequency_limit(self)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_set_phase(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _gnuradio_core_general.gr_pll_refout_cc_sptr_get_phase(self)

gr_pll_refout_cc_sptr_swigregister = _gnuradio_core_general.gr_pll_refout_cc_sptr_swigregister
gr_pll_refout_cc_sptr_swigregister(gr_pll_refout_cc_sptr)

gr_pll_refout_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pll_refout_cc(*args, **kwargs):
  """pll_refout_cc(float loop_bw, float max_freq, float min_freq) -> gr_pll_refout_cc_sptr"""
  return _gnuradio_core_general.pll_refout_cc(*args, **kwargs)
class gr_pll_carriertracking_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pll_carriertracking_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pll_carriertracking_cc_sptr
        __init__(self,  p) -> gr_pll_carriertracking_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_pll_carriertracking_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pll_carriertracking_cc_sptr
    __del__ = lambda self : None;
    def lock_detector(self):
        """lock_detector(self) -> bool"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_lock_detector(self)

    def squelch_enable(self, *args, **kwargs):
        """squelch_enable(self, bool arg0) -> bool"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_squelch_enable(self, *args, **kwargs)

    def set_lock_threshold(self, *args, **kwargs):
        """set_lock_threshold(self, float arg0) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_lock_threshold(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_check_topology(self, *args, **kwargs)

    def update_gains(self):
        """update_gains(self)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_update_gains(self)

    def advance_loop(self, *args, **kwargs):
        """advance_loop(self, float error)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_advance_loop(self, *args, **kwargs)

    def phase_wrap(self):
        """phase_wrap(self)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_phase_wrap(self)

    def frequency_limit(self):
        """frequency_limit(self)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_frequency_limit(self)

    def set_loop_bandwidth(self, *args, **kwargs):
        """set_loop_bandwidth(self, float bw)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_loop_bandwidth(self, *args, **kwargs)

    def set_damping_factor(self, *args, **kwargs):
        """set_damping_factor(self, float df)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_damping_factor(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, float alpha)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_alpha(self, *args, **kwargs)

    def set_beta(self, *args, **kwargs):
        """set_beta(self, float beta)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_beta(self, *args, **kwargs)

    def set_frequency(self, *args, **kwargs):
        """set_frequency(self, float freq)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_frequency(self, *args, **kwargs)

    def set_phase(self, *args, **kwargs):
        """set_phase(self, float phase)"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_set_phase(self, *args, **kwargs)

    def get_loop_bandwidth(self):
        """get_loop_bandwidth(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_loop_bandwidth(self)

    def get_damping_factor(self):
        """get_damping_factor(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_damping_factor(self)

    def get_alpha(self):
        """get_alpha(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_alpha(self)

    def get_beta(self):
        """get_beta(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_beta(self)

    def get_frequency(self):
        """get_frequency(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_frequency(self)

    def get_phase(self):
        """get_phase(self) -> float"""
        return _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_get_phase(self)

gr_pll_carriertracking_cc_sptr_swigregister = _gnuradio_core_general.gr_pll_carriertracking_cc_sptr_swigregister
gr_pll_carriertracking_cc_sptr_swigregister(gr_pll_carriertracking_cc_sptr)

gr_pll_carriertracking_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pll_carriertracking_cc(*args, **kwargs):
  """pll_carriertracking_cc(float loop_bw, float max_freq, float min_freq) -> gr_pll_carriertracking_cc_sptr"""
  return _gnuradio_core_general.pll_carriertracking_cc(*args, **kwargs)
class gr_pn_correlator_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pn_correlator_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pn_correlator_cc_sptr
        __init__(self,  p) -> gr_pn_correlator_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_pn_correlator_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pn_correlator_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pn_correlator_cc_sptr_check_topology(self, *args, **kwargs)

gr_pn_correlator_cc_sptr_swigregister = _gnuradio_core_general.gr_pn_correlator_cc_sptr_swigregister
gr_pn_correlator_cc_sptr_swigregister(gr_pn_correlator_cc_sptr)

gr_pn_correlator_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pn_correlator_cc(*args, **kwargs):
  """pn_correlator_cc(int degree, int mask = 0, int seed = 1) -> gr_pn_correlator_cc_sptr"""
  return _gnuradio_core_general.pn_correlator_cc(*args, **kwargs)
class gr_probe_avg_mag_sqrd_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_probe_avg_mag_sqrd_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_probe_avg_mag_sqrd_c_sptr
        __init__(self,  p) -> gr_probe_avg_mag_sqrd_c_sptr
        """
        this = _gnuradio_core_general.new_gr_probe_avg_mag_sqrd_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_probe_avg_mag_sqrd_c_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_level(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_threshold(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_check_topology(self, *args, **kwargs)

gr_probe_avg_mag_sqrd_c_sptr_swigregister = _gnuradio_core_general.gr_probe_avg_mag_sqrd_c_sptr_swigregister
gr_probe_avg_mag_sqrd_c_sptr_swigregister(gr_probe_avg_mag_sqrd_c_sptr)

gr_probe_avg_mag_sqrd_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def probe_avg_mag_sqrd_c(*args, **kwargs):
  """probe_avg_mag_sqrd_c(double threshold_db, double alpha = 0.0001) -> gr_probe_avg_mag_sqrd_c_sptr"""
  return _gnuradio_core_general.probe_avg_mag_sqrd_c(*args, **kwargs)
class gr_probe_avg_mag_sqrd_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_probe_avg_mag_sqrd_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_probe_avg_mag_sqrd_cf_sptr
        __init__(self,  p) -> gr_probe_avg_mag_sqrd_cf_sptr
        """
        this = _gnuradio_core_general.new_gr_probe_avg_mag_sqrd_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_probe_avg_mag_sqrd_cf_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_level(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_set_threshold(self, *args, **kwargs)

    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_threshold(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_check_topology(self, *args, **kwargs)

gr_probe_avg_mag_sqrd_cf_sptr_swigregister = _gnuradio_core_general.gr_probe_avg_mag_sqrd_cf_sptr_swigregister
gr_probe_avg_mag_sqrd_cf_sptr_swigregister(gr_probe_avg_mag_sqrd_cf_sptr)

gr_probe_avg_mag_sqrd_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def probe_avg_mag_sqrd_cf(*args, **kwargs):
  """probe_avg_mag_sqrd_cf(double threshold_db, double alpha = 0.0001) -> gr_probe_avg_mag_sqrd_cf_sptr"""
  return _gnuradio_core_general.probe_avg_mag_sqrd_cf(*args, **kwargs)
class gr_probe_avg_mag_sqrd_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_probe_avg_mag_sqrd_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_probe_avg_mag_sqrd_f_sptr
        __init__(self,  p) -> gr_probe_avg_mag_sqrd_f_sptr
        """
        this = _gnuradio_core_general.new_gr_probe_avg_mag_sqrd_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_probe_avg_mag_sqrd_f_sptr
    __del__ = lambda self : None;
    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_unmuted(self)

    def level(self):
        """level(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_level(self)

    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_threshold(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_set_alpha(self, *args, **kwargs)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double decibels)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_set_threshold(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_check_topology(self, *args, **kwargs)

gr_probe_avg_mag_sqrd_f_sptr_swigregister = _gnuradio_core_general.gr_probe_avg_mag_sqrd_f_sptr_swigregister
gr_probe_avg_mag_sqrd_f_sptr_swigregister(gr_probe_avg_mag_sqrd_f_sptr)

gr_probe_avg_mag_sqrd_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def probe_avg_mag_sqrd_f(*args, **kwargs):
  """probe_avg_mag_sqrd_f(double threshold_db, double alpha = 0.0001) -> gr_probe_avg_mag_sqrd_f_sptr"""
  return _gnuradio_core_general.probe_avg_mag_sqrd_f(*args, **kwargs)
class gr_regenerate_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_regenerate_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_regenerate_bb_sptr
        __init__(self,  p) -> gr_regenerate_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_regenerate_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_regenerate_bb_sptr
    __del__ = lambda self : None;
    def set_max_regen(self, *args, **kwargs):
        """set_max_regen(self, unsigned int regen)"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_set_max_regen(self, *args, **kwargs)

    def set_period(self, *args, **kwargs):
        """set_period(self, int period)"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_set_period(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_regenerate_bb_sptr_check_topology(self, *args, **kwargs)

gr_regenerate_bb_sptr_swigregister = _gnuradio_core_general.gr_regenerate_bb_sptr_swigregister
gr_regenerate_bb_sptr_swigregister(gr_regenerate_bb_sptr)

gr_regenerate_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def regenerate_bb(*args, **kwargs):
  """regenerate_bb(int period, unsigned int max_regen = 500) -> gr_regenerate_bb_sptr"""
  return _gnuradio_core_general.regenerate_bb(*args, **kwargs)
class gr_pa_2x2_phase_combiner_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pa_2x2_phase_combiner)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pa_2x2_phase_combiner_sptr
        __init__(self,  p) -> gr_pa_2x2_phase_combiner_sptr
        """
        this = _gnuradio_core_general.new_gr_pa_2x2_phase_combiner_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pa_2x2_phase_combiner_sptr
    __del__ = lambda self : None;
    def theta(self):
        """theta(self) -> float"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_theta(self)

    def set_theta(self, *args, **kwargs):
        """set_theta(self, float theta)"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_set_theta(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_check_topology(self, *args, **kwargs)

gr_pa_2x2_phase_combiner_sptr_swigregister = _gnuradio_core_general.gr_pa_2x2_phase_combiner_sptr_swigregister
gr_pa_2x2_phase_combiner_sptr_swigregister(gr_pa_2x2_phase_combiner_sptr)

gr_pa_2x2_phase_combiner_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pa_2x2_phase_combiner():
  """pa_2x2_phase_combiner() -> gr_pa_2x2_phase_combiner_sptr"""
  return _gnuradio_core_general.pa_2x2_phase_combiner()
class gr_kludge_copy_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_kludge_copy)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_kludge_copy_sptr
        __init__(self,  p) -> gr_kludge_copy_sptr
        """
        this = _gnuradio_core_general.new_gr_kludge_copy_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_kludge_copy_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_kludge_copy_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_kludge_copy_sptr_check_topology(self, *args, **kwargs)

gr_kludge_copy_sptr_swigregister = _gnuradio_core_general.gr_kludge_copy_sptr_swigregister
gr_kludge_copy_sptr_swigregister(gr_kludge_copy_sptr)

gr_kludge_copy_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def kludge_copy(*args, **kwargs):
  """kludge_copy(size_t itemsize) -> gr_kludge_copy_sptr"""
  return _gnuradio_core_general.kludge_copy(*args, **kwargs)
class gr_prefs(object):
    """Proxy of C++ gr_prefs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def singleton():
        """singleton() -> gr_prefs"""
        return _gnuradio_core_general.gr_prefs_singleton()

    singleton = staticmethod(singleton)
    def set_singleton(*args, **kwargs):
        """set_singleton(gr_prefs p)"""
        return _gnuradio_core_general.gr_prefs_set_singleton(*args, **kwargs)

    set_singleton = staticmethod(set_singleton)
    __swig_destroy__ = _gnuradio_core_general.delete_gr_prefs
    __del__ = lambda self : None;
    def has_section(self, *args, **kwargs):
        """has_section(self, string section) -> bool"""
        return _gnuradio_core_general.gr_prefs_has_section(self, *args, **kwargs)

    def has_option(self, *args, **kwargs):
        """has_option(self, string section, string option) -> bool"""
        return _gnuradio_core_general.gr_prefs_has_option(self, *args, **kwargs)

    def get_string(self, *args, **kwargs):
        """get_string(self, string section, string option, string default_val) -> string"""
        return _gnuradio_core_general.gr_prefs_get_string(self, *args, **kwargs)

    def get_bool(self, *args, **kwargs):
        """get_bool(self, string section, string option, bool default_val) -> bool"""
        return _gnuradio_core_general.gr_prefs_get_bool(self, *args, **kwargs)

    def get_long(self, *args, **kwargs):
        """get_long(self, string section, string option, long default_val) -> long"""
        return _gnuradio_core_general.gr_prefs_get_long(self, *args, **kwargs)

    def get_double(self, *args, **kwargs):
        """get_double(self, string section, string option, double default_val) -> double"""
        return _gnuradio_core_general.gr_prefs_get_double(self, *args, **kwargs)

    def __init__(self): 
        """__init__(self) -> gr_prefs"""
        if self.__class__ == gr_prefs:
            _self = None
        else:
            _self = self
        this = _gnuradio_core_general.new_gr_prefs(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnuradio_core_general.disown_gr_prefs(self)
        return weakref_proxy(self)
gr_prefs_swigregister = _gnuradio_core_general.gr_prefs_swigregister
gr_prefs_swigregister(gr_prefs)

def gr_prefs_singleton():
  """gr_prefs_singleton() -> gr_prefs"""
  return _gnuradio_core_general.gr_prefs_singleton()

def gr_prefs_set_singleton(*args, **kwargs):
  """gr_prefs_set_singleton(gr_prefs p)"""
  return _gnuradio_core_general.gr_prefs_set_singleton(*args, **kwargs)


def prefix():
  """prefix() -> string"""
  return _gnuradio_core_general.prefix()

def sysconfdir():
  """sysconfdir() -> string"""
  return _gnuradio_core_general.sysconfdir()

def prefsdir():
  """prefsdir() -> string"""
  return _gnuradio_core_general.prefsdir()

def build_date():
  """build_date() -> string"""
  return _gnuradio_core_general.build_date()

def version():
  """version() -> string"""
  return _gnuradio_core_general.version()
CONSUME_NOUTPUT_ITEMS = _gnuradio_core_general.CONSUME_NOUTPUT_ITEMS
CONSUME_NOUTPUT_ITEMS_LIMIT_MAX = _gnuradio_core_general.CONSUME_NOUTPUT_ITEMS_LIMIT_MAX
CONSUME_NOUTPUT_ITEMS_LIMIT_MIN = _gnuradio_core_general.CONSUME_NOUTPUT_ITEMS_LIMIT_MIN
CONSUME_ALL_AVAILABLE = _gnuradio_core_general.CONSUME_ALL_AVAILABLE
CONSUME_ALL_AVAILABLE_LIMIT_MAX = _gnuradio_core_general.CONSUME_ALL_AVAILABLE_LIMIT_MAX
CONSUME_ZERO = _gnuradio_core_general.CONSUME_ZERO
CONSUME_ONE = _gnuradio_core_general.CONSUME_ONE
CONSUME_MINUS_ONE = _gnuradio_core_general.CONSUME_MINUS_ONE
PRODUCE_NOUTPUT_ITEMS = _gnuradio_core_general.PRODUCE_NOUTPUT_ITEMS
PRODUCE_NOUTPUT_ITEMS_LIMIT_MAX = _gnuradio_core_general.PRODUCE_NOUTPUT_ITEMS_LIMIT_MAX
PRODUCE_ZERO = _gnuradio_core_general.PRODUCE_ZERO
PRODUCE_ONE = _gnuradio_core_general.PRODUCE_ONE
PRODUCE_MINUS_ONE = _gnuradio_core_general.PRODUCE_MINUS_ONE
class gr_test_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_test)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_test_sptr
        __init__(self,  p) -> gr_test_sptr
        """
        this = _gnuradio_core_general.new_gr_test_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_test_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_test_sptr
    __del__ = lambda self : None;
    def forecast(self, *args, **kwargs):
        """forecast(self, int noutput_items, gr_vector_int ninput_items_required)"""
        return _gnuradio_core_general.gr_test_sptr_forecast(self, *args, **kwargs)

    def set_check_topology(self, *args, **kwargs):
        """set_check_topology(self, bool check_topology)"""
        return _gnuradio_core_general.gr_test_sptr_set_check_topology(self, *args, **kwargs)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_test_sptr_check_topology(self, *args, **kwargs)

    def fixed_rate_ninput_to_noutput(self, *args, **kwargs):
        """fixed_rate_ninput_to_noutput(self, int ninput) -> int"""
        return _gnuradio_core_general.gr_test_sptr_fixed_rate_ninput_to_noutput(self, *args, **kwargs)

    def fixed_rate_noutput_to_ninput(self, *args, **kwargs):
        """fixed_rate_noutput_to_ninput(self, int noutput) -> int"""
        return _gnuradio_core_general.gr_test_sptr_fixed_rate_noutput_to_ninput(self, *args, **kwargs)

    def set_fixed_rate_public(self, *args, **kwargs):
        """set_fixed_rate_public(self, bool fixed_rate)"""
        return _gnuradio_core_general.gr_test_sptr_set_fixed_rate_public(self, *args, **kwargs)

    def set_consume_type(self, *args, **kwargs):
        """set_consume_type(self, gr_consume_type_t cons_type)"""
        return _gnuradio_core_general.gr_test_sptr_set_consume_type(self, *args, **kwargs)

    def set_consume_limit(self, *args, **kwargs):
        """set_consume_limit(self, unsigned int limit)"""
        return _gnuradio_core_general.gr_test_sptr_set_consume_limit(self, *args, **kwargs)

    def set_produce_type(self, *args, **kwargs):
        """set_produce_type(self, gr_produce_type_t prod_type)"""
        return _gnuradio_core_general.gr_test_sptr_set_produce_type(self, *args, **kwargs)

    def set_produce_limit(self, *args, **kwargs):
        """set_produce_limit(self, unsigned int limit)"""
        return _gnuradio_core_general.gr_test_sptr_set_produce_limit(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_test_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_test_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_test_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_test_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_test_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_test_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_test_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_test_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_test_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_test_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_test_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_test_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_test_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_test_sptr_to_basic_block(self)

gr_test_sptr_swigregister = _gnuradio_core_general.gr_test_sptr_swigregister
gr_test_sptr_swigregister(gr_test_sptr)

gr_test_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def test(*args, **kwargs):
  """
    test(string name = std::string("gr_test"), int min_inputs = 1, 
        int max_inputs = 1, unsigned int sizeof_input_item = 1, 
        int min_outputs = 1, int max_outputs = 1, 
        unsigned int sizeof_output_item = 1, 
        unsigned int history = 1, unsigned int output_multiple = 1, 
        double relative_rate = 1.0, 
        bool fixed_rate = True, gr_consume_type_t cons_type = CONSUME_NOUTPUT_ITEMS, 
        gr_produce_type_t prod_type = PRODUCE_NOUTPUT_ITEMS) -> gr_test_sptr
    """
  return _gnuradio_core_general.test(*args, **kwargs)
class gr_unpack_k_bits_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_unpack_k_bits_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_unpack_k_bits_bb_sptr
        __init__(self,  p) -> gr_unpack_k_bits_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_unpack_k_bits_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_unpack_k_bits_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_check_topology(self, *args, **kwargs)

gr_unpack_k_bits_bb_sptr_swigregister = _gnuradio_core_general.gr_unpack_k_bits_bb_sptr_swigregister
gr_unpack_k_bits_bb_sptr_swigregister(gr_unpack_k_bits_bb_sptr)

gr_unpack_k_bits_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def unpack_k_bits_bb(*args, **kwargs):
  """unpack_k_bits_bb(int k) -> gr_unpack_k_bits_bb_sptr"""
  return _gnuradio_core_general.unpack_k_bits_bb(*args, **kwargs)
class gr_pack_k_bits_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pack_k_bits_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pack_k_bits_bb_sptr
        __init__(self,  p) -> gr_pack_k_bits_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_pack_k_bits_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pack_k_bits_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pack_k_bits_bb_sptr_check_topology(self, *args, **kwargs)

gr_pack_k_bits_bb_sptr_swigregister = _gnuradio_core_general.gr_pack_k_bits_bb_sptr_swigregister
gr_pack_k_bits_bb_sptr_swigregister(gr_pack_k_bits_bb_sptr)

gr_pack_k_bits_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pack_k_bits_bb(*args, **kwargs):
  """pack_k_bits_bb(int k) -> gr_pack_k_bits_bb_sptr"""
  return _gnuradio_core_general.pack_k_bits_bb(*args, **kwargs)
class gr_diff_phasor_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_diff_phasor_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_diff_phasor_cc_sptr
        __init__(self,  p) -> gr_diff_phasor_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_diff_phasor_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_diff_phasor_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_diff_phasor_cc_sptr_check_topology(self, *args, **kwargs)

gr_diff_phasor_cc_sptr_swigregister = _gnuradio_core_general.gr_diff_phasor_cc_sptr_swigregister
gr_diff_phasor_cc_sptr_swigregister(gr_diff_phasor_cc_sptr)

gr_diff_phasor_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_phasor_cc():
  """diff_phasor_cc() -> gr_diff_phasor_cc_sptr"""
  return _gnuradio_core_general.diff_phasor_cc()
class gr_diff_encoder_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_diff_encoder_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_diff_encoder_bb_sptr
        __init__(self,  p) -> gr_diff_encoder_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_diff_encoder_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_diff_encoder_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_diff_encoder_bb_sptr_check_topology(self, *args, **kwargs)

gr_diff_encoder_bb_sptr_swigregister = _gnuradio_core_general.gr_diff_encoder_bb_sptr_swigregister
gr_diff_encoder_bb_sptr_swigregister(gr_diff_encoder_bb_sptr)

gr_diff_encoder_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_encoder_bb(*args, **kwargs):
  """diff_encoder_bb(unsigned int modulus) -> gr_diff_encoder_bb_sptr"""
  return _gnuradio_core_general.diff_encoder_bb(*args, **kwargs)
class gr_diff_decoder_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_diff_decoder_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_diff_decoder_bb_sptr
        __init__(self,  p) -> gr_diff_decoder_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_diff_decoder_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_diff_decoder_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_diff_decoder_bb_sptr_check_topology(self, *args, **kwargs)

gr_diff_decoder_bb_sptr_swigregister = _gnuradio_core_general.gr_diff_decoder_bb_sptr_swigregister
gr_diff_decoder_bb_sptr_swigregister(gr_diff_decoder_bb_sptr)

gr_diff_decoder_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def diff_decoder_bb(*args, **kwargs):
  """diff_decoder_bb(unsigned int modulus) -> gr_diff_decoder_bb_sptr"""
  return _gnuradio_core_general.diff_decoder_bb(*args, **kwargs)
class gr_framer_sink_1_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_framer_sink_1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_framer_sink_1_sptr
        __init__(self,  p) -> gr_framer_sink_1_sptr
        """
        this = _gnuradio_core_general.new_gr_framer_sink_1_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_framer_sink_1_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_framer_sink_1_sptr_check_topology(self, *args, **kwargs)

gr_framer_sink_1_sptr_swigregister = _gnuradio_core_general.gr_framer_sink_1_sptr_swigregister
gr_framer_sink_1_sptr_swigregister(gr_framer_sink_1_sptr)

gr_framer_sink_1_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def framer_sink_1(*args, **kwargs):
  """framer_sink_1(gr_msg_queue_sptr target_queue) -> gr_framer_sink_1_sptr"""
  return _gnuradio_core_general.framer_sink_1(*args, **kwargs)
class gr_map_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_map_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_map_bb_sptr
        __init__(self,  p) -> gr_map_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_map_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_map_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_map_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_map_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_map_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_map_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_map_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_map_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_map_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_map_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_map_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_map_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_map_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_map_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_map_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_map_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_map_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_map_bb_sptr_check_topology(self, *args, **kwargs)

gr_map_bb_sptr_swigregister = _gnuradio_core_general.gr_map_bb_sptr_swigregister
gr_map_bb_sptr_swigregister(gr_map_bb_sptr)

gr_map_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def map_bb(*args, **kwargs):
  """map_bb(__dummy_3__ map) -> gr_map_bb_sptr"""
  return _gnuradio_core_general.map_bb(*args, **kwargs)
class gr_multiply_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_multiply_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_multiply_cc_sptr
        __init__(self,  p) -> gr_multiply_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_multiply_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_multiply_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_multiply_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_multiply_cc_sptr_check_topology(self, *args, **kwargs)

gr_multiply_cc_sptr_swigregister = _gnuradio_core_general.gr_multiply_cc_sptr_swigregister
gr_multiply_cc_sptr_swigregister(gr_multiply_cc_sptr)

gr_multiply_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multiply_cc(vlen = 1):
  """multiply_cc(size_t vlen = 1) -> gr_multiply_cc_sptr"""
  return _gnuradio_core_general.multiply_cc(vlen)
class gr_multiply_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_multiply_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_multiply_ff_sptr
        __init__(self,  p) -> gr_multiply_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_multiply_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_multiply_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_multiply_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_multiply_ff_sptr_check_topology(self, *args, **kwargs)

gr_multiply_ff_sptr_swigregister = _gnuradio_core_general.gr_multiply_ff_sptr_swigregister
gr_multiply_ff_sptr_swigregister(gr_multiply_ff_sptr)

gr_multiply_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multiply_ff(vlen = 1):
  """multiply_ff(size_t vlen = 1) -> gr_multiply_ff_sptr"""
  return _gnuradio_core_general.multiply_ff(vlen)
class gr_multiply_const_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_multiply_const_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_multiply_const_cc_sptr
        __init__(self,  p) -> gr_multiply_const_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_multiply_const_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_multiply_const_cc_sptr
    __del__ = lambda self : None;
    def k(self):
        """k(self) -> gr_complex"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, gr_complex k)"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_cc_sptr_check_topology(self, *args, **kwargs)

gr_multiply_const_cc_sptr_swigregister = _gnuradio_core_general.gr_multiply_const_cc_sptr_swigregister
gr_multiply_const_cc_sptr_swigregister(gr_multiply_const_cc_sptr)

gr_multiply_const_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multiply_const_cc(*args, **kwargs):
  """multiply_const_cc(gr_complex k, size_t vlen = 1) -> gr_multiply_const_cc_sptr"""
  return _gnuradio_core_general.multiply_const_cc(*args, **kwargs)
class gr_multiply_const_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_multiply_const_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_multiply_const_ff_sptr
        __init__(self,  p) -> gr_multiply_const_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_multiply_const_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_multiply_const_ff_sptr
    __del__ = lambda self : None;
    def k(self):
        """k(self) -> float"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_k(self)

    def set_k(self, *args, **kwargs):
        """set_k(self, float k)"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_set_k(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_multiply_const_ff_sptr_check_topology(self, *args, **kwargs)

gr_multiply_const_ff_sptr_swigregister = _gnuradio_core_general.gr_multiply_const_ff_sptr_swigregister
gr_multiply_const_ff_sptr_swigregister(gr_multiply_const_ff_sptr)

gr_multiply_const_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multiply_const_ff(*args, **kwargs):
  """multiply_const_ff(float k, size_t vlen = 1) -> gr_multiply_const_ff_sptr"""
  return _gnuradio_core_general.multiply_const_ff(*args, **kwargs)
class gr_multiply_conjugate_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_multiply_conjugate_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_multiply_conjugate_cc_sptr
        __init__(self,  p) -> gr_multiply_conjugate_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_multiply_conjugate_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_multiply_conjugate_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_check_topology(self, *args, **kwargs)

gr_multiply_conjugate_cc_sptr_swigregister = _gnuradio_core_general.gr_multiply_conjugate_cc_sptr_swigregister
gr_multiply_conjugate_cc_sptr_swigregister(gr_multiply_conjugate_cc_sptr)

gr_multiply_conjugate_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def multiply_conjugate_cc(vlen = 1):
  """multiply_conjugate_cc(size_t vlen = 1) -> gr_multiply_conjugate_cc_sptr"""
  return _gnuradio_core_general.multiply_conjugate_cc(vlen)
class feval_dd(object):
    """Proxy of C++ gr_py_feval_dd class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def calleval(self, *args, **kwargs):
        """calleval(self, double x) -> double"""
        return _gnuradio_core_general.feval_dd_calleval(self, *args, **kwargs)

    def __init__(self): 
        """__init__(self) -> feval_dd"""
        if self.__class__ == feval_dd:
            _self = None
        else:
            _self = self
        this = _gnuradio_core_general.new_feval_dd(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_feval_dd
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _gnuradio_core_general.disown_feval_dd(self)
        return weakref_proxy(self)
    def eval(self, *args, **kwargs):
        """eval(self, double x) -> double"""
        return _gnuradio_core_general.feval_dd_eval(self, *args, **kwargs)

feval_dd_swigregister = _gnuradio_core_general.feval_dd_swigregister
feval_dd_swigregister(feval_dd)

class feval_cc(object):
    """Proxy of C++ gr_py_feval_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def calleval(self, *args, **kwargs):
        """calleval(self, gr_complex x) -> gr_complex"""
        return _gnuradio_core_general.feval_cc_calleval(self, *args, **kwargs)

    def __init__(self): 
        """__init__(self) -> feval_cc"""
        if self.__class__ == feval_cc:
            _self = None
        else:
            _self = self
        this = _gnuradio_core_general.new_feval_cc(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_feval_cc
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _gnuradio_core_general.disown_feval_cc(self)
        return weakref_proxy(self)
    def eval(self, *args, **kwargs):
        """eval(self, gr_complex x) -> gr_complex"""
        return _gnuradio_core_general.feval_cc_eval(self, *args, **kwargs)

feval_cc_swigregister = _gnuradio_core_general.feval_cc_swigregister
feval_cc_swigregister(feval_cc)

class feval_ll(object):
    """Proxy of C++ gr_py_feval_ll class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def calleval(self, *args, **kwargs):
        """calleval(self, long x) -> long"""
        return _gnuradio_core_general.feval_ll_calleval(self, *args, **kwargs)

    def __init__(self): 
        """__init__(self) -> feval_ll"""
        if self.__class__ == feval_ll:
            _self = None
        else:
            _self = self
        this = _gnuradio_core_general.new_feval_ll(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_feval_ll
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _gnuradio_core_general.disown_feval_ll(self)
        return weakref_proxy(self)
    def eval(self, *args, **kwargs):
        """eval(self, long x) -> long"""
        return _gnuradio_core_general.feval_ll_eval(self, *args, **kwargs)

feval_ll_swigregister = _gnuradio_core_general.feval_ll_swigregister
feval_ll_swigregister(feval_ll)

class feval(object):
    """Proxy of C++ gr_py_feval class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def calleval(self):
        """calleval(self)"""
        return _gnuradio_core_general.feval_calleval(self)

    def __init__(self): 
        """__init__(self) -> feval"""
        if self.__class__ == feval:
            _self = None
        else:
            _self = self
        this = _gnuradio_core_general.new_feval(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_feval
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _gnuradio_core_general.disown_feval(self)
        return weakref_proxy(self)
    def eval(self):
        """eval(self)"""
        return _gnuradio_core_general.feval_eval(self)

feval_swigregister = _gnuradio_core_general.feval_swigregister
feval_swigregister(feval)


def feval_dd_example(*args, **kwargs):
  """feval_dd_example( f, double x) -> double"""
  return _gnuradio_core_general.feval_dd_example(*args, **kwargs)

def feval_cc_example(*args, **kwargs):
  """feval_cc_example( f, gr_complex x) -> gr_complex"""
  return _gnuradio_core_general.feval_cc_example(*args, **kwargs)

def feval_ll_example(*args, **kwargs):
  """feval_ll_example( f, long x) -> long"""
  return _gnuradio_core_general.feval_ll_example(*args, **kwargs)

def feval_example(*args, **kwargs):
  """feval_example( f)"""
  return _gnuradio_core_general.feval_example(*args, **kwargs)
class gr_pwr_squelch_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pwr_squelch_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pwr_squelch_cc_sptr
        __init__(self,  p) -> gr_pwr_squelch_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_pwr_squelch_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pwr_squelch_cc_sptr
    __del__ = lambda self : None;
    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_cc_sptr_check_topology(self, *args, **kwargs)

gr_pwr_squelch_cc_sptr_swigregister = _gnuradio_core_general.gr_pwr_squelch_cc_sptr_swigregister
gr_pwr_squelch_cc_sptr_swigregister(gr_pwr_squelch_cc_sptr)

gr_pwr_squelch_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pwr_squelch_cc(*args, **kwargs):
  """pwr_squelch_cc(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> gr_pwr_squelch_cc_sptr"""
  return _gnuradio_core_general.pwr_squelch_cc(*args, **kwargs)
class gr_pwr_squelch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_pwr_squelch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_pwr_squelch_ff_sptr
        __init__(self,  p) -> gr_pwr_squelch_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_pwr_squelch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_pwr_squelch_ff_sptr
    __del__ = lambda self : None;
    def threshold(self):
        """threshold(self) -> double"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_threshold(self)

    def set_threshold(self, *args, **kwargs):
        """set_threshold(self, double db)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_set_threshold(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_set_alpha(self, *args, **kwargs)

    def ramp(self):
        """ramp(self) -> int"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_pwr_squelch_ff_sptr_check_topology(self, *args, **kwargs)

gr_pwr_squelch_ff_sptr_swigregister = _gnuradio_core_general.gr_pwr_squelch_ff_sptr_swigregister
gr_pwr_squelch_ff_sptr_swigregister(gr_pwr_squelch_ff_sptr)

gr_pwr_squelch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pwr_squelch_ff(*args, **kwargs):
  """pwr_squelch_ff(double db, double alpha = 0.0001, int ramp = 0, bool gate = False) -> gr_pwr_squelch_ff_sptr"""
  return _gnuradio_core_general.pwr_squelch_ff(*args, **kwargs)
class gr_ctcss_squelch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_ctcss_squelch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_ctcss_squelch_ff_sptr
        __init__(self,  p) -> gr_ctcss_squelch_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_ctcss_squelch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_ctcss_squelch_ff_sptr
    __del__ = lambda self : None;
    def level(self):
        """level(self) -> float"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_level(self)

    def set_level(self, *args, **kwargs):
        """set_level(self, float level)"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_set_level(self, *args, **kwargs)

    def len(self):
        """len(self) -> int"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_len(self)

    def ramp(self):
        """ramp(self) -> int"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_ramp(self)

    def set_ramp(self, *args, **kwargs):
        """set_ramp(self, int ramp)"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_set_ramp(self, *args, **kwargs)

    def gate(self):
        """gate(self) -> bool"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_gate(self)

    def set_gate(self, *args, **kwargs):
        """set_gate(self, bool gate)"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_set_gate(self, *args, **kwargs)

    def unmuted(self):
        """unmuted(self) -> bool"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_unmuted(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_check_topology(self, *args, **kwargs)

gr_ctcss_squelch_ff_sptr_swigregister = _gnuradio_core_general.gr_ctcss_squelch_ff_sptr_swigregister
gr_ctcss_squelch_ff_sptr_swigregister(gr_ctcss_squelch_ff_sptr)

gr_ctcss_squelch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ctcss_squelch_ff(*args, **kwargs):
  """
    ctcss_squelch_ff(int rate, float freq, float level = 0.01, int len = 0, 
        int ramp = 0, bool gate = False) -> gr_ctcss_squelch_ff_sptr
    """
  return _gnuradio_core_general.ctcss_squelch_ff(*args, **kwargs)
class gr_feedforward_agc_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_feedforward_agc_cc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_feedforward_agc_cc_sptr
        __init__(self,  p) -> gr_feedforward_agc_cc_sptr
        """
        this = _gnuradio_core_general.new_gr_feedforward_agc_cc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_feedforward_agc_cc_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_feedforward_agc_cc_sptr_check_topology(self, *args, **kwargs)

gr_feedforward_agc_cc_sptr_swigregister = _gnuradio_core_general.gr_feedforward_agc_cc_sptr_swigregister
gr_feedforward_agc_cc_sptr_swigregister(gr_feedforward_agc_cc_sptr)

gr_feedforward_agc_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def feedforward_agc_cc(*args, **kwargs):
  """feedforward_agc_cc(int nsamples, float reference = 1.0) -> gr_feedforward_agc_cc_sptr"""
  return _gnuradio_core_general.feedforward_agc_cc(*args, **kwargs)
class gr_bin_statistics_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_bin_statistics_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_bin_statistics_f_sptr
        __init__(self,  p) -> gr_bin_statistics_f_sptr
        """
        this = _gnuradio_core_general.new_gr_bin_statistics_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_bin_statistics_f_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_bin_statistics_f_sptr_check_topology(self, *args, **kwargs)

gr_bin_statistics_f_sptr_swigregister = _gnuradio_core_general.gr_bin_statistics_f_sptr_swigregister
gr_bin_statistics_f_sptr_swigregister(gr_bin_statistics_f_sptr)

gr_bin_statistics_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def bin_statistics_f(*args, **kwargs):
  """
    bin_statistics_f(unsigned int vlen, gr_msg_queue_sptr msgq,  tune, size_t tune_delay, 
        size_t dwell_delay) -> gr_bin_statistics_f_sptr
    """
  return _gnuradio_core_general.bin_statistics_f(*args, **kwargs)
class gr_glfsr_source_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_glfsr_source_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_glfsr_source_b_sptr
        __init__(self,  p) -> gr_glfsr_source_b_sptr
        """
        this = _gnuradio_core_general.new_gr_glfsr_source_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_glfsr_source_b_sptr
    __del__ = lambda self : None;
    def period(self):
        """period(self) -> unsigned int"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_period(self)

    def mask(self):
        """mask(self) -> int"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_mask(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_b_sptr_check_topology(self, *args, **kwargs)

gr_glfsr_source_b_sptr_swigregister = _gnuradio_core_general.gr_glfsr_source_b_sptr_swigregister
gr_glfsr_source_b_sptr_swigregister(gr_glfsr_source_b_sptr)

gr_glfsr_source_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def glfsr_source_b(*args, **kwargs):
  """glfsr_source_b(int degree, bool repeat = True, int mask = 0, int seed = 1) -> gr_glfsr_source_b_sptr"""
  return _gnuradio_core_general.glfsr_source_b(*args, **kwargs)
class gr_glfsr_source_f_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_glfsr_source_f)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_glfsr_source_f_sptr
        __init__(self,  p) -> gr_glfsr_source_f_sptr
        """
        this = _gnuradio_core_general.new_gr_glfsr_source_f_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_glfsr_source_f_sptr
    __del__ = lambda self : None;
    def period(self):
        """period(self) -> unsigned int"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_period(self)

    def mask(self):
        """mask(self) -> int"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_mask(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_glfsr_source_f_sptr_check_topology(self, *args, **kwargs)

gr_glfsr_source_f_sptr_swigregister = _gnuradio_core_general.gr_glfsr_source_f_sptr_swigregister
gr_glfsr_source_f_sptr_swigregister(gr_glfsr_source_f_sptr)

gr_glfsr_source_f_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def glfsr_source_f(*args, **kwargs):
  """glfsr_source_f(int degree, bool repeat = True, int mask = 0, int seed = 1) -> gr_glfsr_source_f_sptr"""
  return _gnuradio_core_general.glfsr_source_f(*args, **kwargs)
class gr_peak_detector2_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_peak_detector2_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_peak_detector2_fb_sptr
        __init__(self,  p) -> gr_peak_detector2_fb_sptr
        """
        this = _gnuradio_core_general.new_gr_peak_detector2_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_peak_detector2_fb_sptr
    __del__ = lambda self : None;
    def set_threshold_factor_rise(self, *args, **kwargs):
        """set_threshold_factor_rise(self, float thr)"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """set_look_ahead(self, int look)"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, int alpha)"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """threshold_factor_rise(self) -> float"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_threshold_factor_rise(self)

    def look_ahead(self):
        """look_ahead(self) -> int"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_look_ahead(self)

    def alpha(self):
        """alpha(self) -> float"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_alpha(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_peak_detector2_fb_sptr_check_topology(self, *args, **kwargs)

gr_peak_detector2_fb_sptr_swigregister = _gnuradio_core_general.gr_peak_detector2_fb_sptr_swigregister
gr_peak_detector2_fb_sptr_swigregister(gr_peak_detector2_fb_sptr)

gr_peak_detector2_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def peak_detector2_fb(threshold_factor_rise = 7, look_ahead = 1000, alpha = 0.001):
  """
    peak_detector2_fb(float threshold_factor_rise = 7, int look_ahead = 1000, 
        float alpha = 0.001) -> gr_peak_detector2_fb_sptr
    """
  return _gnuradio_core_general.peak_detector2_fb(threshold_factor_rise, look_ahead, alpha)
class gr_repeat_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_repeat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_repeat_sptr
        __init__(self,  p) -> gr_repeat_sptr
        """
        this = _gnuradio_core_general.new_gr_repeat_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_repeat_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_repeat_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_repeat_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_repeat_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_repeat_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_repeat_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_repeat_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_repeat_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_repeat_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_repeat_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_repeat_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_repeat_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_repeat_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_repeat_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_repeat_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_repeat_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_repeat_sptr_check_topology(self, *args, **kwargs)

gr_repeat_sptr_swigregister = _gnuradio_core_general.gr_repeat_sptr_swigregister
gr_repeat_sptr_swigregister(gr_repeat_sptr)

gr_repeat_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def repeat(*args, **kwargs):
  """repeat(size_t itemsize, int interp) -> gr_repeat_sptr"""
  return _gnuradio_core_general.repeat(*args, **kwargs)
class gr_cpfsk_bc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_cpfsk_bc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_cpfsk_bc_sptr
        __init__(self,  p) -> gr_cpfsk_bc_sptr
        """
        this = _gnuradio_core_general.new_gr_cpfsk_bc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_cpfsk_bc_sptr
    __del__ = lambda self : None;
    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, float amplitude)"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_set_amplitude(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_cpfsk_bc_sptr_check_topology(self, *args, **kwargs)

gr_cpfsk_bc_sptr_swigregister = _gnuradio_core_general.gr_cpfsk_bc_sptr_swigregister
gr_cpfsk_bc_sptr_swigregister(gr_cpfsk_bc_sptr)

gr_cpfsk_bc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def cpfsk_bc(*args, **kwargs):
  """cpfsk_bc(float k, float ampl, int samples_per_sym) -> gr_cpfsk_bc_sptr"""
  return _gnuradio_core_general.cpfsk_bc(*args, **kwargs)
class gr_encode_ccsds_27_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_encode_ccsds_27_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_encode_ccsds_27_bb_sptr
        __init__(self,  p) -> gr_encode_ccsds_27_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_encode_ccsds_27_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_encode_ccsds_27_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_check_topology(self, *args, **kwargs)

gr_encode_ccsds_27_bb_sptr_swigregister = _gnuradio_core_general.gr_encode_ccsds_27_bb_sptr_swigregister
gr_encode_ccsds_27_bb_sptr_swigregister(gr_encode_ccsds_27_bb_sptr)

gr_encode_ccsds_27_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def encode_ccsds_27_bb():
  """encode_ccsds_27_bb() -> gr_encode_ccsds_27_bb_sptr"""
  return _gnuradio_core_general.encode_ccsds_27_bb()
class gr_decode_ccsds_27_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_decode_ccsds_27_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_decode_ccsds_27_fb_sptr
        __init__(self,  p) -> gr_decode_ccsds_27_fb_sptr
        """
        this = _gnuradio_core_general.new_gr_decode_ccsds_27_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_decode_ccsds_27_fb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_check_topology(self, *args, **kwargs)

gr_decode_ccsds_27_fb_sptr_swigregister = _gnuradio_core_general.gr_decode_ccsds_27_fb_sptr_swigregister
gr_decode_ccsds_27_fb_sptr_swigregister(gr_decode_ccsds_27_fb_sptr)

gr_decode_ccsds_27_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def decode_ccsds_27_fb():
  """decode_ccsds_27_fb() -> gr_decode_ccsds_27_fb_sptr"""
  return _gnuradio_core_general.decode_ccsds_27_fb()
class gr_descrambler_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_descrambler_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_descrambler_bb_sptr
        __init__(self,  p) -> gr_descrambler_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_descrambler_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_descrambler_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_descrambler_bb_sptr_check_topology(self, *args, **kwargs)

gr_descrambler_bb_sptr_swigregister = _gnuradio_core_general.gr_descrambler_bb_sptr_swigregister
gr_descrambler_bb_sptr_swigregister(gr_descrambler_bb_sptr)

gr_descrambler_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def descrambler_bb(*args, **kwargs):
  """descrambler_bb(int mask, int seed, int len) -> gr_descrambler_bb_sptr"""
  return _gnuradio_core_general.descrambler_bb(*args, **kwargs)
class gr_scrambler_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_scrambler_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_scrambler_bb_sptr
        __init__(self,  p) -> gr_scrambler_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_scrambler_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_scrambler_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_scrambler_bb_sptr_check_topology(self, *args, **kwargs)

gr_scrambler_bb_sptr_swigregister = _gnuradio_core_general.gr_scrambler_bb_sptr_swigregister
gr_scrambler_bb_sptr_swigregister(gr_scrambler_bb_sptr)

gr_scrambler_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def scrambler_bb(*args, **kwargs):
  """scrambler_bb(int mask, int seed, int len) -> gr_scrambler_bb_sptr"""
  return _gnuradio_core_general.scrambler_bb(*args, **kwargs)
class gr_probe_density_b_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_probe_density_b)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_probe_density_b_sptr
        __init__(self,  p) -> gr_probe_density_b_sptr
        """
        this = _gnuradio_core_general.new_gr_probe_density_b_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_probe_density_b_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_probe_density_b_sptr
    __del__ = lambda self : None;
    def density(self):
        """density(self) -> double"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_density(self)

    def set_alpha(self, *args, **kwargs):
        """set_alpha(self, double alpha)"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_set_alpha(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_probe_density_b_sptr_check_topology(self, *args, **kwargs)

gr_probe_density_b_sptr_swigregister = _gnuradio_core_general.gr_probe_density_b_sptr_swigregister
gr_probe_density_b_sptr_swigregister(gr_probe_density_b_sptr)

gr_probe_density_b_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def probe_density_b(*args, **kwargs):
  """probe_density_b(double alpha) -> gr_probe_density_b_sptr"""
  return _gnuradio_core_general.probe_density_b(*args, **kwargs)
class gr_rail_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_rail_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_rail_ff_sptr
        __init__(self,  p) -> gr_rail_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_rail_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_rail_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_rail_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_rail_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_rail_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_rail_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_rail_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_rail_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_rail_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_rail_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_rail_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_rail_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_rail_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rail_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_rail_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_rail_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_rail_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_rail_ff_sptr_check_topology(self, *args, **kwargs)

gr_rail_ff_sptr_swigregister = _gnuradio_core_general.gr_rail_ff_sptr_swigregister
gr_rail_ff_sptr_swigregister(gr_rail_ff_sptr)

gr_rail_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rail_ff(*args, **kwargs):
  """rail_ff(float lo, float hi) -> gr_rail_ff_sptr"""
  return _gnuradio_core_general.rail_ff(*args, **kwargs)
class gr_stretch_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_stretch_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_stretch_ff_sptr
        __init__(self,  p) -> gr_stretch_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_stretch_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_stretch_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_stretch_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_stretch_ff_sptr_check_topology(self, *args, **kwargs)

gr_stretch_ff_sptr_swigregister = _gnuradio_core_general.gr_stretch_ff_sptr_swigregister
gr_stretch_ff_sptr_swigregister(gr_stretch_ff_sptr)

gr_stretch_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def stretch_ff(*args, **kwargs):
  """stretch_ff(float lo, size_t vlen) -> gr_stretch_ff_sptr"""
  return _gnuradio_core_general.stretch_ff(*args, **kwargs)
class gr_copy_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_copy)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_copy_sptr
        __init__(self,  p) -> gr_copy_sptr
        """
        this = _gnuradio_core_general.new_gr_copy_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_copy_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_copy_sptr
    __del__ = lambda self : None;
    def set_enabled(self, *args, **kwargs):
        """set_enabled(self, bool enabled)"""
        return _gnuradio_core_general.gr_copy_sptr_set_enabled(self, *args, **kwargs)

    def enabled(self):
        """enabled(self) -> bool"""
        return _gnuradio_core_general.gr_copy_sptr_enabled(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_copy_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_copy_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_copy_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_copy_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_copy_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_copy_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_copy_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_copy_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_copy_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_copy_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_copy_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_copy_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_copy_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_copy_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_copy_sptr_check_topology(self, *args, **kwargs)

gr_copy_sptr_swigregister = _gnuradio_core_general.gr_copy_sptr_swigregister
gr_copy_sptr_swigregister(gr_copy_sptr)

gr_copy_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def copy(*args, **kwargs):
  """copy(size_t itemsize) -> gr_copy_sptr"""
  return _gnuradio_core_general.copy(*args, **kwargs)
class gr_additive_scrambler_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_additive_scrambler_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_additive_scrambler_bb_sptr
        __init__(self,  p) -> gr_additive_scrambler_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_additive_scrambler_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_additive_scrambler_bb_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_additive_scrambler_bb_sptr_check_topology(self, *args, **kwargs)

gr_additive_scrambler_bb_sptr_swigregister = _gnuradio_core_general.gr_additive_scrambler_bb_sptr_swigregister
gr_additive_scrambler_bb_sptr_swigregister(gr_additive_scrambler_bb_sptr)

gr_additive_scrambler_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def additive_scrambler_bb(*args, **kwargs):
  """additive_scrambler_bb(int mask, int seed, int len, int count = 0) -> gr_additive_scrambler_bb_sptr"""
  return _gnuradio_core_general.additive_scrambler_bb(*args, **kwargs)

def complex_vec_test0():
  """complex_vec_test0() -> __dummy_6__"""
  return _gnuradio_core_general.complex_vec_test0()

def complex_vec_test1(*args, **kwargs):
  """complex_vec_test1(__dummy_6__ input) -> __dummy_6__"""
  return _gnuradio_core_general.complex_vec_test1(*args, **kwargs)

def complex_scalar_test0():
  """complex_scalar_test0() -> std::complex<(float)>"""
  return _gnuradio_core_general.complex_scalar_test0()

def complex_scalar_test1(*args, **kwargs):
  """complex_scalar_test1(std::complex<(float)> input) -> std::complex<(float)>"""
  return _gnuradio_core_general.complex_scalar_test1(*args, **kwargs)

def int_vec_test0():
  """int_vec_test0() -> __dummy_3__"""
  return _gnuradio_core_general.int_vec_test0()

def int_vec_test1(*args, **kwargs):
  """int_vec_test1(__dummy_3__ input) -> __dummy_3__"""
  return _gnuradio_core_general.int_vec_test1(*args, **kwargs)

def float_vec_test0():
  """float_vec_test0() -> __dummy_4__"""
  return _gnuradio_core_general.float_vec_test0()

def float_vec_test1(*args, **kwargs):
  """float_vec_test1(__dummy_4__ input) -> __dummy_4__"""
  return _gnuradio_core_general.float_vec_test1(*args, **kwargs)
class gr_annotator_alltoall_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_annotator_alltoall)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_annotator_alltoall_sptr
        __init__(self,  p) -> gr_annotator_alltoall_sptr
        """
        this = _gnuradio_core_general.new_gr_annotator_alltoall_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_annotator_alltoall_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int
        """
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_work(self, *args, **kwargs)

    def data(self):
        """data(self) -> std::vector<(gr_tag_t,std::allocator<(gr_tag_t)>)>"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_data(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_annotator_alltoall_sptr_check_topology(self, *args, **kwargs)

gr_annotator_alltoall_sptr_swigregister = _gnuradio_core_general.gr_annotator_alltoall_sptr_swigregister
gr_annotator_alltoall_sptr_swigregister(gr_annotator_alltoall_sptr)

gr_annotator_alltoall_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def annotator_alltoall(*args, **kwargs):
  """annotator_alltoall(int when, size_t sizeof_stream_item) -> gr_annotator_alltoall_sptr"""
  return _gnuradio_core_general.annotator_alltoall(*args, **kwargs)
class gr_annotator_1to1_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_annotator_1to1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_annotator_1to1_sptr
        __init__(self,  p) -> gr_annotator_1to1_sptr
        """
        this = _gnuradio_core_general.new_gr_annotator_1to1_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_annotator_1to1_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int
        """
        return _gnuradio_core_general.gr_annotator_1to1_sptr_work(self, *args, **kwargs)

    def data(self):
        """data(self) -> std::vector<(gr_tag_t,std::allocator<(gr_tag_t)>)>"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_data(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_annotator_1to1_sptr_check_topology(self, *args, **kwargs)

gr_annotator_1to1_sptr_swigregister = _gnuradio_core_general.gr_annotator_1to1_sptr_swigregister
gr_annotator_1to1_sptr_swigregister(gr_annotator_1to1_sptr)

gr_annotator_1to1_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def annotator_1to1(*args, **kwargs):
  """annotator_1to1(int when, size_t sizeof_stream_item) -> gr_annotator_1to1_sptr"""
  return _gnuradio_core_general.annotator_1to1(*args, **kwargs)
class gr_burst_tagger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_burst_tagger)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_burst_tagger_sptr
        __init__(self,  p) -> gr_burst_tagger_sptr
        """
        this = _gnuradio_core_general.new_gr_burst_tagger_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_burst_tagger_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_burst_tagger_sptr
    __del__ = lambda self : None;
    def set_true_tag(self, *args, **kwargs):
        """set_true_tag(self, string key, bool value)"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_set_true_tag(self, *args, **kwargs)

    def set_false_tag(self, *args, **kwargs):
        """set_false_tag(self, string key, bool value)"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_set_false_tag(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_burst_tagger_sptr_check_topology(self, *args, **kwargs)

gr_burst_tagger_sptr_swigregister = _gnuradio_core_general.gr_burst_tagger_sptr_swigregister
gr_burst_tagger_sptr_swigregister(gr_burst_tagger_sptr)

gr_burst_tagger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def burst_tagger(*args, **kwargs):
  """burst_tagger(size_t itemsize) -> gr_burst_tagger_sptr"""
  return _gnuradio_core_general.burst_tagger(*args, **kwargs)
class cpm(object):
    """Proxy of C++ gr_cpm class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LRC = _gnuradio_core_general.cpm_LRC
    LSRC = _gnuradio_core_general.cpm_LSRC
    LREC = _gnuradio_core_general.cpm_LREC
    TFM = _gnuradio_core_general.cpm_TFM
    GAUSSIAN = _gnuradio_core_general.cpm_GAUSSIAN
    GENERIC = _gnuradio_core_general.cpm_GENERIC
    def phase_response(*args, **kwargs):
        """
        phase_response(cpm_type type, unsigned int samples_per_sym, unsigned int L, 
            double beta = 0.3) -> __dummy_4__
        """
        return _gnuradio_core_general.cpm_phase_response(*args, **kwargs)

    phase_response = staticmethod(phase_response)
    def __init__(self): 
        """__init__(self) -> cpm"""
        this = _gnuradio_core_general.new_cpm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnuradio_core_general.delete_cpm
    __del__ = lambda self : None;
cpm_swigregister = _gnuradio_core_general.cpm_swigregister
cpm_swigregister(cpm)

def cpm_phase_response(*args, **kwargs):
  """
    cpm_phase_response(cpm_type type, unsigned int samples_per_sym, unsigned int L, 
        double beta = 0.3) -> __dummy_4__
    """
  return _gnuradio_core_general.cpm_phase_response(*args, **kwargs)

class gr_correlate_access_code_tag_bb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_correlate_access_code_tag_bb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_correlate_access_code_tag_bb_sptr
        __init__(self,  p) -> gr_correlate_access_code_tag_bb_sptr
        """
        this = _gnuradio_core_general.new_gr_correlate_access_code_tag_bb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_correlate_access_code_tag_bb_sptr
    __del__ = lambda self : None;
    def set_access_code(self, *args, **kwargs):
        """set_access_code(self, string access_code) -> bool"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_set_access_code(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_check_topology(self, *args, **kwargs)

gr_correlate_access_code_tag_bb_sptr_swigregister = _gnuradio_core_general.gr_correlate_access_code_tag_bb_sptr_swigregister
gr_correlate_access_code_tag_bb_sptr_swigregister(gr_correlate_access_code_tag_bb_sptr)

gr_correlate_access_code_tag_bb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def correlate_access_code_tag_bb(*args, **kwargs):
  """correlate_access_code_tag_bb(string access_code, int threshold, string tag_name) -> gr_correlate_access_code_tag_bb_sptr"""
  return _gnuradio_core_general.correlate_access_code_tag_bb(*args, **kwargs)
class gr_add_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_add_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_add_ff_sptr
        __init__(self,  p) -> gr_add_ff_sptr
        """
        this = _gnuradio_core_general.new_gr_add_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_add_ff_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_add_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_add_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_add_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_add_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_add_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_add_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_add_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_add_ff_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_add_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_add_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_add_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_add_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_add_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_add_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_add_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_add_ff_sptr_check_topology(self, *args, **kwargs)

gr_add_ff_sptr_swigregister = _gnuradio_core_general.gr_add_ff_sptr_swigregister
gr_add_ff_sptr_swigregister(gr_add_ff_sptr)

gr_add_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def add_ff(vlen = 1):
  """add_ff(size_t vlen = 1) -> gr_add_ff_sptr"""
  return _gnuradio_core_general.add_ff(vlen)
class gr_vector_map_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr_vector_map)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> gr_vector_map_sptr
        __init__(self,  p) -> gr_vector_map_sptr
        """
        this = _gnuradio_core_general.new_gr_vector_map_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _gnuradio_core_general.gr_vector_map_sptr___deref__(self)

    __swig_destroy__ = _gnuradio_core_general.delete_gr_vector_map_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int
        """
        return _gnuradio_core_general.gr_vector_map_sptr_work(self, *args, **kwargs)

    def set_mapping(self, *args, **kwargs):
        """set_mapping(self, __dummy_15__ mapping)"""
        return _gnuradio_core_general.gr_vector_map_sptr_set_mapping(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _gnuradio_core_general.gr_vector_map_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _gnuradio_core_general.gr_vector_map_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _gnuradio_core_general.gr_vector_map_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _gnuradio_core_general.gr_vector_map_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _gnuradio_core_general.gr_vector_map_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_map_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _gnuradio_core_general.gr_vector_map_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _gnuradio_core_general.gr_vector_map_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _gnuradio_core_general.gr_vector_map_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _gnuradio_core_general.gr_vector_map_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_map_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _gnuradio_core_general.gr_vector_map_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _gnuradio_core_general.gr_vector_map_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _gnuradio_core_general.gr_vector_map_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _gnuradio_core_general.gr_vector_map_sptr_check_topology(self, *args, **kwargs)

gr_vector_map_sptr_swigregister = _gnuradio_core_general.gr_vector_map_sptr_swigregister
gr_vector_map_sptr_swigregister(gr_vector_map_sptr)

gr_vector_map_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def vector_map(*args, **kwargs):
  """vector_map(size_t item_size, __dummy_14__ in_vlens, __dummy_15__ mapping) -> gr_vector_map_sptr"""
  return _gnuradio_core_general.vector_map(*args, **kwargs)

def complexf_add_2j(*args, **kwargs):
  """complexf_add_2j(std::complex<(float)> x) -> std::complex<(float)>"""
  return _gnuradio_core_general.complexf_add_2j(*args, **kwargs)

def complexd_add_2j(*args, **kwargs):
  """complexd_add_2j(std::complex<(double)> x) -> std::complex<(double)>"""
  return _gnuradio_core_general.complexd_add_2j(*args, **kwargs)

def complexf_add_x_2j(*args, **kwargs):
  """complexf_add_x_2j(float x, std::complex<(float)> y) -> std::complex<(float)>"""
  return _gnuradio_core_general.complexf_add_x_2j(*args, **kwargs)


