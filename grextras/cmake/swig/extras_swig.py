# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_extras_swig', [dirname(__file__)])
        except ImportError:
            import _extras_swig
            return _extras_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_extras_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _extras_swig = swig_import_helper()
    del swig_import_helper
else:
    import _extras_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _extras_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _extras_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _extras_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _extras_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _extras_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _extras_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _extras_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _extras_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _extras_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _extras_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _extras_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _extras_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class block(object):
    """Proxy of C++ gnuradio::block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _extras_swig.delete_block
    __del__ = lambda self : None;
block_swigregister = _extras_swig.block_swigregister
block_swigregister(block)

class add(block):
    """Proxy of C++ gnuradio::extras::add class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    __swig_destroy__ = _extras_swig.delete_add
    __del__ = lambda self : None;
add_swigregister = _extras_swig.add_swigregister
add_swigregister(add)

def add_make_fc32_fc32(*args, **kwargs):
  """add_make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_fc32_fc32(*args, **kwargs)

def add_make_sc32_sc32(*args, **kwargs):
  """add_make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_sc32_sc32(*args, **kwargs)

def add_make_sc16_sc16(*args, **kwargs):
  """add_make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_sc16_sc16(*args, **kwargs)

def add_make_sc8_sc8(*args, **kwargs):
  """add_make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_sc8_sc8(*args, **kwargs)

def add_make_f32_f32(*args, **kwargs):
  """add_make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_f32_f32(*args, **kwargs)

def add_make_s32_s32(*args, **kwargs):
  """add_make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_s32_s32(*args, **kwargs)

def add_make_s16_s16(*args, **kwargs):
  """add_make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_s16_s16(*args, **kwargs)

def add_make_s8_s8(*args, **kwargs):
  """add_make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.add_make_s8_s8(*args, **kwargs)

class add_const(object):
    """Proxy of C++ gnuradio::extras::add_const class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32_fc32(val = 0):
        """make_fc32_fc32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_fc32_fc32(val)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(val = 0):
        """make_sc32_sc32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_sc32_sc32(val)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(val = 0):
        """make_sc16_sc16(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_sc16_sc16(val)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(val = 0):
        """make_sc8_sc8(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_sc8_sc8(val)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(val = 0):
        """make_f32_f32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_f32_f32(val)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(val = 0):
        """make_s32_s32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_s32_s32(val)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(val = 0):
        """make_s16_s16(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_s16_s16(val)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(val = 0):
        """make_s8_s8(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_make_s8_s8(val)

    make_s8_s8 = staticmethod(make_s8_s8)
    def set_const(self, *args, **kwargs):
        """set_const(self, std::complex<(double)> val)"""
        return _extras_swig.add_const_set_const(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> std::complex<(double)>"""
        return _extras_swig.add_const_get_const(self)

    __swig_destroy__ = _extras_swig.delete_add_const
    __del__ = lambda self : None;
add_const_swigregister = _extras_swig.add_const_swigregister
add_const_swigregister(add_const)

def add_const_make_fc32_fc32(val = 0):
  """add_const_make_fc32_fc32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_fc32_fc32(val)

def add_const_make_sc32_sc32(val = 0):
  """add_const_make_sc32_sc32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_sc32_sc32(val)

def add_const_make_sc16_sc16(val = 0):
  """add_const_make_sc16_sc16(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_sc16_sc16(val)

def add_const_make_sc8_sc8(val = 0):
  """add_const_make_sc8_sc8(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_sc8_sc8(val)

def add_const_make_f32_f32(val = 0):
  """add_const_make_f32_f32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_f32_f32(val)

def add_const_make_s32_s32(val = 0):
  """add_const_make_s32_s32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_s32_s32(val)

def add_const_make_s16_s16(val = 0):
  """add_const_make_s16_s16(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_s16_s16(val)

def add_const_make_s8_s8(val = 0):
  """add_const_make_s8_s8(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.add_const_make_s8_s8(val)

class add_const_v(block):
    """Proxy of C++ gnuradio::extras::add_const_v class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(__dummy_6__ vec) -> sptr"""
        return _extras_swig.add_const_v_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(__dummy_4__ vec) -> sptr"""
        return _extras_swig.add_const_v_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    def get_const(self):
        """get_const(self) -> __dummy_14__"""
        return _extras_swig.add_const_v_get_const(self)

    def set_const(self, *args, **kwargs):
        """set_const(self, __dummy_14__ val)"""
        return _extras_swig.add_const_v_set_const(self, *args, **kwargs)

    __swig_destroy__ = _extras_swig.delete_add_const_v
    __del__ = lambda self : None;
add_const_v_swigregister = _extras_swig.add_const_v_swigregister
add_const_v_swigregister(add_const_v)

def add_const_v_make_fc32_fc32(*args, **kwargs):
  """add_const_v_make_fc32_fc32(__dummy_6__ vec) -> sptr"""
  return _extras_swig.add_const_v_make_fc32_fc32(*args, **kwargs)

def add_const_v_make_sc32_sc32(*args, **kwargs):
  """add_const_v_make_sc32_sc32(std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_sc32_sc32(*args, **kwargs)

def add_const_v_make_sc16_sc16(*args, **kwargs):
  """add_const_v_make_sc16_sc16(std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_sc16_sc16(*args, **kwargs)

def add_const_v_make_sc8_sc8(*args, **kwargs):
  """add_const_v_make_sc8_sc8(std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_sc8_sc8(*args, **kwargs)

def add_const_v_make_f32_f32(*args, **kwargs):
  """add_const_v_make_f32_f32(__dummy_4__ vec) -> sptr"""
  return _extras_swig.add_const_v_make_f32_f32(*args, **kwargs)

def add_const_v_make_s32_s32(*args, **kwargs):
  """add_const_v_make_s32_s32(std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_s32_s32(*args, **kwargs)

def add_const_v_make_s16_s16(*args, **kwargs):
  """add_const_v_make_s16_s16(std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_s16_s16(*args, **kwargs)

def add_const_v_make_s8_s8(*args, **kwargs):
  """add_const_v_make_s8_s8(std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
  return _extras_swig.add_const_v_make_s8_s8(*args, **kwargs)

class divide(block):
    """Proxy of C++ gnuradio::extras::divide class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    __swig_destroy__ = _extras_swig.delete_divide
    __del__ = lambda self : None;
divide_swigregister = _extras_swig.divide_swigregister
divide_swigregister(divide)

def divide_make_fc32_fc32(*args, **kwargs):
  """divide_make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_fc32_fc32(*args, **kwargs)

def divide_make_sc32_sc32(*args, **kwargs):
  """divide_make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_sc32_sc32(*args, **kwargs)

def divide_make_sc16_sc16(*args, **kwargs):
  """divide_make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_sc16_sc16(*args, **kwargs)

def divide_make_sc8_sc8(*args, **kwargs):
  """divide_make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_sc8_sc8(*args, **kwargs)

def divide_make_f32_f32(*args, **kwargs):
  """divide_make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_f32_f32(*args, **kwargs)

def divide_make_s32_s32(*args, **kwargs):
  """divide_make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_s32_s32(*args, **kwargs)

def divide_make_s16_s16(*args, **kwargs):
  """divide_make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_s16_s16(*args, **kwargs)

def divide_make_s8_s8(*args, **kwargs):
  """divide_make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.divide_make_s8_s8(*args, **kwargs)

class multiply(block):
    """Proxy of C++ gnuradio::extras::multiply class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    __swig_destroy__ = _extras_swig.delete_multiply
    __del__ = lambda self : None;
multiply_swigregister = _extras_swig.multiply_swigregister
multiply_swigregister(multiply)

def multiply_make_fc32_fc32(*args, **kwargs):
  """multiply_make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_fc32_fc32(*args, **kwargs)

def multiply_make_sc32_sc32(*args, **kwargs):
  """multiply_make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_sc32_sc32(*args, **kwargs)

def multiply_make_sc16_sc16(*args, **kwargs):
  """multiply_make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_sc16_sc16(*args, **kwargs)

def multiply_make_sc8_sc8(*args, **kwargs):
  """multiply_make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_sc8_sc8(*args, **kwargs)

def multiply_make_f32_f32(*args, **kwargs):
  """multiply_make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_f32_f32(*args, **kwargs)

def multiply_make_s32_s32(*args, **kwargs):
  """multiply_make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_s32_s32(*args, **kwargs)

def multiply_make_s16_s16(*args, **kwargs):
  """multiply_make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_s16_s16(*args, **kwargs)

def multiply_make_s8_s8(*args, **kwargs):
  """multiply_make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.multiply_make_s8_s8(*args, **kwargs)

class multiply_const(object):
    """Proxy of C++ gnuradio::extras::multiply_const class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32_fc32(val = 0):
        """make_fc32_fc32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_fc32_fc32(val)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(val = 0):
        """make_sc32_sc32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_sc32_sc32(val)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(val = 0):
        """make_sc16_sc16(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_sc16_sc16(val)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(val = 0):
        """make_sc8_sc8(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_sc8_sc8(val)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(val = 0):
        """make_f32_f32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_f32_f32(val)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(val = 0):
        """make_s32_s32(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_s32_s32(val)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(val = 0):
        """make_s16_s16(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_s16_s16(val)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(val = 0):
        """make_s8_s8(std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_make_s8_s8(val)

    make_s8_s8 = staticmethod(make_s8_s8)
    def set_const(self, *args, **kwargs):
        """set_const(self, std::complex<(double)> val)"""
        return _extras_swig.multiply_const_set_const(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> std::complex<(double)>"""
        return _extras_swig.multiply_const_get_const(self)

    __swig_destroy__ = _extras_swig.delete_multiply_const
    __del__ = lambda self : None;
multiply_const_swigregister = _extras_swig.multiply_const_swigregister
multiply_const_swigregister(multiply_const)

def multiply_const_make_fc32_fc32(val = 0):
  """multiply_const_make_fc32_fc32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_fc32_fc32(val)

def multiply_const_make_sc32_sc32(val = 0):
  """multiply_const_make_sc32_sc32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_sc32_sc32(val)

def multiply_const_make_sc16_sc16(val = 0):
  """multiply_const_make_sc16_sc16(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_sc16_sc16(val)

def multiply_const_make_sc8_sc8(val = 0):
  """multiply_const_make_sc8_sc8(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_sc8_sc8(val)

def multiply_const_make_f32_f32(val = 0):
  """multiply_const_make_f32_f32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_f32_f32(val)

def multiply_const_make_s32_s32(val = 0):
  """multiply_const_make_s32_s32(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_s32_s32(val)

def multiply_const_make_s16_s16(val = 0):
  """multiply_const_make_s16_s16(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_s16_s16(val)

def multiply_const_make_s8_s8(val = 0):
  """multiply_const_make_s8_s8(std::complex<(double)> val = 0) -> sptr"""
  return _extras_swig.multiply_const_make_s8_s8(val)

class multiply_const_v(block):
    """Proxy of C++ gnuradio::extras::multiply_const_v class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(__dummy_6__ vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(__dummy_4__ vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    def get_const(self):
        """get_const(self) -> __dummy_14__"""
        return _extras_swig.multiply_const_v_get_const(self)

    def set_const(self, *args, **kwargs):
        """set_const(self, __dummy_14__ val)"""
        return _extras_swig.multiply_const_v_set_const(self, *args, **kwargs)

    __swig_destroy__ = _extras_swig.delete_multiply_const_v
    __del__ = lambda self : None;
multiply_const_v_swigregister = _extras_swig.multiply_const_v_swigregister
multiply_const_v_swigregister(multiply_const_v)

def multiply_const_v_make_fc32_fc32(*args, **kwargs):
  """multiply_const_v_make_fc32_fc32(__dummy_6__ vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_fc32_fc32(*args, **kwargs)

def multiply_const_v_make_sc32_sc32(*args, **kwargs):
  """multiply_const_v_make_sc32_sc32(std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_sc32_sc32(*args, **kwargs)

def multiply_const_v_make_sc16_sc16(*args, **kwargs):
  """multiply_const_v_make_sc16_sc16(std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_sc16_sc16(*args, **kwargs)

def multiply_const_v_make_sc8_sc8(*args, **kwargs):
  """multiply_const_v_make_sc8_sc8(std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_sc8_sc8(*args, **kwargs)

def multiply_const_v_make_f32_f32(*args, **kwargs):
  """multiply_const_v_make_f32_f32(__dummy_4__ vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_f32_f32(*args, **kwargs)

def multiply_const_v_make_s32_s32(*args, **kwargs):
  """multiply_const_v_make_s32_s32(std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_s32_s32(*args, **kwargs)

def multiply_const_v_make_s16_s16(*args, **kwargs):
  """multiply_const_v_make_s16_s16(std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_s16_s16(*args, **kwargs)

def multiply_const_v_make_s8_s8(*args, **kwargs):
  """multiply_const_v_make_s8_s8(std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
  return _extras_swig.multiply_const_v_make_s8_s8(*args, **kwargs)

class subtract(block):
    """Proxy of C++ gnuradio::extras::subtract class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_fc32_fc32(*args, **kwargs)

    make_fc32_fc32 = staticmethod(make_fc32_fc32)
    def make_sc32_sc32(*args, **kwargs):
        """make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_sc32_sc32(*args, **kwargs)

    make_sc32_sc32 = staticmethod(make_sc32_sc32)
    def make_sc16_sc16(*args, **kwargs):
        """make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_sc16_sc16(*args, **kwargs)

    make_sc16_sc16 = staticmethod(make_sc16_sc16)
    def make_sc8_sc8(*args, **kwargs):
        """make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_sc8_sc8(*args, **kwargs)

    make_sc8_sc8 = staticmethod(make_sc8_sc8)
    def make_f32_f32(*args, **kwargs):
        """make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_f32_f32(*args, **kwargs)

    make_f32_f32 = staticmethod(make_f32_f32)
    def make_s32_s32(*args, **kwargs):
        """make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_s32_s32(*args, **kwargs)

    make_s32_s32 = staticmethod(make_s32_s32)
    def make_s16_s16(*args, **kwargs):
        """make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_s16_s16(*args, **kwargs)

    make_s16_s16 = staticmethod(make_s16_s16)
    def make_s8_s8(*args, **kwargs):
        """make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_make_s8_s8(*args, **kwargs)

    make_s8_s8 = staticmethod(make_s8_s8)
    __swig_destroy__ = _extras_swig.delete_subtract
    __del__ = lambda self : None;
subtract_swigregister = _extras_swig.subtract_swigregister
subtract_swigregister(subtract)

def subtract_make_fc32_fc32(*args, **kwargs):
  """subtract_make_fc32_fc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_fc32_fc32(*args, **kwargs)

def subtract_make_sc32_sc32(*args, **kwargs):
  """subtract_make_sc32_sc32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_sc32_sc32(*args, **kwargs)

def subtract_make_sc16_sc16(*args, **kwargs):
  """subtract_make_sc16_sc16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_sc16_sc16(*args, **kwargs)

def subtract_make_sc8_sc8(*args, **kwargs):
  """subtract_make_sc8_sc8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_sc8_sc8(*args, **kwargs)

def subtract_make_f32_f32(*args, **kwargs):
  """subtract_make_f32_f32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_f32_f32(*args, **kwargs)

def subtract_make_s32_s32(*args, **kwargs):
  """subtract_make_s32_s32(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_s32_s32(*args, **kwargs)

def subtract_make_s16_s16(*args, **kwargs):
  """subtract_make_s16_s16(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_s16_s16(*args, **kwargs)

def subtract_make_s8_s8(*args, **kwargs):
  """subtract_make_s8_s8(size_t num_inputs, size_t vlen = 1) -> sptr"""
  return _extras_swig.subtract_make_s8_s8(*args, **kwargs)

class add_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::add)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_sptr
        __init__(self, add p) -> add_sptr
        """
        this = _extras_swig.new_add_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add"""
        return _extras_swig.add_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_add_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.add_sptr_make_s8_s8(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.add_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.add_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.add_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.add_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.add_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.add_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.add_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.add_sptr_check_topology(self, *args, **kwargs)

add_sptr_swigregister = _extras_swig.add_sptr_swigregister
add_sptr_swigregister(add_sptr)

add_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

add_fc32_fc32 = add.make_fc32_fc32

add_sc32_sc32 = add.make_sc32_sc32

add_sc16_sc16 = add.make_sc16_sc16

add_sc8_sc8 = add.make_sc8_sc8

add_f32_f32 = add.make_f32_f32

add_s32_s32 = add.make_s32_s32

add_s16_s16 = add.make_s16_s16

add_s8_s8 = add.make_s8_s8

class multiply_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::multiply)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_sptr
        __init__(self, multiply p) -> multiply_sptr
        """
        this = _extras_swig.new_multiply_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply"""
        return _extras_swig.multiply_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_multiply_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.multiply_sptr_make_s8_s8(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.multiply_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.multiply_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.multiply_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.multiply_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.multiply_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.multiply_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.multiply_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.multiply_sptr_check_topology(self, *args, **kwargs)

multiply_sptr_swigregister = _extras_swig.multiply_sptr_swigregister
multiply_sptr_swigregister(multiply_sptr)

multiply_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

multiply_fc32_fc32 = multiply.make_fc32_fc32

multiply_sc32_sc32 = multiply.make_sc32_sc32

multiply_sc16_sc16 = multiply.make_sc16_sc16

multiply_sc8_sc8 = multiply.make_sc8_sc8

multiply_f32_f32 = multiply.make_f32_f32

multiply_s32_s32 = multiply.make_s32_s32

multiply_s16_s16 = multiply.make_s16_s16

multiply_s8_s8 = multiply.make_s8_s8

class subtract_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::subtract)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> subtract_sptr
        __init__(self, subtract p) -> subtract_sptr
        """
        this = _extras_swig.new_subtract_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> subtract"""
        return _extras_swig.subtract_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_subtract_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.subtract_sptr_make_s8_s8(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.subtract_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.subtract_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.subtract_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.subtract_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.subtract_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.subtract_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.subtract_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.subtract_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.subtract_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.subtract_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.subtract_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.subtract_sptr_check_topology(self, *args, **kwargs)

subtract_sptr_swigregister = _extras_swig.subtract_sptr_swigregister
subtract_sptr_swigregister(subtract_sptr)

subtract_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

subtract_fc32_fc32 = subtract.make_fc32_fc32

subtract_sc32_sc32 = subtract.make_sc32_sc32

subtract_sc16_sc16 = subtract.make_sc16_sc16

subtract_sc8_sc8 = subtract.make_sc8_sc8

subtract_f32_f32 = subtract.make_f32_f32

subtract_s32_s32 = subtract.make_s32_s32

subtract_s16_s16 = subtract.make_s16_s16

subtract_s8_s8 = subtract.make_s8_s8

class divide_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::divide)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> divide_sptr
        __init__(self, divide p) -> divide_sptr
        """
        this = _extras_swig.new_divide_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> divide"""
        return _extras_swig.divide_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_divide_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, size_t num_inputs, size_t vlen = 1) -> sptr"""
        return _extras_swig.divide_sptr_make_s8_s8(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.divide_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.divide_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.divide_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.divide_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.divide_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.divide_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.divide_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.divide_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.divide_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.divide_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.divide_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.divide_sptr_check_topology(self, *args, **kwargs)

divide_sptr_swigregister = _extras_swig.divide_sptr_swigregister
divide_sptr_swigregister(divide_sptr)

divide_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

divide_fc32_fc32 = divide.make_fc32_fc32

divide_sc32_sc32 = divide.make_sc32_sc32

divide_sc16_sc16 = divide.make_sc16_sc16

divide_sc8_sc8 = divide.make_sc8_sc8

divide_f32_f32 = divide.make_f32_f32

divide_s32_s32 = divide.make_s32_s32

divide_s16_s16 = divide.make_s16_s16

divide_s8_s8 = divide.make_s8_s8

class add_const_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::add_const)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_sptr
        __init__(self, add_const p) -> add_const_sptr
        """
        this = _extras_swig.new_add_const_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const"""
        return _extras_swig.add_const_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_add_const_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, val = 0):
        """make_fc32_fc32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_fc32_fc32(self, val)

    def make_sc32_sc32(self, val = 0):
        """make_sc32_sc32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_sc32_sc32(self, val)

    def make_sc16_sc16(self, val = 0):
        """make_sc16_sc16(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_sc16_sc16(self, val)

    def make_sc8_sc8(self, val = 0):
        """make_sc8_sc8(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_sc8_sc8(self, val)

    def make_f32_f32(self, val = 0):
        """make_f32_f32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_f32_f32(self, val)

    def make_s32_s32(self, val = 0):
        """make_s32_s32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_s32_s32(self, val)

    def make_s16_s16(self, val = 0):
        """make_s16_s16(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_s16_s16(self, val)

    def make_s8_s8(self, val = 0):
        """make_s8_s8(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.add_const_sptr_make_s8_s8(self, val)

    def set_const(self, *args, **kwargs):
        """set_const(self, std::complex<(double)> val)"""
        return _extras_swig.add_const_sptr_set_const(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> std::complex<(double)>"""
        return _extras_swig.add_const_sptr_get_const(self)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_const_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_const_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.add_const_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.add_const_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.add_const_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.add_const_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.add_const_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_const_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_const_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.add_const_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.add_const_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.add_const_sptr_check_topology(self, *args, **kwargs)

add_const_sptr_swigregister = _extras_swig.add_const_sptr_swigregister
add_const_sptr_swigregister(add_const_sptr)

add_const_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

add_const_fc32_fc32 = add_const.make_fc32_fc32

add_const_sc32_sc32 = add_const.make_sc32_sc32

add_const_sc16_sc16 = add_const.make_sc16_sc16

add_const_sc8_sc8 = add_const.make_sc8_sc8

add_const_f32_f32 = add_const.make_f32_f32

add_const_s32_s32 = add_const.make_s32_s32

add_const_s16_s16 = add_const.make_s16_s16

add_const_s8_s8 = add_const.make_s8_s8

class add_const_v_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::add_const_v)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> add_const_v_sptr
        __init__(self, add_const_v p) -> add_const_v_sptr
        """
        this = _extras_swig.new_add_const_v_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> add_const_v"""
        return _extras_swig.add_const_v_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_add_const_v_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, __dummy_6__ vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, __dummy_4__ vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
        return _extras_swig.add_const_v_sptr_make_s8_s8(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> __dummy_14__"""
        return _extras_swig.add_const_v_sptr_get_const(self)

    def set_const(self, *args, **kwargs):
        """set_const(self, __dummy_14__ val)"""
        return _extras_swig.add_const_v_sptr_set_const(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_const_v_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.add_const_v_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.add_const_v_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.add_const_v_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.add_const_v_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.add_const_v_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.add_const_v_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_const_v_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.add_const_v_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.add_const_v_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.add_const_v_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.add_const_v_sptr_check_topology(self, *args, **kwargs)

add_const_v_sptr_swigregister = _extras_swig.add_const_v_sptr_swigregister
add_const_v_sptr_swigregister(add_const_v_sptr)

add_const_v_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

add_const_v_fc32_fc32 = add_const_v.make_fc32_fc32

add_const_v_sc32_sc32 = add_const_v.make_sc32_sc32

add_const_v_sc16_sc16 = add_const_v.make_sc16_sc16

add_const_v_sc8_sc8 = add_const_v.make_sc8_sc8

add_const_v_f32_f32 = add_const_v.make_f32_f32

add_const_v_s32_s32 = add_const_v.make_s32_s32

add_const_v_s16_s16 = add_const_v.make_s16_s16

add_const_v_s8_s8 = add_const_v.make_s8_s8

class multiply_const_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::multiply_const)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_sptr
        __init__(self, multiply_const p) -> multiply_const_sptr
        """
        this = _extras_swig.new_multiply_const_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const"""
        return _extras_swig.multiply_const_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_multiply_const_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, val = 0):
        """make_fc32_fc32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_fc32_fc32(self, val)

    def make_sc32_sc32(self, val = 0):
        """make_sc32_sc32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_sc32_sc32(self, val)

    def make_sc16_sc16(self, val = 0):
        """make_sc16_sc16(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_sc16_sc16(self, val)

    def make_sc8_sc8(self, val = 0):
        """make_sc8_sc8(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_sc8_sc8(self, val)

    def make_f32_f32(self, val = 0):
        """make_f32_f32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_f32_f32(self, val)

    def make_s32_s32(self, val = 0):
        """make_s32_s32(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_s32_s32(self, val)

    def make_s16_s16(self, val = 0):
        """make_s16_s16(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_s16_s16(self, val)

    def make_s8_s8(self, val = 0):
        """make_s8_s8(self, std::complex<(double)> val = 0) -> sptr"""
        return _extras_swig.multiply_const_sptr_make_s8_s8(self, val)

    def set_const(self, *args, **kwargs):
        """set_const(self, std::complex<(double)> val)"""
        return _extras_swig.multiply_const_sptr_set_const(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> std::complex<(double)>"""
        return _extras_swig.multiply_const_sptr_get_const(self)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_const_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_const_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.multiply_const_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.multiply_const_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.multiply_const_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.multiply_const_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.multiply_const_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_const_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_const_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.multiply_const_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.multiply_const_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.multiply_const_sptr_check_topology(self, *args, **kwargs)

multiply_const_sptr_swigregister = _extras_swig.multiply_const_sptr_swigregister
multiply_const_sptr_swigregister(multiply_const_sptr)

multiply_const_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

multiply_const_fc32_fc32 = multiply_const.make_fc32_fc32

multiply_const_sc32_sc32 = multiply_const.make_sc32_sc32

multiply_const_sc16_sc16 = multiply_const.make_sc16_sc16

multiply_const_sc8_sc8 = multiply_const.make_sc8_sc8

multiply_const_f32_f32 = multiply_const.make_f32_f32

multiply_const_s32_s32 = multiply_const.make_s32_s32

multiply_const_s16_s16 = multiply_const.make_s16_s16

multiply_const_s8_s8 = multiply_const.make_s8_s8

class multiply_const_v_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::multiply_const_v)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> multiply_const_v_sptr
        __init__(self, multiply_const_v p) -> multiply_const_v_sptr
        """
        this = _extras_swig.new_multiply_const_v_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> multiply_const_v"""
        return _extras_swig.multiply_const_v_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_multiply_const_v_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32(self, __dummy_6__ vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_fc32_fc32(self, *args, **kwargs)

    def make_sc32_sc32(self, *args, **kwargs):
        """make_sc32_sc32(self, std::vector<(std::complex<(int32_t)>,std::allocator<(std::complex<(int32_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_sc32_sc32(self, *args, **kwargs)

    def make_sc16_sc16(self, *args, **kwargs):
        """make_sc16_sc16(self, std::vector<(std::complex<(int16_t)>,std::allocator<(std::complex<(int16_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_sc16_sc16(self, *args, **kwargs)

    def make_sc8_sc8(self, *args, **kwargs):
        """make_sc8_sc8(self, std::vector<(std::complex<(int8_t)>,std::allocator<(std::complex<(int8_t)>)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_sc8_sc8(self, *args, **kwargs)

    def make_f32_f32(self, *args, **kwargs):
        """make_f32_f32(self, __dummy_4__ vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_f32_f32(self, *args, **kwargs)

    def make_s32_s32(self, *args, **kwargs):
        """make_s32_s32(self, std::vector<(int32_t,std::allocator<(int32_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_s32_s32(self, *args, **kwargs)

    def make_s16_s16(self, *args, **kwargs):
        """make_s16_s16(self, std::vector<(int16_t,std::allocator<(int16_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_s16_s16(self, *args, **kwargs)

    def make_s8_s8(self, *args, **kwargs):
        """make_s8_s8(self, std::vector<(int8_t,std::allocator<(int8_t)>)> vec) -> sptr"""
        return _extras_swig.multiply_const_v_sptr_make_s8_s8(self, *args, **kwargs)

    def get_const(self):
        """get_const(self) -> __dummy_14__"""
        return _extras_swig.multiply_const_v_sptr_get_const(self)

    def set_const(self, *args, **kwargs):
        """set_const(self, __dummy_14__ val)"""
        return _extras_swig.multiply_const_v_sptr_set_const(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_const_v_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.multiply_const_v_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.multiply_const_v_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.multiply_const_v_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.multiply_const_v_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.multiply_const_v_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.multiply_const_v_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_const_v_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.multiply_const_v_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.multiply_const_v_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.multiply_const_v_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.multiply_const_v_sptr_check_topology(self, *args, **kwargs)

multiply_const_v_sptr_swigregister = _extras_swig.multiply_const_v_sptr_swigregister
multiply_const_v_sptr_swigregister(multiply_const_v_sptr)

multiply_const_v_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

multiply_const_v_fc32_fc32 = multiply_const_v.make_fc32_fc32

multiply_const_v_sc32_sc32 = multiply_const_v.make_sc32_sc32

multiply_const_v_sc16_sc16 = multiply_const_v.make_sc16_sc16

multiply_const_v_sc8_sc8 = multiply_const_v.make_sc8_sc8

multiply_const_v_f32_f32 = multiply_const_v.make_f32_f32

multiply_const_v_s32_s32 = multiply_const_v.make_s32_s32

multiply_const_v_s16_s16 = multiply_const_v.make_s16_s16

multiply_const_v_s8_s8 = multiply_const_v.make_s8_s8

class delay(block):
    """Proxy of C++ gnuradio::extras::delay class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t itemsize) -> sptr"""
        return _extras_swig.delay_make(*args, **kwargs)

    make = staticmethod(make)
    def set_delay(self, *args, **kwargs):
        """set_delay(self, int nitems)"""
        return _extras_swig.delay_set_delay(self, *args, **kwargs)

    __swig_destroy__ = _extras_swig.delete_delay
    __del__ = lambda self : None;
delay_swigregister = _extras_swig.delay_swigregister
delay_swigregister(delay)

def delay_make(*args, **kwargs):
  """delay_make(size_t itemsize) -> sptr"""
  return _extras_swig.delay_make(*args, **kwargs)

class delay_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::delay)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> delay_sptr
        __init__(self, delay p) -> delay_sptr
        """
        this = _extras_swig.new_delay_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> delay"""
        return _extras_swig.delay_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_delay_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t itemsize) -> sptr"""
        return _extras_swig.delay_sptr_make(self, *args, **kwargs)

    def set_delay(self, *args, **kwargs):
        """set_delay(self, int nitems)"""
        return _extras_swig.delay_sptr_set_delay(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.delay_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.delay_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.delay_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.delay_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.delay_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.delay_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.delay_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.delay_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.delay_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.delay_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.delay_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.delay_sptr_check_topology(self, *args, **kwargs)

delay_sptr_swigregister = _extras_swig.delay_sptr_swigregister
delay_sptr_swigregister(delay_sptr)

delay_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

delay = delay.make

class noise_source(block):
    """Proxy of C++ gnuradio::extras::noise_source class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32(*args, **kwargs):
        """make_fc32(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_fc32(*args, **kwargs)

    make_fc32 = staticmethod(make_fc32)
    def make_sc32(*args, **kwargs):
        """make_sc32(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_sc32(*args, **kwargs)

    make_sc32 = staticmethod(make_sc32)
    def make_sc16(*args, **kwargs):
        """make_sc16(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_sc16(*args, **kwargs)

    make_sc16 = staticmethod(make_sc16)
    def make_sc8(*args, **kwargs):
        """make_sc8(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_sc8(*args, **kwargs)

    make_sc8 = staticmethod(make_sc8)
    def make_f32(*args, **kwargs):
        """make_f32(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_f32(*args, **kwargs)

    make_f32 = staticmethod(make_f32)
    def make_s32(*args, **kwargs):
        """make_s32(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_s32(*args, **kwargs)

    make_s32 = staticmethod(make_s32)
    def make_s16(*args, **kwargs):
        """make_s16(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_s16(*args, **kwargs)

    make_s16 = staticmethod(make_s16)
    def make_s8(*args, **kwargs):
        """make_s8(long seed = -42) -> sptr"""
        return _extras_swig.noise_source_make_s8(*args, **kwargs)

    make_s8 = staticmethod(make_s8)
    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, string arg0)"""
        return _extras_swig.noise_source_set_waveform(self, *args, **kwargs)

    def get_waveform(self):
        """get_waveform(self) -> string"""
        return _extras_swig.noise_source_get_waveform(self)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, std::complex<(double)> arg0)"""
        return _extras_swig.noise_source_set_offset(self, *args, **kwargs)

    def get_offset(self):
        """get_offset(self) -> std::complex<(double)>"""
        return _extras_swig.noise_source_get_offset(self)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, std::complex<(double)> arg0)"""
        return _extras_swig.noise_source_set_amplitude(self, *args, **kwargs)

    def get_amplitude(self):
        """get_amplitude(self) -> std::complex<(double)>"""
        return _extras_swig.noise_source_get_amplitude(self)

    def set_factor(self, *args, **kwargs):
        """set_factor(self, double factor)"""
        return _extras_swig.noise_source_set_factor(self, *args, **kwargs)

    def get_factor(self):
        """get_factor(self) -> double"""
        return _extras_swig.noise_source_get_factor(self)

    __swig_destroy__ = _extras_swig.delete_noise_source
    __del__ = lambda self : None;
noise_source_swigregister = _extras_swig.noise_source_swigregister
noise_source_swigregister(noise_source)

def noise_source_make_fc32(*args, **kwargs):
  """noise_source_make_fc32(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_fc32(*args, **kwargs)

def noise_source_make_sc32(*args, **kwargs):
  """noise_source_make_sc32(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_sc32(*args, **kwargs)

def noise_source_make_sc16(*args, **kwargs):
  """noise_source_make_sc16(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_sc16(*args, **kwargs)

def noise_source_make_sc8(*args, **kwargs):
  """noise_source_make_sc8(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_sc8(*args, **kwargs)

def noise_source_make_f32(*args, **kwargs):
  """noise_source_make_f32(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_f32(*args, **kwargs)

def noise_source_make_s32(*args, **kwargs):
  """noise_source_make_s32(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_s32(*args, **kwargs)

def noise_source_make_s16(*args, **kwargs):
  """noise_source_make_s16(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_s16(*args, **kwargs)

def noise_source_make_s8(*args, **kwargs):
  """noise_source_make_s8(long seed = -42) -> sptr"""
  return _extras_swig.noise_source_make_s8(*args, **kwargs)

class signal_source(block):
    """Proxy of C++ gnuradio::extras::signal_source class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32():
        """make_fc32() -> sptr"""
        return _extras_swig.signal_source_make_fc32()

    make_fc32 = staticmethod(make_fc32)
    def make_sc32():
        """make_sc32() -> sptr"""
        return _extras_swig.signal_source_make_sc32()

    make_sc32 = staticmethod(make_sc32)
    def make_sc16():
        """make_sc16() -> sptr"""
        return _extras_swig.signal_source_make_sc16()

    make_sc16 = staticmethod(make_sc16)
    def make_sc8():
        """make_sc8() -> sptr"""
        return _extras_swig.signal_source_make_sc8()

    make_sc8 = staticmethod(make_sc8)
    def make_f32():
        """make_f32() -> sptr"""
        return _extras_swig.signal_source_make_f32()

    make_f32 = staticmethod(make_f32)
    def make_s32():
        """make_s32() -> sptr"""
        return _extras_swig.signal_source_make_s32()

    make_s32 = staticmethod(make_s32)
    def make_s16():
        """make_s16() -> sptr"""
        return _extras_swig.signal_source_make_s16()

    make_s16 = staticmethod(make_s16)
    def make_s8():
        """make_s8() -> sptr"""
        return _extras_swig.signal_source_make_s8()

    make_s8 = staticmethod(make_s8)
    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, string arg0)"""
        return _extras_swig.signal_source_set_waveform(self, *args, **kwargs)

    def get_waveform(self):
        """get_waveform(self) -> string"""
        return _extras_swig.signal_source_get_waveform(self)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, std::complex<(double)> arg0)"""
        return _extras_swig.signal_source_set_offset(self, *args, **kwargs)

    def get_offset(self):
        """get_offset(self) -> std::complex<(double)>"""
        return _extras_swig.signal_source_get_offset(self)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, std::complex<(double)> arg0)"""
        return _extras_swig.signal_source_set_amplitude(self, *args, **kwargs)

    def get_amplitude(self):
        """get_amplitude(self) -> std::complex<(double)>"""
        return _extras_swig.signal_source_get_amplitude(self)

    def set_frequency(self, *args):
        """
        set_frequency(self, double arg0)
        set_frequency(self, double samp_rate, double wave_freq)
        """
        return _extras_swig.signal_source_set_frequency(self, *args)

    def get_frequency(self, *args):
        """
        get_frequency(self) -> double
        get_frequency(self, double samp_rate) -> double
        """
        return _extras_swig.signal_source_get_frequency(self, *args)

    __swig_destroy__ = _extras_swig.delete_signal_source
    __del__ = lambda self : None;
signal_source_swigregister = _extras_swig.signal_source_swigregister
signal_source_swigregister(signal_source)

def signal_source_make_fc32():
  """signal_source_make_fc32() -> sptr"""
  return _extras_swig.signal_source_make_fc32()

def signal_source_make_sc32():
  """signal_source_make_sc32() -> sptr"""
  return _extras_swig.signal_source_make_sc32()

def signal_source_make_sc16():
  """signal_source_make_sc16() -> sptr"""
  return _extras_swig.signal_source_make_sc16()

def signal_source_make_sc8():
  """signal_source_make_sc8() -> sptr"""
  return _extras_swig.signal_source_make_sc8()

def signal_source_make_f32():
  """signal_source_make_f32() -> sptr"""
  return _extras_swig.signal_source_make_f32()

def signal_source_make_s32():
  """signal_source_make_s32() -> sptr"""
  return _extras_swig.signal_source_make_s32()

def signal_source_make_s16():
  """signal_source_make_s16() -> sptr"""
  return _extras_swig.signal_source_make_s16()

def signal_source_make_s8():
  """signal_source_make_s8() -> sptr"""
  return _extras_swig.signal_source_make_s8()

class noise_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::noise_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> noise_source_sptr
        __init__(self, noise_source p) -> noise_source_sptr
        """
        this = _extras_swig.new_noise_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> noise_source"""
        return _extras_swig.noise_source_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_noise_source_sptr
    __del__ = lambda self : None;
    def make_fc32(self, *args, **kwargs):
        """make_fc32(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_fc32(self, *args, **kwargs)

    def make_sc32(self, *args, **kwargs):
        """make_sc32(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_sc32(self, *args, **kwargs)

    def make_sc16(self, *args, **kwargs):
        """make_sc16(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_sc16(self, *args, **kwargs)

    def make_sc8(self, *args, **kwargs):
        """make_sc8(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_sc8(self, *args, **kwargs)

    def make_f32(self, *args, **kwargs):
        """make_f32(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_f32(self, *args, **kwargs)

    def make_s32(self, *args, **kwargs):
        """make_s32(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_s32(self, *args, **kwargs)

    def make_s16(self, *args, **kwargs):
        """make_s16(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_s16(self, *args, **kwargs)

    def make_s8(self, *args, **kwargs):
        """make_s8(self, long seed = -42) -> sptr"""
        return _extras_swig.noise_source_sptr_make_s8(self, *args, **kwargs)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, string arg0)"""
        return _extras_swig.noise_source_sptr_set_waveform(self, *args, **kwargs)

    def get_waveform(self):
        """get_waveform(self) -> string"""
        return _extras_swig.noise_source_sptr_get_waveform(self)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, std::complex<(double)> arg0)"""
        return _extras_swig.noise_source_sptr_set_offset(self, *args, **kwargs)

    def get_offset(self):
        """get_offset(self) -> std::complex<(double)>"""
        return _extras_swig.noise_source_sptr_get_offset(self)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, std::complex<(double)> arg0)"""
        return _extras_swig.noise_source_sptr_set_amplitude(self, *args, **kwargs)

    def get_amplitude(self):
        """get_amplitude(self) -> std::complex<(double)>"""
        return _extras_swig.noise_source_sptr_get_amplitude(self)

    def set_factor(self, *args, **kwargs):
        """set_factor(self, double factor)"""
        return _extras_swig.noise_source_sptr_set_factor(self, *args, **kwargs)

    def get_factor(self):
        """get_factor(self) -> double"""
        return _extras_swig.noise_source_sptr_get_factor(self)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.noise_source_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.noise_source_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.noise_source_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.noise_source_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.noise_source_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.noise_source_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.noise_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.noise_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.noise_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.noise_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.noise_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.noise_source_sptr_check_topology(self, *args, **kwargs)

noise_source_sptr_swigregister = _extras_swig.noise_source_sptr_swigregister
noise_source_sptr_swigregister(noise_source_sptr)

noise_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

noise_source_fc32 = noise_source.make_fc32

noise_source_sc32 = noise_source.make_sc32

noise_source_sc16 = noise_source.make_sc16

noise_source_sc8 = noise_source.make_sc8

noise_source_f32 = noise_source.make_f32

noise_source_s32 = noise_source.make_s32

noise_source_s16 = noise_source.make_s16

noise_source_s8 = noise_source.make_s8

class signal_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::signal_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> signal_source_sptr
        __init__(self, signal_source p) -> signal_source_sptr
        """
        this = _extras_swig.new_signal_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> signal_source"""
        return _extras_swig.signal_source_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_signal_source_sptr
    __del__ = lambda self : None;
    def make_fc32(self):
        """make_fc32(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_fc32(self)

    def make_sc32(self):
        """make_sc32(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_sc32(self)

    def make_sc16(self):
        """make_sc16(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_sc16(self)

    def make_sc8(self):
        """make_sc8(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_sc8(self)

    def make_f32(self):
        """make_f32(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_f32(self)

    def make_s32(self):
        """make_s32(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_s32(self)

    def make_s16(self):
        """make_s16(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_s16(self)

    def make_s8(self):
        """make_s8(self) -> sptr"""
        return _extras_swig.signal_source_sptr_make_s8(self)

    def set_waveform(self, *args, **kwargs):
        """set_waveform(self, string arg0)"""
        return _extras_swig.signal_source_sptr_set_waveform(self, *args, **kwargs)

    def get_waveform(self):
        """get_waveform(self) -> string"""
        return _extras_swig.signal_source_sptr_get_waveform(self)

    def set_offset(self, *args, **kwargs):
        """set_offset(self, std::complex<(double)> arg0)"""
        return _extras_swig.signal_source_sptr_set_offset(self, *args, **kwargs)

    def get_offset(self):
        """get_offset(self) -> std::complex<(double)>"""
        return _extras_swig.signal_source_sptr_get_offset(self)

    def set_amplitude(self, *args, **kwargs):
        """set_amplitude(self, std::complex<(double)> arg0)"""
        return _extras_swig.signal_source_sptr_set_amplitude(self, *args, **kwargs)

    def get_amplitude(self):
        """get_amplitude(self) -> std::complex<(double)>"""
        return _extras_swig.signal_source_sptr_get_amplitude(self)

    def set_frequency(self, *args):
        """
        set_frequency(self, double arg0)
        set_frequency(self, double samp_rate, double wave_freq)
        """
        return _extras_swig.signal_source_sptr_set_frequency(self, *args)

    def get_frequency(self, *args):
        """
        get_frequency(self) -> double
        get_frequency(self, double samp_rate) -> double
        """
        return _extras_swig.signal_source_sptr_get_frequency(self, *args)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.signal_source_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.signal_source_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.signal_source_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.signal_source_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.signal_source_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.signal_source_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.signal_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.signal_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.signal_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.signal_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.signal_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.signal_source_sptr_check_topology(self, *args, **kwargs)

signal_source_sptr_swigregister = _extras_swig.signal_source_sptr_swigregister
signal_source_sptr_swigregister(signal_source_sptr)

signal_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

signal_source_fc32 = signal_source.make_fc32

signal_source_sc32 = signal_source.make_sc32

signal_source_sc16 = signal_source.make_sc16

signal_source_sc8 = signal_source.make_sc8

signal_source_f32 = signal_source.make_f32

signal_source_s32 = signal_source.make_s32

signal_source_s16 = signal_source.make_s16

signal_source_s8 = signal_source.make_s8

class decim_fir(block):
    """Proxy of C++ gnuradio::extras::decim_fir class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make_fc32_fc32_fc32(*args, **kwargs):
        """make_fc32_fc32_fc32(taps_type taps, size_t decim = 1) -> sptr"""
        return _extras_swig.decim_fir_make_fc32_fc32_fc32(*args, **kwargs)

    make_fc32_fc32_fc32 = staticmethod(make_fc32_fc32_fc32)
    def make_f32_f32_f32(*args, **kwargs):
        """make_f32_f32_f32(taps_type taps, size_t decim = 1) -> sptr"""
        return _extras_swig.decim_fir_make_f32_f32_f32(*args, **kwargs)

    make_f32_f32_f32 = staticmethod(make_f32_f32_f32)
    def set_taps(self, *args, **kwargs):
        """set_taps(self, taps_type taps)"""
        return _extras_swig.decim_fir_set_taps(self, *args, **kwargs)

    def get_taps(self):
        """get_taps(self) -> taps_type"""
        return _extras_swig.decim_fir_get_taps(self)

    __swig_destroy__ = _extras_swig.delete_decim_fir
    __del__ = lambda self : None;
decim_fir_swigregister = _extras_swig.decim_fir_swigregister
decim_fir_swigregister(decim_fir)

def decim_fir_make_fc32_fc32_fc32(*args, **kwargs):
  """decim_fir_make_fc32_fc32_fc32(taps_type taps, size_t decim = 1) -> sptr"""
  return _extras_swig.decim_fir_make_fc32_fc32_fc32(*args, **kwargs)

def decim_fir_make_f32_f32_f32(*args, **kwargs):
  """decim_fir_make_f32_f32_f32(taps_type taps, size_t decim = 1) -> sptr"""
  return _extras_swig.decim_fir_make_f32_f32_f32(*args, **kwargs)

class decim_fir_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::decim_fir)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> decim_fir_sptr
        __init__(self, decim_fir p) -> decim_fir_sptr
        """
        this = _extras_swig.new_decim_fir_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> decim_fir"""
        return _extras_swig.decim_fir_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_decim_fir_sptr
    __del__ = lambda self : None;
    def make_fc32_fc32_fc32(self, *args, **kwargs):
        """make_fc32_fc32_fc32(self, taps_type taps, size_t decim = 1) -> sptr"""
        return _extras_swig.decim_fir_sptr_make_fc32_fc32_fc32(self, *args, **kwargs)

    def make_f32_f32_f32(self, *args, **kwargs):
        """make_f32_f32_f32(self, taps_type taps, size_t decim = 1) -> sptr"""
        return _extras_swig.decim_fir_sptr_make_f32_f32_f32(self, *args, **kwargs)

    def set_taps(self, *args, **kwargs):
        """set_taps(self, taps_type taps)"""
        return _extras_swig.decim_fir_sptr_set_taps(self, *args, **kwargs)

    def get_taps(self):
        """get_taps(self) -> taps_type"""
        return _extras_swig.decim_fir_sptr_get_taps(self)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.decim_fir_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.decim_fir_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.decim_fir_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.decim_fir_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.decim_fir_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.decim_fir_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.decim_fir_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.decim_fir_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.decim_fir_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.decim_fir_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.decim_fir_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.decim_fir_sptr_check_topology(self, *args, **kwargs)

decim_fir_sptr_swigregister = _extras_swig.decim_fir_sptr_swigregister
decim_fir_sptr_swigregister(decim_fir_sptr)

decim_fir_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

decim_fir_fc32_fc32_fc32 = decim_fir.make_fc32_fc32_fc32

decim_fir_f32_f32_f32 = decim_fir.make_f32_f32_f32

class stream_selector(object):
    """Proxy of C++ gnuradio::extras::stream_selector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(gr_io_signature_sptr in_sig, gr_io_signature_sptr out_sig) -> sptr"""
        return _extras_swig.stream_selector_make(*args, **kwargs)

    make = staticmethod(make)
    def set_paths(self, *args, **kwargs):
        """set_paths(self, __dummy_3__ paths)"""
        return _extras_swig.stream_selector_set_paths(self, *args, **kwargs)

    __swig_destroy__ = _extras_swig.delete_stream_selector
    __del__ = lambda self : None;
stream_selector_swigregister = _extras_swig.stream_selector_swigregister
stream_selector_swigregister(stream_selector)

def stream_selector_make(*args, **kwargs):
  """stream_selector_make(gr_io_signature_sptr in_sig, gr_io_signature_sptr out_sig) -> sptr"""
  return _extras_swig.stream_selector_make(*args, **kwargs)

class stream_selector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::stream_selector)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stream_selector_sptr
        __init__(self, stream_selector p) -> stream_selector_sptr
        """
        this = _extras_swig.new_stream_selector_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stream_selector"""
        return _extras_swig.stream_selector_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_stream_selector_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, gr_io_signature_sptr in_sig, gr_io_signature_sptr out_sig) -> sptr"""
        return _extras_swig.stream_selector_sptr_make(self, *args, **kwargs)

    def set_paths(self, *args, **kwargs):
        """set_paths(self, __dummy_3__ paths)"""
        return _extras_swig.stream_selector_sptr_set_paths(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.stream_selector_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.stream_selector_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.stream_selector_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.stream_selector_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.stream_selector_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.stream_selector_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.stream_selector_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.stream_selector_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.stream_selector_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.stream_selector_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.stream_selector_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.stream_selector_sptr_check_topology(self, *args, **kwargs)

stream_selector_sptr_swigregister = _extras_swig.stream_selector_sptr_swigregister
stream_selector_sptr_swigregister(stream_selector_sptr)

stream_selector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

stream_selector = stream_selector.make

class blob_to_filedes(block):
    """Proxy of C++ gnuradio::extras::blob_to_filedes class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int fd, bool close_fd = False) -> sptr"""
        return _extras_swig.blob_to_filedes_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_blob_to_filedes
    __del__ = lambda self : None;
blob_to_filedes_swigregister = _extras_swig.blob_to_filedes_swigregister
blob_to_filedes_swigregister(blob_to_filedes)

def blob_to_filedes_make(*args, **kwargs):
  """blob_to_filedes_make(int fd, bool close_fd = False) -> sptr"""
  return _extras_swig.blob_to_filedes_make(*args, **kwargs)

class blob_to_socket(block):
    """Proxy of C++ gnuradio::extras::blob_to_socket class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(string proto, string addr, string port) -> sptr"""
        return _extras_swig.blob_to_socket_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_blob_to_socket
    __del__ = lambda self : None;
blob_to_socket_swigregister = _extras_swig.blob_to_socket_swigregister
blob_to_socket_swigregister(blob_to_socket)

def blob_to_socket_make(*args, **kwargs):
  """blob_to_socket_make(string proto, string addr, string port) -> sptr"""
  return _extras_swig.blob_to_socket_make(*args, **kwargs)

class blob_to_stream(block):
    """Proxy of C++ gnuradio::extras::blob_to_stream class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t item_size) -> sptr"""
        return _extras_swig.blob_to_stream_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_blob_to_stream
    __del__ = lambda self : None;
blob_to_stream_swigregister = _extras_swig.blob_to_stream_swigregister
blob_to_stream_swigregister(blob_to_stream)

def blob_to_stream_make(*args, **kwargs):
  """blob_to_stream_make(size_t item_size) -> sptr"""
  return _extras_swig.blob_to_stream_make(*args, **kwargs)

class filedes_to_blob(block):
    """Proxy of C++ gnuradio::extras::filedes_to_blob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int fd, size_t mtu = 0, bool close_fd = False) -> sptr"""
        return _extras_swig.filedes_to_blob_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_filedes_to_blob
    __del__ = lambda self : None;
filedes_to_blob_swigregister = _extras_swig.filedes_to_blob_swigregister
filedes_to_blob_swigregister(filedes_to_blob)

def filedes_to_blob_make(*args, **kwargs):
  """filedes_to_blob_make(int fd, size_t mtu = 0, bool close_fd = False) -> sptr"""
  return _extras_swig.filedes_to_blob_make(*args, **kwargs)

class socket_to_blob(block):
    """Proxy of C++ gnuradio::extras::socket_to_blob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(string proto, string addr, string port, size_t mtu = 0) -> sptr"""
        return _extras_swig.socket_to_blob_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_socket_to_blob
    __del__ = lambda self : None;
socket_to_blob_swigregister = _extras_swig.socket_to_blob_swigregister
socket_to_blob_swigregister(socket_to_blob)

def socket_to_blob_make(*args, **kwargs):
  """socket_to_blob_make(string proto, string addr, string port, size_t mtu = 0) -> sptr"""
  return _extras_swig.socket_to_blob_make(*args, **kwargs)

class stream_to_blob(block):
    """Proxy of C++ gnuradio::extras::stream_to_blob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t item_size, size_t mtu = 0) -> sptr"""
        return _extras_swig.stream_to_blob_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_stream_to_blob
    __del__ = lambda self : None;
stream_to_blob_swigregister = _extras_swig.stream_to_blob_swigregister
stream_to_blob_swigregister(stream_to_blob)

def stream_to_blob_make(*args, **kwargs):
  """stream_to_blob_make(size_t item_size, size_t mtu = 0) -> sptr"""
  return _extras_swig.stream_to_blob_make(*args, **kwargs)

class tuntap(object):
    """Proxy of C++ gnuradio::extras::tuntap class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(dev = ""):
        """make(string dev = "") -> sptr"""
        return _extras_swig.tuntap_make(dev)

    make = staticmethod(make)
    def get_dev_name(self):
        """get_dev_name(self) -> string"""
        return _extras_swig.tuntap_get_dev_name(self)

    __swig_destroy__ = _extras_swig.delete_tuntap
    __del__ = lambda self : None;
tuntap_swigregister = _extras_swig.tuntap_swigregister
tuntap_swigregister(tuntap)

def tuntap_make(dev = ""):
  """tuntap_make(string dev = "") -> sptr"""
  return _extras_swig.tuntap_make(dev)

class msg_many_to_one(object):
    """Proxy of C++ gnuradio::extras::msg_many_to_one class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(size_t num_inputs) -> sptr"""
        return _extras_swig.msg_many_to_one_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_msg_many_to_one
    __del__ = lambda self : None;
msg_many_to_one_swigregister = _extras_swig.msg_many_to_one_swigregister
msg_many_to_one_swigregister(msg_many_to_one)

def msg_many_to_one_make(*args, **kwargs):
  """msg_many_to_one_make(size_t num_inputs) -> sptr"""
  return _extras_swig.msg_many_to_one_make(*args, **kwargs)

class blob_to_filedes_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::blob_to_filedes)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> blob_to_filedes_sptr
        __init__(self, blob_to_filedes p) -> blob_to_filedes_sptr
        """
        this = _extras_swig.new_blob_to_filedes_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> blob_to_filedes"""
        return _extras_swig.blob_to_filedes_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_blob_to_filedes_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int fd, bool close_fd = False) -> sptr"""
        return _extras_swig.blob_to_filedes_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_filedes_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_filedes_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.blob_to_filedes_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.blob_to_filedes_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.blob_to_filedes_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.blob_to_filedes_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.blob_to_filedes_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_filedes_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_filedes_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.blob_to_filedes_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.blob_to_filedes_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.blob_to_filedes_sptr_check_topology(self, *args, **kwargs)

blob_to_filedes_sptr_swigregister = _extras_swig.blob_to_filedes_sptr_swigregister
blob_to_filedes_sptr_swigregister(blob_to_filedes_sptr)

blob_to_filedes_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

blob_to_filedes = blob_to_filedes.make

class blob_to_socket_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::blob_to_socket)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> blob_to_socket_sptr
        __init__(self, blob_to_socket p) -> blob_to_socket_sptr
        """
        this = _extras_swig.new_blob_to_socket_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> blob_to_socket"""
        return _extras_swig.blob_to_socket_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_blob_to_socket_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, string proto, string addr, string port) -> sptr"""
        return _extras_swig.blob_to_socket_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_socket_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_socket_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.blob_to_socket_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.blob_to_socket_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.blob_to_socket_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.blob_to_socket_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.blob_to_socket_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_socket_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_socket_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.blob_to_socket_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.blob_to_socket_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.blob_to_socket_sptr_check_topology(self, *args, **kwargs)

blob_to_socket_sptr_swigregister = _extras_swig.blob_to_socket_sptr_swigregister
blob_to_socket_sptr_swigregister(blob_to_socket_sptr)

blob_to_socket_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

blob_to_socket = blob_to_socket.make

class blob_to_stream_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::blob_to_stream)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> blob_to_stream_sptr
        __init__(self, blob_to_stream p) -> blob_to_stream_sptr
        """
        this = _extras_swig.new_blob_to_stream_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> blob_to_stream"""
        return _extras_swig.blob_to_stream_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_blob_to_stream_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t item_size) -> sptr"""
        return _extras_swig.blob_to_stream_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_stream_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.blob_to_stream_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.blob_to_stream_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.blob_to_stream_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.blob_to_stream_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.blob_to_stream_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.blob_to_stream_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_stream_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.blob_to_stream_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.blob_to_stream_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.blob_to_stream_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.blob_to_stream_sptr_check_topology(self, *args, **kwargs)

blob_to_stream_sptr_swigregister = _extras_swig.blob_to_stream_sptr_swigregister
blob_to_stream_sptr_swigregister(blob_to_stream_sptr)

blob_to_stream_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

blob_to_stream = blob_to_stream.make

class filedes_to_blob_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::filedes_to_blob)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> filedes_to_blob_sptr
        __init__(self, filedes_to_blob p) -> filedes_to_blob_sptr
        """
        this = _extras_swig.new_filedes_to_blob_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> filedes_to_blob"""
        return _extras_swig.filedes_to_blob_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_filedes_to_blob_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, int fd, size_t mtu = 0, bool close_fd = False) -> sptr"""
        return _extras_swig.filedes_to_blob_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.filedes_to_blob_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.filedes_to_blob_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.filedes_to_blob_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.filedes_to_blob_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.filedes_to_blob_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.filedes_to_blob_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.filedes_to_blob_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.filedes_to_blob_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.filedes_to_blob_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.filedes_to_blob_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.filedes_to_blob_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.filedes_to_blob_sptr_check_topology(self, *args, **kwargs)

filedes_to_blob_sptr_swigregister = _extras_swig.filedes_to_blob_sptr_swigregister
filedes_to_blob_sptr_swigregister(filedes_to_blob_sptr)

filedes_to_blob_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

filedes_to_blob = filedes_to_blob.make

class socket_to_blob_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::socket_to_blob)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> socket_to_blob_sptr
        __init__(self, socket_to_blob p) -> socket_to_blob_sptr
        """
        this = _extras_swig.new_socket_to_blob_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> socket_to_blob"""
        return _extras_swig.socket_to_blob_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_socket_to_blob_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, string proto, string addr, string port, size_t mtu = 0) -> sptr"""
        return _extras_swig.socket_to_blob_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.socket_to_blob_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.socket_to_blob_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.socket_to_blob_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.socket_to_blob_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.socket_to_blob_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.socket_to_blob_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.socket_to_blob_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.socket_to_blob_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.socket_to_blob_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.socket_to_blob_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.socket_to_blob_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.socket_to_blob_sptr_check_topology(self, *args, **kwargs)

socket_to_blob_sptr_swigregister = _extras_swig.socket_to_blob_sptr_swigregister
socket_to_blob_sptr_swigregister(socket_to_blob_sptr)

socket_to_blob_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

socket_to_blob = socket_to_blob.make

class stream_to_blob_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::stream_to_blob)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> stream_to_blob_sptr
        __init__(self, stream_to_blob p) -> stream_to_blob_sptr
        """
        this = _extras_swig.new_stream_to_blob_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> stream_to_blob"""
        return _extras_swig.stream_to_blob_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_stream_to_blob_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t item_size, size_t mtu = 0) -> sptr"""
        return _extras_swig.stream_to_blob_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.stream_to_blob_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.stream_to_blob_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.stream_to_blob_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.stream_to_blob_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.stream_to_blob_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.stream_to_blob_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.stream_to_blob_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.stream_to_blob_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.stream_to_blob_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.stream_to_blob_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.stream_to_blob_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.stream_to_blob_sptr_check_topology(self, *args, **kwargs)

stream_to_blob_sptr_swigregister = _extras_swig.stream_to_blob_sptr_swigregister
stream_to_blob_sptr_swigregister(stream_to_blob_sptr)

stream_to_blob_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

stream_to_blob = stream_to_blob.make

class tuntap_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::tuntap)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> tuntap_sptr
        __init__(self, tuntap p) -> tuntap_sptr
        """
        this = _extras_swig.new_tuntap_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> tuntap"""
        return _extras_swig.tuntap_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_tuntap_sptr
    __del__ = lambda self : None;
    def make(self, dev = ""):
        """make(self, string dev = "") -> sptr"""
        return _extras_swig.tuntap_sptr_make(self, dev)

    def get_dev_name(self):
        """get_dev_name(self) -> string"""
        return _extras_swig.tuntap_sptr_get_dev_name(self)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.tuntap_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.tuntap_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.tuntap_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.tuntap_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.tuntap_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.tuntap_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.tuntap_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.tuntap_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.tuntap_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.tuntap_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.tuntap_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.tuntap_sptr_check_topology(self, *args, **kwargs)

tuntap_sptr_swigregister = _extras_swig.tuntap_sptr_swigregister
tuntap_sptr_swigregister(tuntap_sptr)

tuntap_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

tuntap = tuntap.make

class msg_many_to_one_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::msg_many_to_one)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> msg_many_to_one_sptr
        __init__(self, msg_many_to_one p) -> msg_many_to_one_sptr
        """
        this = _extras_swig.new_msg_many_to_one_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> msg_many_to_one"""
        return _extras_swig.msg_many_to_one_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_msg_many_to_one_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, size_t num_inputs) -> sptr"""
        return _extras_swig.msg_many_to_one_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.msg_many_to_one_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.msg_many_to_one_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.msg_many_to_one_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.msg_many_to_one_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.msg_many_to_one_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.msg_many_to_one_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.msg_many_to_one_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.msg_many_to_one_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.msg_many_to_one_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.msg_many_to_one_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.msg_many_to_one_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.msg_many_to_one_sptr_check_topology(self, *args, **kwargs)

msg_many_to_one_sptr_swigregister = _extras_swig.msg_many_to_one_sptr_swigregister
msg_many_to_one_sptr_swigregister(msg_many_to_one_sptr)

msg_many_to_one_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

msg_many_to_one = msg_many_to_one.make

class swig_int_ptr(object):
    """Proxy of C++ boost::intrusive_ptr<(pmt::pmt_base)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> swig_int_ptr"""
        this = _extras_swig.new_swig_int_ptr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_swig_int_ptr
    __del__ = lambda self : None;
swig_int_ptr_swigregister = _extras_swig.swig_int_ptr_swigregister
swig_int_ptr_swigregister(swig_int_ptr)


def pmt_is_bool(*args, **kwargs):
  """pmt_is_bool(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_bool(*args, **kwargs)

def pmt_is_true(*args, **kwargs):
  """pmt_is_true(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_true(*args, **kwargs)

def pmt_is_false(*args, **kwargs):
  """pmt_is_false(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_false(*args, **kwargs)

def pmt_from_bool(*args, **kwargs):
  """pmt_from_bool(bool val) -> pmt_t"""
  return _extras_swig.pmt_from_bool(*args, **kwargs)

def pmt_to_bool(*args, **kwargs):
  """pmt_to_bool(pmt_t val) -> bool"""
  return _extras_swig.pmt_to_bool(*args, **kwargs)

def pmt_is_symbol(*args, **kwargs):
  """pmt_is_symbol(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_symbol(*args, **kwargs)

def pmt_string_to_symbol(*args, **kwargs):
  """pmt_string_to_symbol(string s) -> pmt_t"""
  return _extras_swig.pmt_string_to_symbol(*args, **kwargs)

def pmt_intern(*args, **kwargs):
  """pmt_intern(string s) -> pmt_t"""
  return _extras_swig.pmt_intern(*args, **kwargs)

def pmt_symbol_to_string(*args, **kwargs):
  """pmt_symbol_to_string(pmt_t sym) -> string"""
  return _extras_swig.pmt_symbol_to_string(*args, **kwargs)

def pmt_is_number(*args, **kwargs):
  """pmt_is_number(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_number(*args, **kwargs)

def pmt_is_integer(*args, **kwargs):
  """pmt_is_integer(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_integer(*args, **kwargs)

def pmt_from_long(*args, **kwargs):
  """pmt_from_long(long x) -> pmt_t"""
  return _extras_swig.pmt_from_long(*args, **kwargs)

def pmt_to_long(*args, **kwargs):
  """pmt_to_long(pmt_t x) -> long"""
  return _extras_swig.pmt_to_long(*args, **kwargs)

def pmt_is_uint64(*args, **kwargs):
  """pmt_is_uint64(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_uint64(*args, **kwargs)

def pmt_from_uint64(*args, **kwargs):
  """pmt_from_uint64(uint64_t x) -> pmt_t"""
  return _extras_swig.pmt_from_uint64(*args, **kwargs)

def pmt_to_uint64(*args, **kwargs):
  """pmt_to_uint64(pmt_t x) -> uint64_t"""
  return _extras_swig.pmt_to_uint64(*args, **kwargs)

def pmt_is_real(*args, **kwargs):
  """pmt_is_real(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_real(*args, **kwargs)

def pmt_from_double(*args, **kwargs):
  """pmt_from_double(double x) -> pmt_t"""
  return _extras_swig.pmt_from_double(*args, **kwargs)

def pmt_to_double(*args, **kwargs):
  """pmt_to_double(pmt_t x) -> double"""
  return _extras_swig.pmt_to_double(*args, **kwargs)

def pmt_is_complex(*args, **kwargs):
  """pmt_is_complex(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_complex(*args, **kwargs)

def pmt_make_rectangular(*args, **kwargs):
  """pmt_make_rectangular(double re, double im) -> pmt_t"""
  return _extras_swig.pmt_make_rectangular(*args, **kwargs)

def pmt_to_complex(*args, **kwargs):
  """pmt_to_complex(pmt_t z) -> std::complex<(double)>"""
  return _extras_swig.pmt_to_complex(*args, **kwargs)

def pmt_is_null(*args, **kwargs):
  """pmt_is_null(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_null(*args, **kwargs)

def pmt_is_pair(*args, **kwargs):
  """pmt_is_pair(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_pair(*args, **kwargs)

def pmt_cons(*args, **kwargs):
  """pmt_cons(pmt_t x, pmt_t y) -> pmt_t"""
  return _extras_swig.pmt_cons(*args, **kwargs)

def pmt_car(*args, **kwargs):
  """pmt_car(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_car(*args, **kwargs)

def pmt_cdr(*args, **kwargs):
  """pmt_cdr(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_cdr(*args, **kwargs)

def pmt_set_car(*args, **kwargs):
  """pmt_set_car(pmt_t pair, pmt_t value)"""
  return _extras_swig.pmt_set_car(*args, **kwargs)

def pmt_set_cdr(*args, **kwargs):
  """pmt_set_cdr(pmt_t pair, pmt_t value)"""
  return _extras_swig.pmt_set_cdr(*args, **kwargs)

def pmt_caar(*args, **kwargs):
  """pmt_caar(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_caar(*args, **kwargs)

def pmt_cadr(*args, **kwargs):
  """pmt_cadr(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_cadr(*args, **kwargs)

def pmt_cdar(*args, **kwargs):
  """pmt_cdar(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_cdar(*args, **kwargs)

def pmt_cddr(*args, **kwargs):
  """pmt_cddr(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_cddr(*args, **kwargs)

def pmt_caddr(*args, **kwargs):
  """pmt_caddr(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_caddr(*args, **kwargs)

def pmt_cadddr(*args, **kwargs):
  """pmt_cadddr(pmt_t pair) -> pmt_t"""
  return _extras_swig.pmt_cadddr(*args, **kwargs)

def pmt_is_tuple(*args, **kwargs):
  """pmt_is_tuple(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_tuple(*args, **kwargs)

def pmt_to_tuple(*args, **kwargs):
  """pmt_to_tuple(pmt_t x) -> pmt_t"""
  return _extras_swig.pmt_to_tuple(*args, **kwargs)

def pmt_tuple_ref(*args, **kwargs):
  """pmt_tuple_ref(pmt_t tuple, size_t k) -> pmt_t"""
  return _extras_swig.pmt_tuple_ref(*args, **kwargs)

def pmt_is_vector(*args, **kwargs):
  """pmt_is_vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_vector(*args, **kwargs)

def pmt_make_vector(*args, **kwargs):
  """pmt_make_vector(size_t k, pmt_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_vector(*args, **kwargs)

def pmt_vector_ref(*args, **kwargs):
  """pmt_vector_ref(pmt_t vector, size_t k) -> pmt_t"""
  return _extras_swig.pmt_vector_ref(*args, **kwargs)

def pmt_vector_set(*args, **kwargs):
  """pmt_vector_set(pmt_t vector, size_t k, pmt_t obj)"""
  return _extras_swig.pmt_vector_set(*args, **kwargs)

def pmt_vector_fill(*args, **kwargs):
  """pmt_vector_fill(pmt_t vector, pmt_t fill)"""
  return _extras_swig.pmt_vector_fill(*args, **kwargs)

def pmt_is_blob(*args, **kwargs):
  """pmt_is_blob(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_blob(*args, **kwargs)

def pmt_blob_data(*args, **kwargs):
  """pmt_blob_data(pmt_t blob) -> void"""
  return _extras_swig.pmt_blob_data(*args, **kwargs)

def pmt_blob_length(*args, **kwargs):
  """pmt_blob_length(pmt_t blob) -> size_t"""
  return _extras_swig.pmt_blob_length(*args, **kwargs)

def pmt_is_uniform_vector(*args, **kwargs):
  """pmt_is_uniform_vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_uniform_vector(*args, **kwargs)

def pmt_is_u8vector(*args, **kwargs):
  """pmt_is_u8vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_u8vector(*args, **kwargs)

def pmt_is_s8vector(*args, **kwargs):
  """pmt_is_s8vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_s8vector(*args, **kwargs)

def pmt_is_u16vector(*args, **kwargs):
  """pmt_is_u16vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_u16vector(*args, **kwargs)

def pmt_is_s16vector(*args, **kwargs):
  """pmt_is_s16vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_s16vector(*args, **kwargs)

def pmt_is_u32vector(*args, **kwargs):
  """pmt_is_u32vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_u32vector(*args, **kwargs)

def pmt_is_s32vector(*args, **kwargs):
  """pmt_is_s32vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_s32vector(*args, **kwargs)

def pmt_is_u64vector(*args, **kwargs):
  """pmt_is_u64vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_u64vector(*args, **kwargs)

def pmt_is_s64vector(*args, **kwargs):
  """pmt_is_s64vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_s64vector(*args, **kwargs)

def pmt_is_f32vector(*args, **kwargs):
  """pmt_is_f32vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_f32vector(*args, **kwargs)

def pmt_is_f64vector(*args, **kwargs):
  """pmt_is_f64vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_f64vector(*args, **kwargs)

def pmt_is_c32vector(*args, **kwargs):
  """pmt_is_c32vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_c32vector(*args, **kwargs)

def pmt_is_c64vector(*args, **kwargs):
  """pmt_is_c64vector(pmt_t x) -> bool"""
  return _extras_swig.pmt_is_c64vector(*args, **kwargs)

def pmt_make_u8vector(*args, **kwargs):
  """pmt_make_u8vector(size_t k, uint8_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_u8vector(*args, **kwargs)

def pmt_make_s8vector(*args, **kwargs):
  """pmt_make_s8vector(size_t k, int8_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_s8vector(*args, **kwargs)

def pmt_make_u16vector(*args, **kwargs):
  """pmt_make_u16vector(size_t k, uint16_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_u16vector(*args, **kwargs)

def pmt_make_s16vector(*args, **kwargs):
  """pmt_make_s16vector(size_t k, int16_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_s16vector(*args, **kwargs)

def pmt_make_u32vector(*args, **kwargs):
  """pmt_make_u32vector(size_t k, uint32_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_u32vector(*args, **kwargs)

def pmt_make_s32vector(*args, **kwargs):
  """pmt_make_s32vector(size_t k, int32_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_s32vector(*args, **kwargs)

def pmt_make_u64vector(*args, **kwargs):
  """pmt_make_u64vector(size_t k, uint64_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_u64vector(*args, **kwargs)

def pmt_make_s64vector(*args, **kwargs):
  """pmt_make_s64vector(size_t k, int64_t fill) -> pmt_t"""
  return _extras_swig.pmt_make_s64vector(*args, **kwargs)

def pmt_make_f32vector(*args, **kwargs):
  """pmt_make_f32vector(size_t k, float fill) -> pmt_t"""
  return _extras_swig.pmt_make_f32vector(*args, **kwargs)

def pmt_make_f64vector(*args, **kwargs):
  """pmt_make_f64vector(size_t k, double fill) -> pmt_t"""
  return _extras_swig.pmt_make_f64vector(*args, **kwargs)

def pmt_make_c32vector(*args, **kwargs):
  """pmt_make_c32vector(size_t k, std::complex<(float)> fill) -> pmt_t"""
  return _extras_swig.pmt_make_c32vector(*args, **kwargs)

def pmt_make_c64vector(*args, **kwargs):
  """pmt_make_c64vector(size_t k, std::complex<(double)> fill) -> pmt_t"""
  return _extras_swig.pmt_make_c64vector(*args, **kwargs)

def pmt_init_u8vector(*args, **kwargs):
  """pmt_init_u8vector(size_t k, uint8_t data) -> pmt_t"""
  return _extras_swig.pmt_init_u8vector(*args, **kwargs)

def pmt_init_s8vector(*args, **kwargs):
  """pmt_init_s8vector(size_t k, int8_t data) -> pmt_t"""
  return _extras_swig.pmt_init_s8vector(*args, **kwargs)

def pmt_init_u16vector(*args, **kwargs):
  """pmt_init_u16vector(size_t k, uint16_t data) -> pmt_t"""
  return _extras_swig.pmt_init_u16vector(*args, **kwargs)

def pmt_init_s16vector(*args, **kwargs):
  """pmt_init_s16vector(size_t k, int16_t data) -> pmt_t"""
  return _extras_swig.pmt_init_s16vector(*args, **kwargs)

def pmt_init_u32vector(*args, **kwargs):
  """pmt_init_u32vector(size_t k, uint32_t data) -> pmt_t"""
  return _extras_swig.pmt_init_u32vector(*args, **kwargs)

def pmt_init_s32vector(*args, **kwargs):
  """pmt_init_s32vector(size_t k, int32_t data) -> pmt_t"""
  return _extras_swig.pmt_init_s32vector(*args, **kwargs)

def pmt_init_f32vector(*args, **kwargs):
  """pmt_init_f32vector(size_t k, float data) -> pmt_t"""
  return _extras_swig.pmt_init_f32vector(*args, **kwargs)

def pmt_init_f64vector(*args, **kwargs):
  """pmt_init_f64vector(size_t k, double data) -> pmt_t"""
  return _extras_swig.pmt_init_f64vector(*args, **kwargs)

def pmt_init_c32vector(*args, **kwargs):
  """pmt_init_c32vector(size_t k, std::complex<(float)> data) -> pmt_t"""
  return _extras_swig.pmt_init_c32vector(*args, **kwargs)

def pmt_init_c64vector(*args, **kwargs):
  """pmt_init_c64vector(size_t k, std::complex<(double)> data) -> pmt_t"""
  return _extras_swig.pmt_init_c64vector(*args, **kwargs)

def pmt_u8vector_ref(*args, **kwargs):
  """pmt_u8vector_ref(pmt_t v, size_t k) -> uint8_t"""
  return _extras_swig.pmt_u8vector_ref(*args, **kwargs)

def pmt_s8vector_ref(*args, **kwargs):
  """pmt_s8vector_ref(pmt_t v, size_t k) -> int8_t"""
  return _extras_swig.pmt_s8vector_ref(*args, **kwargs)

def pmt_u16vector_ref(*args, **kwargs):
  """pmt_u16vector_ref(pmt_t v, size_t k) -> uint16_t"""
  return _extras_swig.pmt_u16vector_ref(*args, **kwargs)

def pmt_s16vector_ref(*args, **kwargs):
  """pmt_s16vector_ref(pmt_t v, size_t k) -> int16_t"""
  return _extras_swig.pmt_s16vector_ref(*args, **kwargs)

def pmt_u32vector_ref(*args, **kwargs):
  """pmt_u32vector_ref(pmt_t v, size_t k) -> uint32_t"""
  return _extras_swig.pmt_u32vector_ref(*args, **kwargs)

def pmt_s32vector_ref(*args, **kwargs):
  """pmt_s32vector_ref(pmt_t v, size_t k) -> int32_t"""
  return _extras_swig.pmt_s32vector_ref(*args, **kwargs)

def pmt_u64vector_ref(*args, **kwargs):
  """pmt_u64vector_ref(pmt_t v, size_t k) -> uint64_t"""
  return _extras_swig.pmt_u64vector_ref(*args, **kwargs)

def pmt_s64vector_ref(*args, **kwargs):
  """pmt_s64vector_ref(pmt_t v, size_t k) -> int64_t"""
  return _extras_swig.pmt_s64vector_ref(*args, **kwargs)

def pmt_f32vector_ref(*args, **kwargs):
  """pmt_f32vector_ref(pmt_t v, size_t k) -> float"""
  return _extras_swig.pmt_f32vector_ref(*args, **kwargs)

def pmt_f64vector_ref(*args, **kwargs):
  """pmt_f64vector_ref(pmt_t v, size_t k) -> double"""
  return _extras_swig.pmt_f64vector_ref(*args, **kwargs)

def pmt_c32vector_ref(*args, **kwargs):
  """pmt_c32vector_ref(pmt_t v, size_t k) -> std::complex<(float)>"""
  return _extras_swig.pmt_c32vector_ref(*args, **kwargs)

def pmt_c64vector_ref(*args, **kwargs):
  """pmt_c64vector_ref(pmt_t v, size_t k) -> std::complex<(double)>"""
  return _extras_swig.pmt_c64vector_ref(*args, **kwargs)

def pmt_u8vector_set(*args, **kwargs):
  """pmt_u8vector_set(pmt_t v, size_t k, uint8_t x)"""
  return _extras_swig.pmt_u8vector_set(*args, **kwargs)

def pmt_s8vector_set(*args, **kwargs):
  """pmt_s8vector_set(pmt_t v, size_t k, int8_t x)"""
  return _extras_swig.pmt_s8vector_set(*args, **kwargs)

def pmt_u16vector_set(*args, **kwargs):
  """pmt_u16vector_set(pmt_t v, size_t k, uint16_t x)"""
  return _extras_swig.pmt_u16vector_set(*args, **kwargs)

def pmt_s16vector_set(*args, **kwargs):
  """pmt_s16vector_set(pmt_t v, size_t k, int16_t x)"""
  return _extras_swig.pmt_s16vector_set(*args, **kwargs)

def pmt_u32vector_set(*args, **kwargs):
  """pmt_u32vector_set(pmt_t v, size_t k, uint32_t x)"""
  return _extras_swig.pmt_u32vector_set(*args, **kwargs)

def pmt_s32vector_set(*args, **kwargs):
  """pmt_s32vector_set(pmt_t v, size_t k, int32_t x)"""
  return _extras_swig.pmt_s32vector_set(*args, **kwargs)

def pmt_u64vector_set(*args, **kwargs):
  """pmt_u64vector_set(pmt_t v, size_t k, uint64_t x)"""
  return _extras_swig.pmt_u64vector_set(*args, **kwargs)

def pmt_s64vector_set(*args, **kwargs):
  """pmt_s64vector_set(pmt_t v, size_t k, int64_t x)"""
  return _extras_swig.pmt_s64vector_set(*args, **kwargs)

def pmt_f32vector_set(*args, **kwargs):
  """pmt_f32vector_set(pmt_t v, size_t k, float x)"""
  return _extras_swig.pmt_f32vector_set(*args, **kwargs)

def pmt_f64vector_set(*args, **kwargs):
  """pmt_f64vector_set(pmt_t v, size_t k, double x)"""
  return _extras_swig.pmt_f64vector_set(*args, **kwargs)

def pmt_c32vector_set(*args, **kwargs):
  """pmt_c32vector_set(pmt_t v, size_t k, std::complex<(float)> x)"""
  return _extras_swig.pmt_c32vector_set(*args, **kwargs)

def pmt_c64vector_set(*args, **kwargs):
  """pmt_c64vector_set(pmt_t v, size_t k, std::complex<(double)> x)"""
  return _extras_swig.pmt_c64vector_set(*args, **kwargs)

def pmt_uniform_vector_elements(*args, **kwargs):
  """pmt_uniform_vector_elements(pmt_t v, size_t len) -> void"""
  return _extras_swig.pmt_uniform_vector_elements(*args, **kwargs)

def pmt_u8vector_elements(*args, **kwargs):
  """pmt_u8vector_elements(pmt_t v, size_t len) -> uint8_t"""
  return _extras_swig.pmt_u8vector_elements(*args, **kwargs)

def pmt_s8vector_elements(*args, **kwargs):
  """pmt_s8vector_elements(pmt_t v, size_t len) -> int8_t"""
  return _extras_swig.pmt_s8vector_elements(*args, **kwargs)

def pmt_u16vector_elements(*args, **kwargs):
  """pmt_u16vector_elements(pmt_t v, size_t len) -> uint16_t"""
  return _extras_swig.pmt_u16vector_elements(*args, **kwargs)

def pmt_s16vector_elements(*args, **kwargs):
  """pmt_s16vector_elements(pmt_t v, size_t len) -> int16_t"""
  return _extras_swig.pmt_s16vector_elements(*args, **kwargs)

def pmt_u32vector_elements(*args, **kwargs):
  """pmt_u32vector_elements(pmt_t v, size_t len) -> uint32_t"""
  return _extras_swig.pmt_u32vector_elements(*args, **kwargs)

def pmt_s32vector_elements(*args, **kwargs):
  """pmt_s32vector_elements(pmt_t v, size_t len) -> int32_t"""
  return _extras_swig.pmt_s32vector_elements(*args, **kwargs)

def pmt_u64vector_elements(*args, **kwargs):
  """pmt_u64vector_elements(pmt_t v, size_t len) -> uint64_t"""
  return _extras_swig.pmt_u64vector_elements(*args, **kwargs)

def pmt_s64vector_elements(*args, **kwargs):
  """pmt_s64vector_elements(pmt_t v, size_t len) -> int64_t"""
  return _extras_swig.pmt_s64vector_elements(*args, **kwargs)

def pmt_f32vector_elements(*args, **kwargs):
  """pmt_f32vector_elements(pmt_t v, size_t len) -> float"""
  return _extras_swig.pmt_f32vector_elements(*args, **kwargs)

def pmt_f64vector_elements(*args, **kwargs):
  """pmt_f64vector_elements(pmt_t v, size_t len) -> double"""
  return _extras_swig.pmt_f64vector_elements(*args, **kwargs)

def pmt_c32vector_elements(*args, **kwargs):
  """pmt_c32vector_elements(pmt_t v, size_t len) -> std::complex<(float)>"""
  return _extras_swig.pmt_c32vector_elements(*args, **kwargs)

def pmt_c64vector_elements(*args, **kwargs):
  """pmt_c64vector_elements(pmt_t v, size_t len) -> std::complex<(double)>"""
  return _extras_swig.pmt_c64vector_elements(*args, **kwargs)

def pmt_uniform_vector_writable_elements(*args, **kwargs):
  """pmt_uniform_vector_writable_elements(pmt_t v, size_t len) -> void"""
  return _extras_swig.pmt_uniform_vector_writable_elements(*args, **kwargs)

def pmt_u8vector_writable_elements(*args, **kwargs):
  """pmt_u8vector_writable_elements(pmt_t v, size_t len) -> uint8_t"""
  return _extras_swig.pmt_u8vector_writable_elements(*args, **kwargs)

def pmt_s8vector_writable_elements(*args, **kwargs):
  """pmt_s8vector_writable_elements(pmt_t v, size_t len) -> int8_t"""
  return _extras_swig.pmt_s8vector_writable_elements(*args, **kwargs)

def pmt_u16vector_writable_elements(*args, **kwargs):
  """pmt_u16vector_writable_elements(pmt_t v, size_t len) -> uint16_t"""
  return _extras_swig.pmt_u16vector_writable_elements(*args, **kwargs)

def pmt_s16vector_writable_elements(*args, **kwargs):
  """pmt_s16vector_writable_elements(pmt_t v, size_t len) -> int16_t"""
  return _extras_swig.pmt_s16vector_writable_elements(*args, **kwargs)

def pmt_u32vector_writable_elements(*args, **kwargs):
  """pmt_u32vector_writable_elements(pmt_t v, size_t len) -> uint32_t"""
  return _extras_swig.pmt_u32vector_writable_elements(*args, **kwargs)

def pmt_s32vector_writable_elements(*args, **kwargs):
  """pmt_s32vector_writable_elements(pmt_t v, size_t len) -> int32_t"""
  return _extras_swig.pmt_s32vector_writable_elements(*args, **kwargs)

def pmt_u64vector_writable_elements(*args, **kwargs):
  """pmt_u64vector_writable_elements(pmt_t v, size_t len) -> uint64_t"""
  return _extras_swig.pmt_u64vector_writable_elements(*args, **kwargs)

def pmt_s64vector_writable_elements(*args, **kwargs):
  """pmt_s64vector_writable_elements(pmt_t v, size_t len) -> int64_t"""
  return _extras_swig.pmt_s64vector_writable_elements(*args, **kwargs)

def pmt_f32vector_writable_elements(*args, **kwargs):
  """pmt_f32vector_writable_elements(pmt_t v, size_t len) -> float"""
  return _extras_swig.pmt_f32vector_writable_elements(*args, **kwargs)

def pmt_f64vector_writable_elements(*args, **kwargs):
  """pmt_f64vector_writable_elements(pmt_t v, size_t len) -> double"""
  return _extras_swig.pmt_f64vector_writable_elements(*args, **kwargs)

def pmt_c32vector_writable_elements(*args, **kwargs):
  """pmt_c32vector_writable_elements(pmt_t v, size_t len) -> std::complex<(float)>"""
  return _extras_swig.pmt_c32vector_writable_elements(*args, **kwargs)

def pmt_c64vector_writable_elements(*args, **kwargs):
  """pmt_c64vector_writable_elements(pmt_t v, size_t len) -> std::complex<(double)>"""
  return _extras_swig.pmt_c64vector_writable_elements(*args, **kwargs)

def pmt_is_dict(*args, **kwargs):
  """pmt_is_dict(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_dict(*args, **kwargs)

def pmt_make_dict():
  """pmt_make_dict() -> pmt_t"""
  return _extras_swig.pmt_make_dict()

def pmt_dict_add(*args, **kwargs):
  """pmt_dict_add(pmt_t dict, pmt_t key, pmt_t value) -> pmt_t"""
  return _extras_swig.pmt_dict_add(*args, **kwargs)

def pmt_dict_delete(*args, **kwargs):
  """pmt_dict_delete(pmt_t dict, pmt_t key) -> pmt_t"""
  return _extras_swig.pmt_dict_delete(*args, **kwargs)

def pmt_dict_has_key(*args, **kwargs):
  """pmt_dict_has_key(pmt_t dict, pmt_t key) -> bool"""
  return _extras_swig.pmt_dict_has_key(*args, **kwargs)

def pmt_dict_ref(*args, **kwargs):
  """pmt_dict_ref(pmt_t dict, pmt_t key, pmt_t not_found) -> pmt_t"""
  return _extras_swig.pmt_dict_ref(*args, **kwargs)

def pmt_dict_items(*args, **kwargs):
  """pmt_dict_items(pmt_t dict) -> pmt_t"""
  return _extras_swig.pmt_dict_items(*args, **kwargs)

def pmt_dict_keys(*args, **kwargs):
  """pmt_dict_keys(pmt_t dict) -> pmt_t"""
  return _extras_swig.pmt_dict_keys(*args, **kwargs)

def pmt_dict_values(*args, **kwargs):
  """pmt_dict_values(pmt_t dict) -> pmt_t"""
  return _extras_swig.pmt_dict_values(*args, **kwargs)

def pmt_is_any(*args, **kwargs):
  """pmt_is_any(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_any(*args, **kwargs)

def pmt_make_any(*args, **kwargs):
  """pmt_make_any(boost::any any) -> pmt_t"""
  return _extras_swig.pmt_make_any(*args, **kwargs)

def pmt_any_ref(*args, **kwargs):
  """pmt_any_ref(pmt_t obj) -> boost::any"""
  return _extras_swig.pmt_any_ref(*args, **kwargs)

def pmt_any_set(*args, **kwargs):
  """pmt_any_set(pmt_t obj, boost::any any)"""
  return _extras_swig.pmt_any_set(*args, **kwargs)

def pmt_is_msg_accepter(*args, **kwargs):
  """pmt_is_msg_accepter(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_msg_accepter(*args, **kwargs)

def pmt_make_msg_accepter(*args, **kwargs):
  """pmt_make_msg_accepter(boost::shared_ptr<(gruel::msg_accepter)> ma) -> pmt_t"""
  return _extras_swig.pmt_make_msg_accepter(*args, **kwargs)

def pmt_msg_accepter_ref(*args, **kwargs):
  """pmt_msg_accepter_ref(pmt_t obj) -> boost::shared_ptr<(gruel::msg_accepter)>"""
  return _extras_swig.pmt_msg_accepter_ref(*args, **kwargs)

def pmt_eq(*args, **kwargs):
  """pmt_eq(pmt_t x, pmt_t y) -> bool"""
  return _extras_swig.pmt_eq(*args, **kwargs)

def pmt_eqv(*args, **kwargs):
  """pmt_eqv(pmt_t x, pmt_t y) -> bool"""
  return _extras_swig.pmt_eqv(*args, **kwargs)

def pmt_equal(*args, **kwargs):
  """pmt_equal(pmt_t x, pmt_t y) -> bool"""
  return _extras_swig.pmt_equal(*args, **kwargs)

def pmt_length(*args, **kwargs):
  """pmt_length(pmt_t v) -> size_t"""
  return _extras_swig.pmt_length(*args, **kwargs)

def pmt_assq(*args, **kwargs):
  """pmt_assq(pmt_t obj, pmt_t alist) -> pmt_t"""
  return _extras_swig.pmt_assq(*args, **kwargs)

def pmt_assv(*args, **kwargs):
  """pmt_assv(pmt_t obj, pmt_t alist) -> pmt_t"""
  return _extras_swig.pmt_assv(*args, **kwargs)

def pmt_assoc(*args, **kwargs):
  """pmt_assoc(pmt_t obj, pmt_t alist) -> pmt_t"""
  return _extras_swig.pmt_assoc(*args, **kwargs)

def pmt_map(*args, **kwargs):
  """pmt_map(pmt_t proc, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_map(*args, **kwargs)

def pmt_reverse(*args, **kwargs):
  """pmt_reverse(pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_reverse(*args, **kwargs)

def pmt_reverse_x(*args, **kwargs):
  """pmt_reverse_x(pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_reverse_x(*args, **kwargs)

def pmt_acons(*args, **kwargs):
  """pmt_acons(pmt_t x, pmt_t y, pmt_t a) -> pmt_t"""
  return _extras_swig.pmt_acons(*args, **kwargs)

def pmt_nth(*args, **kwargs):
  """pmt_nth(size_t n, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_nth(*args, **kwargs)

def pmt_nthcdr(*args, **kwargs):
  """pmt_nthcdr(size_t n, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_nthcdr(*args, **kwargs)

def pmt_memq(*args, **kwargs):
  """pmt_memq(pmt_t obj, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_memq(*args, **kwargs)

def pmt_memv(*args, **kwargs):
  """pmt_memv(pmt_t obj, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_memv(*args, **kwargs)

def pmt_member(*args, **kwargs):
  """pmt_member(pmt_t obj, pmt_t list) -> pmt_t"""
  return _extras_swig.pmt_member(*args, **kwargs)

def pmt_subsetp(*args, **kwargs):
  """pmt_subsetp(pmt_t list1, pmt_t list2) -> bool"""
  return _extras_swig.pmt_subsetp(*args, **kwargs)

def pmt_list1(*args, **kwargs):
  """pmt_list1(pmt_t x1) -> pmt_t"""
  return _extras_swig.pmt_list1(*args, **kwargs)

def pmt_list2(*args, **kwargs):
  """pmt_list2(pmt_t x1, pmt_t x2) -> pmt_t"""
  return _extras_swig.pmt_list2(*args, **kwargs)

def pmt_list3(*args, **kwargs):
  """pmt_list3(pmt_t x1, pmt_t x2, pmt_t x3) -> pmt_t"""
  return _extras_swig.pmt_list3(*args, **kwargs)

def pmt_list4(*args, **kwargs):
  """pmt_list4(pmt_t x1, pmt_t x2, pmt_t x3, pmt_t x4) -> pmt_t"""
  return _extras_swig.pmt_list4(*args, **kwargs)

def pmt_list5(*args, **kwargs):
  """pmt_list5(pmt_t x1, pmt_t x2, pmt_t x3, pmt_t x4, pmt_t x5) -> pmt_t"""
  return _extras_swig.pmt_list5(*args, **kwargs)

def pmt_list6(*args, **kwargs):
  """pmt_list6(pmt_t x1, pmt_t x2, pmt_t x3, pmt_t x4, pmt_t x5, pmt_t x6) -> pmt_t"""
  return _extras_swig.pmt_list6(*args, **kwargs)

def pmt_list_add(*args, **kwargs):
  """pmt_list_add(pmt_t list, pmt_t item) -> pmt_t"""
  return _extras_swig.pmt_list_add(*args, **kwargs)

def pmt_is_eof_object(*args, **kwargs):
  """pmt_is_eof_object(pmt_t obj) -> bool"""
  return _extras_swig.pmt_is_eof_object(*args, **kwargs)

def pmt_read(*args, **kwargs):
  """pmt_read(std::istream port) -> pmt_t"""
  return _extras_swig.pmt_read(*args, **kwargs)

def pmt_write(*args, **kwargs):
  """pmt_write(pmt_t obj, std::ostream port)"""
  return _extras_swig.pmt_write(*args, **kwargs)

def pmt_write_string(*args, **kwargs):
  """pmt_write_string(pmt_t obj) -> string"""
  return _extras_swig.pmt_write_string(*args, **kwargs)

def pmt_print(*args, **kwargs):
  """pmt_print(pmt_t v)"""
  return _extras_swig.pmt_print(*args, **kwargs)

def pmt_serialize(*args, **kwargs):
  """pmt_serialize(pmt_t obj, std::streambuf sink) -> bool"""
  return _extras_swig.pmt_serialize(*args, **kwargs)

def pmt_deserialize(*args, **kwargs):
  """pmt_deserialize(std::streambuf source) -> pmt_t"""
  return _extras_swig.pmt_deserialize(*args, **kwargs)

def pmt_dump_sizeof():
  """pmt_dump_sizeof()"""
  return _extras_swig.pmt_dump_sizeof()

def pmt_serialize_str(*args, **kwargs):
  """pmt_serialize_str(pmt_t obj) -> string"""
  return _extras_swig.pmt_serialize_str(*args, **kwargs)

def pmt_deserialize_str(*args, **kwargs):
  """pmt_deserialize_str(string str) -> pmt_t"""
  return _extras_swig.pmt_deserialize_str(*args, **kwargs)
class gr_tag_t(object):
    """Proxy of C++ gr_tag_t class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    offset = _swig_property(_extras_swig.gr_tag_t_offset_get, _extras_swig.gr_tag_t_offset_set)
    key = _swig_property(_extras_swig.gr_tag_t_key_get, _extras_swig.gr_tag_t_key_set)
    value = _swig_property(_extras_swig.gr_tag_t_value_get, _extras_swig.gr_tag_t_value_set)
    srcid = _swig_property(_extras_swig.gr_tag_t_srcid_get, _extras_swig.gr_tag_t_srcid_set)
    def offset_compare(*args, **kwargs):
        """offset_compare(gr_tag_t x, gr_tag_t y) -> bool"""
        return _extras_swig.gr_tag_t_offset_compare(*args, **kwargs)

    offset_compare = staticmethod(offset_compare)
    def __init__(self): 
        """__init__(self) -> gr_tag_t"""
        this = _extras_swig.new_gr_tag_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_tag_t
    __del__ = lambda self : None;
gr_tag_t_swigregister = _extras_swig.gr_tag_t_swigregister
gr_tag_t_swigregister(gr_tag_t)
cvar = _extras_swig.cvar
PMT_T = cvar.PMT_T
PMT_F = cvar.PMT_F
PMT_NIL = cvar.PMT_NIL

def pmt_make_tuple(*args):
  """
    pmt_make_tuple() -> pmt_t
    pmt_make_tuple(pmt_t e0) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4, pmt_t e5) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4, pmt_t e5, 
        pmt_t e6) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4, pmt_t e5, 
        pmt_t e6, pmt_t e7) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4, pmt_t e5, 
        pmt_t e6, pmt_t e7, pmt_t e8) -> pmt_t
    pmt_make_tuple(pmt_t e0, pmt_t e1, pmt_t e2, pmt_t e3, pmt_t e4, pmt_t e5, 
        pmt_t e6, pmt_t e7, pmt_t e8, pmt_t e9) -> pmt_t
    """
  return _extras_swig.pmt_make_tuple(*args)
PMT_EOF = cvar.PMT_EOF

def gr_tag_t_offset_compare(*args, **kwargs):
  """gr_tag_t_offset_compare(gr_tag_t x, gr_tag_t y) -> bool"""
  return _extras_swig.gr_tag_t_offset_compare(*args, **kwargs)

class tags_vector_t(object):
    """Proxy of C++ std::vector<(gr_tag_t)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _extras_swig.tags_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _extras_swig.tags_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _extras_swig.tags_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _extras_swig.tags_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _extras_swig.tags_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> tags_vector_t"""
        return _extras_swig.tags_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, tags_vector_t v)"""
        return _extras_swig.tags_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _extras_swig.tags_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _extras_swig.tags_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> tags_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _extras_swig.tags_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, tags_vector_t v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _extras_swig.tags_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _extras_swig.tags_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _extras_swig.tags_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _extras_swig.tags_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _extras_swig.tags_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, tags_vector_t v)"""
        return _extras_swig.tags_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _extras_swig.tags_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _extras_swig.tags_vector_t_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _extras_swig.tags_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _extras_swig.tags_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _extras_swig.tags_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _extras_swig.tags_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _extras_swig.tags_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> tags_vector_t
        __init__(self, tags_vector_t arg0) -> tags_vector_t
        __init__(self, size_type size) -> tags_vector_t
        __init__(self, size_type size, value_type value) -> tags_vector_t
        """
        this = _extras_swig.new_tags_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _extras_swig.tags_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _extras_swig.tags_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _extras_swig.tags_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _extras_swig.tags_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _extras_swig.tags_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _extras_swig.tags_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _extras_swig.tags_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _extras_swig.tags_vector_t_capacity(self)

    __swig_destroy__ = _extras_swig.delete_tags_vector_t
    __del__ = lambda self : None;
tags_vector_t_swigregister = _extras_swig.tags_vector_t_swigregister
tags_vector_t_swigregister(tags_vector_t)

class gr_feval_dd(object):
    """Proxy of C++ gr_feval_dd class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> gr_feval_dd"""
        this = _extras_swig.new_gr_feval_dd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_feval_dd
    __del__ = lambda self : None;
    def calleval(self, *args, **kwargs):
        """calleval(self, double x) -> double"""
        return _extras_swig.gr_feval_dd_calleval(self, *args, **kwargs)

gr_feval_dd_swigregister = _extras_swig.gr_feval_dd_swigregister
gr_feval_dd_swigregister(gr_feval_dd)

class gr_feval_cc(object):
    """Proxy of C++ gr_feval_cc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> gr_feval_cc"""
        this = _extras_swig.new_gr_feval_cc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_feval_cc
    __del__ = lambda self : None;
    def calleval(self, *args, **kwargs):
        """calleval(self, gr_complex x) -> gr_complex"""
        return _extras_swig.gr_feval_cc_calleval(self, *args, **kwargs)

gr_feval_cc_swigregister = _extras_swig.gr_feval_cc_swigregister
gr_feval_cc_swigregister(gr_feval_cc)

class gr_feval_ll(object):
    """Proxy of C++ gr_feval_ll class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> gr_feval_ll"""
        this = _extras_swig.new_gr_feval_ll()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_feval_ll
    __del__ = lambda self : None;
    def calleval(self, *args, **kwargs):
        """calleval(self, long x) -> long"""
        return _extras_swig.gr_feval_ll_calleval(self, *args, **kwargs)

gr_feval_ll_swigregister = _extras_swig.gr_feval_ll_swigregister
gr_feval_ll_swigregister(gr_feval_ll)

class gr_feval(object):
    """Proxy of C++ gr_feval class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> gr_feval"""
        this = _extras_swig.new_gr_feval()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_feval
    __del__ = lambda self : None;
    def calleval(self):
        """calleval(self)"""
        return _extras_swig.gr_feval_calleval(self)

gr_feval_swigregister = _extras_swig.gr_feval_swigregister
gr_feval_swigregister(gr_feval)


def gr_feval_dd_example(*args, **kwargs):
  """gr_feval_dd_example(gr_feval_dd f, double x) -> double"""
  return _extras_swig.gr_feval_dd_example(*args, **kwargs)

def gr_feval_cc_example(*args, **kwargs):
  """gr_feval_cc_example(gr_feval_cc f, gr_complex x) -> gr_complex"""
  return _extras_swig.gr_feval_cc_example(*args, **kwargs)

def gr_feval_ll_example(*args, **kwargs):
  """gr_feval_ll_example(gr_feval_ll f, long x) -> long"""
  return _extras_swig.gr_feval_ll_example(*args, **kwargs)

def gr_feval_example(*args, **kwargs):
  """gr_feval_example(gr_feval f)"""
  return _extras_swig.gr_feval_example(*args, **kwargs)
TPP_DONT = _extras_swig.TPP_DONT
TPP_ALL_TO_ALL = _extras_swig.TPP_ALL_TO_ALL
TPP_ONE_TO_ONE = _extras_swig.TPP_ONE_TO_ONE
class gr_block_gw_message_type(object):
    """Proxy of C++ gr_block_gw_message_type class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ACTION_WORK = _extras_swig.gr_block_gw_message_type_ACTION_WORK
    ACTION_FORECAST = _extras_swig.gr_block_gw_message_type_ACTION_FORECAST
    ACTION_START = _extras_swig.gr_block_gw_message_type_ACTION_START
    ACTION_STOP = _extras_swig.gr_block_gw_message_type_ACTION_STOP
    action = _swig_property(_extras_swig.gr_block_gw_message_type_action_get, _extras_swig.gr_block_gw_message_type_action_set)
    work_args_ninput_items = _swig_property(_extras_swig.gr_block_gw_message_type_work_args_ninput_items_get, _extras_swig.gr_block_gw_message_type_work_args_ninput_items_set)
    work_args_noutput_items = _swig_property(_extras_swig.gr_block_gw_message_type_work_args_noutput_items_get, _extras_swig.gr_block_gw_message_type_work_args_noutput_items_set)
    work_args_input_items = _swig_property(_extras_swig.gr_block_gw_message_type_work_args_input_items_get, _extras_swig.gr_block_gw_message_type_work_args_input_items_set)
    work_args_output_items = _swig_property(_extras_swig.gr_block_gw_message_type_work_args_output_items_get, _extras_swig.gr_block_gw_message_type_work_args_output_items_set)
    work_args_return_value = _swig_property(_extras_swig.gr_block_gw_message_type_work_args_return_value_get, _extras_swig.gr_block_gw_message_type_work_args_return_value_set)
    forecast_args_noutput_items = _swig_property(_extras_swig.gr_block_gw_message_type_forecast_args_noutput_items_get, _extras_swig.gr_block_gw_message_type_forecast_args_noutput_items_set)
    forecast_args_ninput_items_required = _swig_property(_extras_swig.gr_block_gw_message_type_forecast_args_ninput_items_required_get, _extras_swig.gr_block_gw_message_type_forecast_args_ninput_items_required_set)
    start_args_return_value = _swig_property(_extras_swig.gr_block_gw_message_type_start_args_return_value_get, _extras_swig.gr_block_gw_message_type_start_args_return_value_set)
    stop_args_return_value = _swig_property(_extras_swig.gr_block_gw_message_type_stop_args_return_value_get, _extras_swig.gr_block_gw_message_type_stop_args_return_value_set)
    def __init__(self): 
        """__init__(self) -> gr_block_gw_message_type"""
        this = _extras_swig.new_gr_block_gw_message_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _extras_swig.delete_gr_block_gw_message_type
    __del__ = lambda self : None;
gr_block_gw_message_type_swigregister = _extras_swig.gr_block_gw_message_type_swigregister
gr_block_gw_message_type_swigregister(gr_block_gw_message_type)

class block_gateway(block):
    """Proxy of C++ block_gateway class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(gr_feval_ll handler, string name, gr_io_signature_sptr in_sig, 
            gr_io_signature_sptr out_sig, size_t num_msg_inputs, 
            size_t num_msg_outputs) -> sptr
        """
        return _extras_swig.block_gateway_make(*args, **kwargs)

    make = staticmethod(make)
    def gr_block_message(self):
        """gr_block_message(self) -> gr_block_gw_message_type"""
        return _extras_swig.block_gateway_gr_block_message(self)

    def set_auto_consume(self, *args, **kwargs):
        """set_auto_consume(self, bool automatic)"""
        return _extras_swig.block_gateway_set_auto_consume(self, *args, **kwargs)

    def gr_block__set_auto_consume(self, *args, **kwargs):
        """gr_block__set_auto_consume(self, bool automatic)"""
        return _extras_swig.block_gateway_gr_block__set_auto_consume(self, *args, **kwargs)

    def gr_block__unique_id(self):
        """gr_block__unique_id(self) -> long"""
        return _extras_swig.block_gateway_gr_block__unique_id(self)

    def gr_block__name(self):
        """gr_block__name(self) -> string"""
        return _extras_swig.block_gateway_gr_block__name(self)

    def gr_block__history(self):
        """gr_block__history(self) -> unsigned int"""
        return _extras_swig.block_gateway_gr_block__history(self)

    def gr_block__set_history(self, *args, **kwargs):
        """gr_block__set_history(self, unsigned int history)"""
        return _extras_swig.block_gateway_gr_block__set_history(self, *args, **kwargs)

    def gr_block__set_output_multiple(self, *args, **kwargs):
        """gr_block__set_output_multiple(self, int multiple)"""
        return _extras_swig.block_gateway_gr_block__set_output_multiple(self, *args, **kwargs)

    def gr_block__output_multiple(self):
        """gr_block__output_multiple(self) -> int"""
        return _extras_swig.block_gateway_gr_block__output_multiple(self)

    def gr_block__consume(self, *args, **kwargs):
        """gr_block__consume(self, int which_input, int how_many_items)"""
        return _extras_swig.block_gateway_gr_block__consume(self, *args, **kwargs)

    def gr_block__consume_each(self, *args, **kwargs):
        """gr_block__consume_each(self, int how_many_items)"""
        return _extras_swig.block_gateway_gr_block__consume_each(self, *args, **kwargs)

    def gr_block__produce(self, *args, **kwargs):
        """gr_block__produce(self, int which_output, int how_many_items)"""
        return _extras_swig.block_gateway_gr_block__produce(self, *args, **kwargs)

    def gr_block__set_relative_rate(self, *args, **kwargs):
        """gr_block__set_relative_rate(self, double relative_rate)"""
        return _extras_swig.block_gateway_gr_block__set_relative_rate(self, *args, **kwargs)

    def gr_block__relative_rate(self):
        """gr_block__relative_rate(self) -> double"""
        return _extras_swig.block_gateway_gr_block__relative_rate(self)

    def gr_block__nitems_read(self, *args, **kwargs):
        """gr_block__nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _extras_swig.block_gateway_gr_block__nitems_read(self, *args, **kwargs)

    def gr_block__nitems_written(self, *args, **kwargs):
        """gr_block__nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _extras_swig.block_gateway_gr_block__nitems_written(self, *args, **kwargs)

    def gr_block__tag_propagation_policy(self):
        """gr_block__tag_propagation_policy(self) -> tag_propagation_policy_t"""
        return _extras_swig.block_gateway_gr_block__tag_propagation_policy(self)

    def gr_block__set_tag_propagation_policy(self, *args, **kwargs):
        """gr_block__set_tag_propagation_policy(self, tag_propagation_policy_t p)"""
        return _extras_swig.block_gateway_gr_block__set_tag_propagation_policy(self, *args, **kwargs)

    def gr_block__add_item_tag(self, *args):
        """
        gr_block__add_item_tag(self, unsigned int which_output, gr_tag_t tag)
        gr_block__add_item_tag(self, unsigned int which_output, uint64_t abs_offset, pmt_t key, 
            pmt_t value, pmt_t srcid = PMT_F)
        """
        return _extras_swig.block_gateway_gr_block__add_item_tag(self, *args)

    def gr_block__get_tags_in_range(self, *args):
        """
        gr_block__get_tags_in_range(self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end) -> tags_vector_t
        gr_block__get_tags_in_range(self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end, 
            pmt_t key) -> tags_vector_t
        """
        return _extras_swig.block_gateway_gr_block__get_tags_in_range(self, *args)

    def gr_block__check_msg_queue(self):
        """gr_block__check_msg_queue(self) -> bool"""
        return _extras_swig.block_gateway_gr_block__check_msg_queue(self)

    def gr_block__pop_msg_queue(self):
        """gr_block__pop_msg_queue(self) -> gr_tag_t"""
        return _extras_swig.block_gateway_gr_block__pop_msg_queue(self)

    def gr_block__post_msg(self, *args):
        """
        gr_block__post_msg(self, size_t port, gr_tag_t msg)
        gr_block__post_msg(self, size_t port, pmt_t key, pmt_t value, pmt_t srcid = PMT_F)
        """
        return _extras_swig.block_gateway_gr_block__post_msg(self, *args)

    __swig_destroy__ = _extras_swig.delete_block_gateway
    __del__ = lambda self : None;
block_gateway_swigregister = _extras_swig.block_gateway_swigregister
block_gateway_swigregister(block_gateway)

def block_gateway_make(*args, **kwargs):
  """
    block_gateway_make(gr_feval_ll handler, string name, gr_io_signature_sptr in_sig, 
        gr_io_signature_sptr out_sig, size_t num_msg_inputs, 
        size_t num_msg_outputs) -> sptr
    """
  return _extras_swig.block_gateway_make(*args, **kwargs)

class int_vector_t(object):
    """Proxy of C++ std::vector<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _extras_swig.int_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _extras_swig.int_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _extras_swig.int_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _extras_swig.int_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _extras_swig.int_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> __dummy_3__"""
        return _extras_swig.int_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, __dummy_3__ v)"""
        return _extras_swig.int_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _extras_swig.int_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _extras_swig.int_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> __dummy_3__
        __getitem__(self, difference_type i) -> value_type
        """
        return _extras_swig.int_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, __dummy_3__ v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _extras_swig.int_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _extras_swig.int_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _extras_swig.int_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _extras_swig.int_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _extras_swig.int_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, __dummy_3__ v)"""
        return _extras_swig.int_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _extras_swig.int_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _extras_swig.int_vector_t_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _extras_swig.int_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _extras_swig.int_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _extras_swig.int_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _extras_swig.int_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _extras_swig.int_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> int_vector_t
        __init__(self, __dummy_3__ arg0) -> int_vector_t
        __init__(self, size_type size) -> int_vector_t
        __init__(self, size_type size, value_type value) -> int_vector_t
        """
        this = _extras_swig.new_int_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _extras_swig.int_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _extras_swig.int_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _extras_swig.int_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _extras_swig.int_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _extras_swig.int_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _extras_swig.int_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _extras_swig.int_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _extras_swig.int_vector_t_capacity(self)

    __swig_destroy__ = _extras_swig.delete_int_vector_t
    __del__ = lambda self : None;
int_vector_t_swigregister = _extras_swig.int_vector_t_swigregister
int_vector_t_swigregister(int_vector_t)

class void_star_vector_t(object):
    """Proxy of C++ std::vector<(p.void)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _extras_swig.void_star_vector_t_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _extras_swig.void_star_vector_t___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _extras_swig.void_star_vector_t___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _extras_swig.void_star_vector_t___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _extras_swig.void_star_vector_t_pop(self)

    def __getslice__(self, *args, **kwargs):
        """__getslice__(self, difference_type i, difference_type j) -> void_star_vector_t"""
        return _extras_swig.void_star_vector_t___getslice__(self, *args, **kwargs)

    def __setslice__(self, *args, **kwargs):
        """__setslice__(self, difference_type i, difference_type j, void_star_vector_t v)"""
        return _extras_swig.void_star_vector_t___setslice__(self, *args, **kwargs)

    def __delslice__(self, *args, **kwargs):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _extras_swig.void_star_vector_t___delslice__(self, *args, **kwargs)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _extras_swig.void_star_vector_t___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> void_star_vector_t
        __getitem__(self, difference_type i) -> value_type
        """
        return _extras_swig.void_star_vector_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, void_star_vector_t v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _extras_swig.void_star_vector_t___setitem__(self, *args)

    def append(self, *args, **kwargs):
        """append(self, value_type x)"""
        return _extras_swig.void_star_vector_t_append(self, *args, **kwargs)

    def empty(self):
        """empty(self) -> bool"""
        return _extras_swig.void_star_vector_t_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _extras_swig.void_star_vector_t_size(self)

    def clear(self):
        """clear(self)"""
        return _extras_swig.void_star_vector_t_clear(self)

    def swap(self, *args, **kwargs):
        """swap(self, void_star_vector_t v)"""
        return _extras_swig.void_star_vector_t_swap(self, *args, **kwargs)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _extras_swig.void_star_vector_t_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _extras_swig.void_star_vector_t_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _extras_swig.void_star_vector_t_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _extras_swig.void_star_vector_t_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _extras_swig.void_star_vector_t_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _extras_swig.void_star_vector_t_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _extras_swig.void_star_vector_t_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> void_star_vector_t
        __init__(self, void_star_vector_t arg0) -> void_star_vector_t
        __init__(self, size_type size) -> void_star_vector_t
        __init__(self, size_type size, value_type value) -> void_star_vector_t
        """
        this = _extras_swig.new_void_star_vector_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs):
        """push_back(self, value_type x)"""
        return _extras_swig.void_star_vector_t_push_back(self, *args, **kwargs)

    def front(self):
        """front(self) -> value_type"""
        return _extras_swig.void_star_vector_t_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _extras_swig.void_star_vector_t_back(self)

    def assign(self, *args, **kwargs):
        """assign(self, size_type n, value_type x)"""
        return _extras_swig.void_star_vector_t_assign(self, *args, **kwargs)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _extras_swig.void_star_vector_t_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _extras_swig.void_star_vector_t_insert(self, *args)

    def reserve(self, *args, **kwargs):
        """reserve(self, size_type n)"""
        return _extras_swig.void_star_vector_t_reserve(self, *args, **kwargs)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _extras_swig.void_star_vector_t_capacity(self)

    __swig_destroy__ = _extras_swig.delete_void_star_vector_t
    __del__ = lambda self : None;
void_star_vector_t_swigregister = _extras_swig.void_star_vector_t_swigregister
void_star_vector_t_swigregister(void_star_vector_t)

class block_gateway_sptr(object):
    """Proxy of C++ boost::shared_ptr<(block_gateway)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> block_gateway_sptr
        __init__(self, block_gateway p) -> block_gateway_sptr
        """
        this = _extras_swig.new_block_gateway_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> block_gateway"""
        return _extras_swig.block_gateway_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_block_gateway_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(self, gr_feval_ll handler, string name, gr_io_signature_sptr in_sig, 
            gr_io_signature_sptr out_sig, size_t num_msg_inputs, 
            size_t num_msg_outputs) -> sptr
        """
        return _extras_swig.block_gateway_sptr_make(self, *args, **kwargs)

    def gr_block_message(self):
        """gr_block_message(self) -> gr_block_gw_message_type"""
        return _extras_swig.block_gateway_sptr_gr_block_message(self)

    def set_auto_consume(self, *args, **kwargs):
        """set_auto_consume(self, bool automatic)"""
        return _extras_swig.block_gateway_sptr_set_auto_consume(self, *args, **kwargs)

    def gr_block__set_auto_consume(self, *args, **kwargs):
        """gr_block__set_auto_consume(self, bool automatic)"""
        return _extras_swig.block_gateway_sptr_gr_block__set_auto_consume(self, *args, **kwargs)

    def gr_block__unique_id(self):
        """gr_block__unique_id(self) -> long"""
        return _extras_swig.block_gateway_sptr_gr_block__unique_id(self)

    def gr_block__name(self):
        """gr_block__name(self) -> string"""
        return _extras_swig.block_gateway_sptr_gr_block__name(self)

    def gr_block__history(self):
        """gr_block__history(self) -> unsigned int"""
        return _extras_swig.block_gateway_sptr_gr_block__history(self)

    def gr_block__set_history(self, *args, **kwargs):
        """gr_block__set_history(self, unsigned int history)"""
        return _extras_swig.block_gateway_sptr_gr_block__set_history(self, *args, **kwargs)

    def gr_block__set_output_multiple(self, *args, **kwargs):
        """gr_block__set_output_multiple(self, int multiple)"""
        return _extras_swig.block_gateway_sptr_gr_block__set_output_multiple(self, *args, **kwargs)

    def gr_block__output_multiple(self):
        """gr_block__output_multiple(self) -> int"""
        return _extras_swig.block_gateway_sptr_gr_block__output_multiple(self)

    def gr_block__consume(self, *args, **kwargs):
        """gr_block__consume(self, int which_input, int how_many_items)"""
        return _extras_swig.block_gateway_sptr_gr_block__consume(self, *args, **kwargs)

    def gr_block__consume_each(self, *args, **kwargs):
        """gr_block__consume_each(self, int how_many_items)"""
        return _extras_swig.block_gateway_sptr_gr_block__consume_each(self, *args, **kwargs)

    def gr_block__produce(self, *args, **kwargs):
        """gr_block__produce(self, int which_output, int how_many_items)"""
        return _extras_swig.block_gateway_sptr_gr_block__produce(self, *args, **kwargs)

    def gr_block__set_relative_rate(self, *args, **kwargs):
        """gr_block__set_relative_rate(self, double relative_rate)"""
        return _extras_swig.block_gateway_sptr_gr_block__set_relative_rate(self, *args, **kwargs)

    def gr_block__relative_rate(self):
        """gr_block__relative_rate(self) -> double"""
        return _extras_swig.block_gateway_sptr_gr_block__relative_rate(self)

    def gr_block__nitems_read(self, *args, **kwargs):
        """gr_block__nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _extras_swig.block_gateway_sptr_gr_block__nitems_read(self, *args, **kwargs)

    def gr_block__nitems_written(self, *args, **kwargs):
        """gr_block__nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _extras_swig.block_gateway_sptr_gr_block__nitems_written(self, *args, **kwargs)

    def gr_block__tag_propagation_policy(self):
        """gr_block__tag_propagation_policy(self) -> tag_propagation_policy_t"""
        return _extras_swig.block_gateway_sptr_gr_block__tag_propagation_policy(self)

    def gr_block__set_tag_propagation_policy(self, *args, **kwargs):
        """gr_block__set_tag_propagation_policy(self, tag_propagation_policy_t p)"""
        return _extras_swig.block_gateway_sptr_gr_block__set_tag_propagation_policy(self, *args, **kwargs)

    def gr_block__add_item_tag(self, *args):
        """
        gr_block__add_item_tag(self, unsigned int which_output, gr_tag_t tag)
        gr_block__add_item_tag(self, unsigned int which_output, uint64_t abs_offset, pmt_t key, 
            pmt_t value, pmt_t srcid = PMT_F)
        """
        return _extras_swig.block_gateway_sptr_gr_block__add_item_tag(self, *args)

    def gr_block__get_tags_in_range(self, *args):
        """
        gr_block__get_tags_in_range(self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end) -> tags_vector_t
        gr_block__get_tags_in_range(self, unsigned int which_input, uint64_t abs_start, uint64_t abs_end, 
            pmt_t key) -> tags_vector_t
        """
        return _extras_swig.block_gateway_sptr_gr_block__get_tags_in_range(self, *args)

    def gr_block__check_msg_queue(self):
        """gr_block__check_msg_queue(self) -> bool"""
        return _extras_swig.block_gateway_sptr_gr_block__check_msg_queue(self)

    def gr_block__pop_msg_queue(self):
        """gr_block__pop_msg_queue(self) -> gr_tag_t"""
        return _extras_swig.block_gateway_sptr_gr_block__pop_msg_queue(self)

    def gr_block__post_msg(self, *args):
        """
        gr_block__post_msg(self, size_t port, gr_tag_t msg)
        gr_block__post_msg(self, size_t port, pmt_t key, pmt_t value, pmt_t srcid = PMT_F)
        """
        return _extras_swig.block_gateway_sptr_gr_block__post_msg(self, *args)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.block_gateway_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.block_gateway_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.block_gateway_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.block_gateway_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.block_gateway_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.block_gateway_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.block_gateway_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.block_gateway_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.block_gateway_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.block_gateway_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.block_gateway_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.block_gateway_sptr_check_topology(self, *args, **kwargs)

block_gateway_sptr_swigregister = _extras_swig.block_gateway_sptr_swigregister
block_gateway_sptr_swigregister(block_gateway_sptr)

block_gateway_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

block_gateway = block_gateway.make


def gr_block_gw_pop_msg_queue_safe(*args, **kwargs):
  """gr_block_gw_pop_msg_queue_safe(block_gateway_sptr block_gw) -> gr_tag_t"""
  return _extras_swig.gr_block_gw_pop_msg_queue_safe(*args, **kwargs)
class uhd_amsg_source(block):
    """Proxy of C++ gnuradio::extras::uhd_amsg_source class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uhd::device_addr_t device_addr) -> sptr"""
        return _extras_swig.uhd_amsg_source_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _extras_swig.delete_uhd_amsg_source
    __del__ = lambda self : None;
uhd_amsg_source_swigregister = _extras_swig.uhd_amsg_source_swigregister
uhd_amsg_source_swigregister(uhd_amsg_source)

def uhd_amsg_source_make(*args, **kwargs):
  """uhd_amsg_source_make(uhd::device_addr_t device_addr) -> sptr"""
  return _extras_swig.uhd_amsg_source_make(*args, **kwargs)

class uhd_amsg_source_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gnuradio::extras::uhd_amsg_source)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> uhd_amsg_source_sptr
        __init__(self, uhd_amsg_source p) -> uhd_amsg_source_sptr
        """
        this = _extras_swig.new_uhd_amsg_source_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> uhd_amsg_source"""
        return _extras_swig.uhd_amsg_source_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_uhd_amsg_source_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(self, uhd::device_addr_t device_addr) -> sptr"""
        return _extras_swig.uhd_amsg_source_sptr_make(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.uhd_amsg_source_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _extras_swig.uhd_amsg_source_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _extras_swig.uhd_amsg_source_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _extras_swig.uhd_amsg_source_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _extras_swig.uhd_amsg_source_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _extras_swig.uhd_amsg_source_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _extras_swig.uhd_amsg_source_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.uhd_amsg_source_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _extras_swig.uhd_amsg_source_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _extras_swig.uhd_amsg_source_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _extras_swig.uhd_amsg_source_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _extras_swig.uhd_amsg_source_sptr_check_topology(self, *args, **kwargs)

uhd_amsg_source_sptr_swigregister = _extras_swig.uhd_amsg_source_sptr_swigregister
uhd_amsg_source_sptr_swigregister(uhd_amsg_source_sptr)

uhd_amsg_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

uhd_amsg_source = uhd_amsg_source.make


def pmt_blob_resize(*args, **kwargs):
  """pmt_blob_resize(pmt_t blob, size_t len_in_bytes)"""
  return _extras_swig.pmt_blob_resize(*args, **kwargs)

def pmt_blob_rw_data(*args, **kwargs):
  """pmt_blob_rw_data(pmt_t blob) -> void"""
  return _extras_swig.pmt_blob_rw_data(*args, **kwargs)
class pmt_mgr(object):
    """Proxy of C++ pmt::pmt_mgr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def make():
        """make() -> sptr"""
        return _extras_swig.pmt_mgr_make()

    make = staticmethod(make)
    def set(self, *args, **kwargs):
        """set(self, pmt_t x)"""
        return _extras_swig.pmt_mgr_set(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        """reset(self, pmt_t x)"""
        return _extras_swig.pmt_mgr_reset(self, *args, **kwargs)

    def acquire(self, block = True):
        """acquire(self, bool block = True) -> pmt_t"""
        return _extras_swig.pmt_mgr_acquire(self, block)

    __swig_destroy__ = _extras_swig.delete_pmt_mgr
    __del__ = lambda self : None;
pmt_mgr_swigregister = _extras_swig.pmt_mgr_swigregister
pmt_mgr_swigregister(pmt_mgr)

def pmt_make_blob(*args):
  """
    pmt_make_blob(void buf, size_t len) -> pmt_t
    pmt_make_blob(size_t len_in_bytes) -> pmt_t
    """
  return _extras_swig.pmt_make_blob(*args)

def pmt_mgr_make():
  """pmt_mgr_make() -> sptr"""
  return _extras_swig.pmt_mgr_make()


def pmt_mgr_acquire_safe(*args, **kwargs):
  """pmt_mgr_acquire_safe(pmt_mgr_sptr mgr, bool block) -> pmt_t"""
  return _extras_swig.pmt_mgr_acquire_safe(*args, **kwargs)
class pmt_mgr_sptr(object):
    """Proxy of C++ boost::shared_ptr<(pmt::pmt_mgr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> pmt_mgr_sptr
        __init__(self, pmt_mgr p) -> pmt_mgr_sptr
        """
        this = _extras_swig.new_pmt_mgr_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> pmt_mgr"""
        return _extras_swig.pmt_mgr_sptr___deref__(self)

    __swig_destroy__ = _extras_swig.delete_pmt_mgr_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(self) -> sptr"""
        return _extras_swig.pmt_mgr_sptr_make(self)

    def set(self, *args, **kwargs):
        """set(self, pmt_t x)"""
        return _extras_swig.pmt_mgr_sptr_set(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        """reset(self, pmt_t x)"""
        return _extras_swig.pmt_mgr_sptr_reset(self, *args, **kwargs)

    def acquire(self, block = True):
        """acquire(self, bool block = True) -> pmt_t"""
        return _extras_swig.pmt_mgr_sptr_acquire(self, block)

pmt_mgr_sptr_swigregister = _extras_swig.pmt_mgr_sptr_swigregister
pmt_mgr_sptr_swigregister(pmt_mgr_sptr)

pmt_mgr_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

pmt_mgr = pmt_mgr.make



